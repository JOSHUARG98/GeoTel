
GeoTel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08004394  08004394  00005394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  00006050  2**0
                  CONTENTS
  4 .ARM          00000008  08004704  08004704  00005704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800470c  0800470c  00006050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800470c  0800470c  0000570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004710  08004710  00005710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08004714  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00006050  2**0
                  CONTENTS
 10 .bss          000002c0  20000050  20000050  00006050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  00006050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003844  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bf1  00000000  00000000  000098c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  0000a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000323  00000000  00000000  0000a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019415  00000000  00000000  0000ac13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003cf1  00000000  00000000  00024028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b2a5  00000000  00000000  00027d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b2fbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001518  00000000  00000000  000b3004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000b451c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800437c 	.word	0x0800437c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	0800437c 	.word	0x0800437c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <RCC_En_CANx>:
#include <stdint.h>
#include<stdbool.h>

#include "CANx.h"

void RCC_En_CANx(CAN_TypeDef *port){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
		if(port == CAN1){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <RCC_En_CANx+0x28>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d105      	bne.n	8000ad8 <RCC_En_CANx+0x1c>
			SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_CAN1EN);
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <RCC_En_CANx+0x2c>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <RCC_En_CANx+0x2c>)
 8000ad2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ad6:	6593      	str	r3, [r2, #88]	@ 0x58
		}
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40006400 	.word	0x40006400
 8000ae8:	40021000 	.word	0x40021000

08000aec <CANx_Init>:

void CANx_Init(CAN_TypeDef *port){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	SET_BIT(port->MCR, CAN_MCR_RESET);//Reset FORZAMOS a entrar a modo sleep
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
	while(port->MCR & CAN_MCR_RESET) {}; //Esperamos a que el bit RESET se limpie
 8000b00:	bf00      	nop
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f9      	bne.n	8000b02 <CANx_Init+0x16>
	SET_BIT(port->MCR, CAN_MCR_INRQ);//Solicitamos entrar a modo inicializacion
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f043 0201 	orr.w	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
	while((port->MSR & CAN_MSR_INAK)==0){};//Esperamos a que el bit INAK sea set
 8000b1a:	bf00      	nop
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f9      	beq.n	8000b1c <CANx_Init+0x30>
	CLEAR_BIT(port->MCR, CAN_MCR_SLEEP);//Solicitamos Apagagar modo sleep
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f023 0202 	bic.w	r2, r3, #2
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	601a      	str	r2, [r3, #0]
	while(port->MSR & CAN_MSR_SLAK) {}; //Esperamos a que el bit SLAK se limpie ****ENTRAMOS A MODO INICIALIZACION TRAS ackmowledge de sleep off
 8000b34:	bf00      	nop
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f9      	bne.n	8000b36 <CANx_Init+0x4a>

	CLEAR_BIT(port->MCR, CAN_MCR_TXFP);// Inicializas el arbitraje, es decir la prioridad de cada mensaje es por identificador
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f023 0204 	bic.w	r2, r3, #4
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_RFLM);//La FIFO no se bloquea al haber estado de OVERRUN
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f023 0208 	bic.w	r2, r3, #8
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
	SET_BIT(port->MCR, CAN_MCR_NART);//Activamos la retransmisión automática.
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f043 0210 	orr.w	r2, r3, #16
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
	//Modificar, si no se desea retransmitir NART=1.
	CLEAR_BIT(port->MCR, CAN_MCR_AWUM);//AQUI SALIMOS DE MODO SLEEP POR SOFTWARE, EN UN FUTURO CONSIDERAR CAMBIARLOS A MODO HARDWARE PARA MODOS DE BAJO CONSUMO (CARRO PRENDIDO?)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 0220 	bic.w	r2, r3, #32
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_ABOM);//SALIDA DE BUSS OFF POR SOFTWARE
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_TTCM);//Desactivamos funcion solo disponible para RTOS
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_RESET);//
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_DBF);//Activa funcionamiento en modo debug
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <CANx_BitTiming_500Kz>:

void CANx_BitTiming_500Kz (CAN_TypeDef *port){
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]

	//SET_BIT(port->BTR , (CAN_BTR_LBKM)); //Descomentar si se quieren hacer pruebas en modo loopback
	//SET_BIT(port->Register->BTR , (CAN_SILENT));
	CLEAR_BIT(port->BTR , (CAN_BTR_BRP));//limpia  BRP
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000bbe:	f023 0303 	bic.w	r3, r3, #3
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(port->BTR , (CAN_BTR_TS1));//limpia TS1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(port->BTR , (CAN_BTR_TS2));//limpia TS2
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	61da      	str	r2, [r3, #28]

	SET_BIT(port->BTR , ((0x1UL)<<CAN_BTR_BRP_Pos));//fija Baud rate
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f043 0201 	orr.w	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	61da      	str	r2, [r3, #28]
	SET_BIT(port->BTR , ((11U)<<CAN_BTR_TS1_Pos));//configura tS1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f443 2230 	orr.w	r2, r3, #720896	@ 0xb0000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	61da      	str	r2, [r3, #28]
	SET_BIT(port->BTR , ((0x2UL)<<CAN_BTR_TS2_Pos));//configura tS2
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	61da      	str	r2, [r3, #28]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <CAN_FilterInit>:


void CAN_FilterInit (CAN_TypeDef *port, bool Mode, bool Scale, bool Fifo, uint8_t BitIndex){
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	4608      	mov	r0, r1
 8000c18:	4611      	mov	r1, r2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	70fb      	strb	r3, [r7, #3]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70bb      	strb	r3, [r7, #2]
 8000c24:	4613      	mov	r3, r2
 8000c26:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT(port->FA1R, (1 << BitIndex)); //Desactivo el filtro del Bit index
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000c2e:	7c3a      	ldrb	r2, [r7, #16]
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	401a      	ands	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	SET_BIT(port->MSR,CAN_FMR_FINIT);//modo inicialización en los filtros
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f043 0201 	orr.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]

    // Configuramos el bit correspondiente utilizando BitIndex para configurar modo lista o mascara
    if (Mode) {
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <CAN_FilterInit+0x5c>
    	SET_BIT(port->FM1R, (1 << BitIndex)); // Si Mode es verdadero, establecemos el bit en BitIndex
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000c58:	7c3a      	ldrb	r2, [r7, #16]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c68:	e00b      	b.n	8000c82 <CAN_FilterInit+0x74>
    } else {
    	CLEAR_BIT(port->FM1R, (1 << BitIndex)); // Si Mode es falso, limpiamos el bit en BitIndex
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000c70:	7c3a      	ldrb	r2, [r7, #16]
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

 // Configuramos el bit correspondiente utilizando BitIndex para configurar la escala
    if (Scale) {
 8000c82:	78bb      	ldrb	r3, [r7, #2]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00b      	beq.n	8000ca0 <CAN_FilterInit+0x92>
        SET_BIT(port->FS1R, (1 << BitIndex)); // Si Mode es verdadero, establecemos el bit en BitIndex
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000c8e:	7c3a      	ldrb	r2, [r7, #16]
 8000c90:	2101      	movs	r1, #1
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8000c9e:	e00b      	b.n	8000cb8 <CAN_FilterInit+0xaa>
    } else {
        CLEAR_BIT(port->FS1R, (1 << BitIndex));// Si Mode es falso, limpiamos el bit en BitIndex
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000ca6:	7c3a      	ldrb	r2, [r7, #16]
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cae:	43d2      	mvns	r2, r2
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    }

    // Configuramos el bit correspondiente utilizando BitIndex para asignar a FIFO0 o FIFO1
     if (Fifo) {
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <CAN_FilterInit+0xc8>
         SET_BIT(port->FFA1R, (1 << BitIndex));// Si Mode es verdadero, establecemos el bit en BitIndex
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000cc4:	7c3a      	ldrb	r2, [r7, #16]
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000cd4:	e00b      	b.n	8000cee <CAN_FilterInit+0xe0>
     } else {
         CLEAR_BIT(port->FFA1R, (1 << BitIndex));// Si Mode es falso, limpiamos el bit en BitIndex FFA1R
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000cdc:	7c3a      	ldrb	r2, [r7, #16]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	43d2      	mvns	r2, r2
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
     }

     SET_BIT(port->FA1R, (1 << BitIndex)); //Acitva el filtro del Bit index
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000cf4:	7c3a      	ldrb	r2, [r7, #16]
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
   //  CLEAR_BIT(port->FMR,CAN_FMR_FINIT);//fin de modo inicialización
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <CAN_SetFilterValue>:

void CAN_SetFilterValue(CAN_TypeDef *port, uint32_t ID, uint32_t Mask, uint8_t BitIndex){
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	70fb      	strb	r3, [r7, #3]

    SET_BIT(port->FMR, CAN_FMR_FINIT); // Activamos el modo de inicialización de filtros
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(port->FA1R, (1 << BitIndex));// Desactivamos temporalmente el filtro correspondiente
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    // Configuramos los registros de filtro y máscara

    port->sFilterRegister[BitIndex].FR1 &= ~(0xFFFFFFFF);  // Limpia bits antes de escribir
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3248      	adds	r2, #72	@ 0x48
 8000d4c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3248      	adds	r2, #72	@ 0x48
 8000d56:	2100      	movs	r1, #0
 8000d58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    port->sFilterRegister[BitIndex].FR2 &= ~(0xFFFFFFFF);  // Limpia bits antes de escribir
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	3348      	adds	r3, #72	@ 0x48
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	3348      	adds	r3, #72	@ 0x48
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4413      	add	r3, r2
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]

    port->sFilterRegister[BitIndex].FR1 = (ID & 0x7FF) << 21;  // Ajustar ID en bits 21 al 31
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	0559      	lsls	r1, r3, #21
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3248      	adds	r2, #72	@ 0x48
 8000d80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    port->sFilterRegister[BitIndex].FR2 = (Mask & 0x7FF) << 21; // Ajustar Mask en bits 21 al 31
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	0552      	lsls	r2, r2, #21
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	3348      	adds	r3, #72	@ 0x48
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	605a      	str	r2, [r3, #4]

    // Reactivamos el filtro y salimos del modo de inicialización
    SET_BIT(port->FA1R, (1 << BitIndex));
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000d9a:	78fa      	ldrb	r2, [r7, #3]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	431a      	orrs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  //  CLEAR_BIT(port->FMR, CAN_FMR_FINIT);
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <CAN_MailboxConfig>:

void CAN_MailboxConfig(CAN_TypeDef *port, bool ExtendedID, uint32_t ID, bool Remote, uint8_t mailboxIndex){
 8000db6:	b480      	push	{r7}
 8000db8:	b085      	sub	sp, #20
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	72fb      	strb	r3, [r7, #11]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	72bb      	strb	r3, [r7, #10]

	port->sTxMailBox[mailboxIndex].TIR &= ~(0xFFFFFFFF); //Limplia el registro TIR del milebox correspondiente
 8000dca:	7e3b      	ldrb	r3, [r7, #24]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	4413      	add	r3, r2
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	7e3b      	ldrb	r3, [r7, #24]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	3318      	adds	r3, #24
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

    if (mailboxIndex > 2) {//Si se usa la funcion con un index superior a 2 sale de la funcion ya que solo tenemos 3 mailbox
 8000de4:	7e3b      	ldrb	r3, [r7, #24]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d836      	bhi.n	8000e58 <CAN_MailboxConfig+0xa2>
        return;
    }
    // Configuramos el bit correspondiente utilizando isExtendedID para configurar IDE y cargar el identificador
    if (ExtendedID) {
 8000dea:	7afb      	ldrb	r3, [r7, #11]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00a      	beq.n	8000e06 <CAN_MailboxConfig+0x50>
        port->sTxMailBox[mailboxIndex].TIR = (ID << 3) | (1 << 2); // ID extendida: ID en bits 31:3, IDE en bit 2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	00da      	lsls	r2, r3, #3
 8000df4:	7e3b      	ldrb	r3, [r7, #24]
 8000df6:	f042 0204 	orr.w	r2, r2, #4
 8000dfa:	68f9      	ldr	r1, [r7, #12]
 8000dfc:	3318      	adds	r3, #24
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	440b      	add	r3, r1
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e007      	b.n	8000e16 <CAN_MailboxConfig+0x60>
    } else {
        port->sTxMailBox[mailboxIndex].TIR = (ID << 21); // ID estándar: ID en bits 31:21, IDE desactivado
 8000e06:	7e3b      	ldrb	r3, [r7, #24]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	0552      	lsls	r2, r2, #21
 8000e0c:	68f9      	ldr	r1, [r7, #12]
 8000e0e:	3318      	adds	r3, #24
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	440b      	add	r3, r1
 8000e14:	601a      	str	r2, [r3, #0]
    }

    // Configuramos RTR para indicar si es trama de datos o remota
    if (Remote) {
 8000e16:	7abb      	ldrb	r3, [r7, #10]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00e      	beq.n	8000e3a <CAN_MailboxConfig+0x84>
        SET_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_RTR); // Activa bit RTR para trama remota
 8000e1c:	7e3b      	ldrb	r3, [r7, #24]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	3318      	adds	r3, #24
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4413      	add	r3, r2
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	7e3b      	ldrb	r3, [r7, #24]
 8000e2a:	f042 0202 	orr.w	r2, r2, #2
 8000e2e:	68f9      	ldr	r1, [r7, #12]
 8000e30:	3318      	adds	r3, #24
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	440b      	add	r3, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e00f      	b.n	8000e5a <CAN_MailboxConfig+0xa4>
    } else {
        CLEAR_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_RTR); // Desactiva bit RTR para trama de datos
 8000e3a:	7e3b      	ldrb	r3, [r7, #24]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	3318      	adds	r3, #24
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4413      	add	r3, r2
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	7e3b      	ldrb	r3, [r7, #24]
 8000e48:	f022 0202 	bic.w	r2, r2, #2
 8000e4c:	68f9      	ldr	r1, [r7, #12]
 8000e4e:	3318      	adds	r3, #24
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	440b      	add	r3, r1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e000      	b.n	8000e5a <CAN_MailboxConfig+0xa4>
        return;
 8000e58:	bf00      	nop
    }
}
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <CAN_SendData>:


void CAN_SendData(CAN_TypeDef *port, uint8_t DLC, uint64_t data, uint8_t mailboxIndex) {
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	e9c7 2300 	strd	r2, r3, [r7]
 8000e70:	460b      	mov	r3, r1
 8000e72:	72fb      	strb	r3, [r7, #11]

	port->sTxMailBox[mailboxIndex].TDTR &= ~(0xFFFFFFFF); //Limpia valores de TDTR
 8000e74:	7e3b      	ldrb	r3, [r7, #24]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	3318      	adds	r3, #24
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	7e3b      	ldrb	r3, [r7, #24]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	3318      	adds	r3, #24
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
	port->sTxMailBox[mailboxIndex].TDLR &= ~(0xFFFFFFFF); //Limpia valores de TDLR
 8000e92:	7e3b      	ldrb	r3, [r7, #24]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	7e3b      	ldrb	r3, [r7, #24]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
	port->sTxMailBox[mailboxIndex].TDHR &= ~(0xFFFFFFFF); //Limpia calores de TDHR
 8000eb0:	7e3b      	ldrb	r3, [r7, #24]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	7e3b      	ldrb	r3, [r7, #24]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
    if (mailboxIndex > 2) {
 8000ece:	7e3b      	ldrb	r3, [r7, #24]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d822      	bhi.n	8000f1a <CAN_SendData+0xb6>
        return;
    }
    port->sTxMailBox[mailboxIndex].TDTR = DLC & 0xF;
 8000ed4:	7afa      	ldrb	r2, [r7, #11]
 8000ed6:	7e3b      	ldrb	r3, [r7, #24]
 8000ed8:	f002 020f 	and.w	r2, r2, #15
 8000edc:	68f9      	ldr	r1, [r7, #12]
 8000ede:	3318      	adds	r3, #24
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	601a      	str	r2, [r3, #0]
    port->sTxMailBox[mailboxIndex].TDLR = data & 0xFFFFFFFF;
 8000ee8:	7e3b      	ldrb	r3, [r7, #24]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	440b      	add	r3, r1
 8000ef2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000ef6:	601a      	str	r2, [r3, #0]
    port->sTxMailBox[mailboxIndex].TDHR = (data >> 32) & 0xFFFFFFFF;
 8000ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	000a      	movs	r2, r1
 8000f06:	2300      	movs	r3, #0
 8000f08:	7e39      	ldrb	r1, [r7, #24]
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	010b      	lsls	r3, r1, #4
 8000f10:	4413      	add	r3, r2
 8000f12:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f16:	6018      	str	r0, [r3, #0]
 8000f18:	e000      	b.n	8000f1c <CAN_SendData+0xb8>
        return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <CAN_RequestTransmission>:

void CAN_RequestTransmission(CAN_TypeDef *port, uint8_t mailboxIndex) {
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
    if (mailboxIndex > 2) {
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d82e      	bhi.n	8000f96 <CAN_RequestTransmission+0x70>
        return; // Verifica que el índice del mailbox esté dentro del rango permitido
    }
    if (mailboxIndex == 0) {
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d107      	bne.n	8000f4e <CAN_RequestTransmission+0x28>
        while ((port->TSR & (1 << CAN_TSR_TME0_Pos)) == 0) {}
 8000f3e:	bf00      	nop
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f9      	beq.n	8000f40 <CAN_RequestTransmission+0x1a>
 8000f4c:	e014      	b.n	8000f78 <CAN_RequestTransmission+0x52>
    } else if (mailboxIndex == 1) {
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d107      	bne.n	8000f64 <CAN_RequestTransmission+0x3e>
        while ((port->TSR & (1 << CAN_TSR_TME1_Pos)) == 0) {}
 8000f54:	bf00      	nop
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <CAN_RequestTransmission+0x30>
 8000f62:	e009      	b.n	8000f78 <CAN_RequestTransmission+0x52>
    } else if (mailboxIndex == 2) {
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d106      	bne.n	8000f78 <CAN_RequestTransmission+0x52>
        while ((port->TSR & (1 << CAN_TSR_TME2_Pos)) == 0) {}
 8000f6a:	bf00      	nop
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f9      	beq.n	8000f6c <CAN_RequestTransmission+0x46>
    }
    SET_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_TXRQ); // Activa el bit TXRQ para solicitar la transmisión
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	4413      	add	r3, r2
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	440b      	add	r3, r1
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e000      	b.n	8000f98 <CAN_RequestTransmission+0x72>
        return; // Verifica que el índice del mailbox esté dentro del rango permitido
 8000f96:	bf00      	nop
}
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <CANx_EnFIFO1Ints>:

    return flag;
}


void CANx_EnFIFO1Ints(CAN_TypeDef * port){
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	SET_BIT(port->IER, CAN_IER_FMPIE1|CAN_IER_FFIE1|CAN_IER_FOVIE1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f043 0270 	orr.w	r2, r3, #112	@ 0x70
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	615a      	str	r2, [r3, #20]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <CANx_EnFIFO0Ints>:

void CANx_EnFIFO0Ints(CAN_TypeDef * port){
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	SET_BIT(port->IER, CAN_IER_FMPIE0|CAN_IER_FFIE0|CAN_IER_FOVIE0);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f043 020e 	orr.w	r2, r3, #14
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	615a      	str	r2, [r3, #20]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <CANx_GetLEC>:



uint8_t CANx_GetLEC(CAN_TypeDef * port){
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	uint8_t lec = (port->ESR & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos; // Leer y desplazar campo LEC
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	73fb      	strb	r3, [r7, #15]
	return lec;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <CAN1_Rx0_FIFOx>:


void CAN1_Rx0_FIFOx(CAN_TypeDef *port, CAN_FIFOMailBox_TypeDef *fifo) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
    if (port->RF0R & CAN_RF0R_FMP0) { // Nuevo mensaje en FIFO
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d027      	beq.n	800106c <CAN1_Rx0_FIFOx+0x66>
        // Verificar el Last Error Code (LEC)
        if (CANx_GetLEC(port) == CAN_LEC_NO_ERROR) { // No hubo errores en la recepción
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ffe0 	bl	8000fe2 <CANx_GetLEC>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d11a      	bne.n	800105e <CAN1_Rx0_FIFOx+0x58>
            // Copiar los datos del FIFO a la estructura fifo
            fifo->RIR = port->sFIFOMailBox[0].RIR;      // Identificador del mensaje
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	601a      	str	r2, [r3, #0]
            fifo->RDTR = port->sFIFOMailBox[0].RDTR;    // Código de longitud de datos y FMI
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	605a      	str	r2, [r3, #4]
            fifo->RDLR = port->sFIFOMailBox[0].RDLR;    // Datos (Low)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	609a      	str	r2, [r3, #8]
            fifo->RDHR = port->sFIFOMailBox[0].RDHR;    // Datos (High)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	60da      	str	r2, [r3, #12]
            // Manejo del error: descartar el mensaje y liberar el FIFO
            SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
            return; // Salir de la función sin llenar la estructura
        }
        // Liberar el FIFO para el siguiente mensaje
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f043 0220 	orr.w	r2, r3, #32
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	e04d      	b.n	80010fa <CAN1_Rx0_FIFOx+0xf4>
            SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f043 0220 	orr.w	r2, r3, #32
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60da      	str	r2, [r3, #12]
            return; // Salir de la función sin llenar la estructura
 800106a:	e046      	b.n	80010fa <CAN1_Rx0_FIFOx+0xf4>

    } else if (port->RF0R & CAN_RF0R_FULL0) { // FIFO lleno
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d01a      	beq.n	80010ae <CAN1_Rx0_FIFOx+0xa8>
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[0].RIR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[0].RDTR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[0].RDLR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[0].RDHR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO para evitar la pérdida de datos
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f043 0220 	orr.w	r2, r3, #32
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	e025      	b.n	80010fa <CAN1_Rx0_FIFOx+0xf4>

    } else if (port->RF0R & CAN_RF0R_FOVR0) { // Sobrecarga en el FIFO
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01f      	beq.n	80010fa <CAN1_Rx0_FIFOx+0xf4>
        // Manejar el estado de sobrecarga y limpiar el bit de sobrecarga
        CLEAR_BIT(port->RF0R, CAN_RF0R_FOVR0);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f023 0210 	bic.w	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60da      	str	r2, [r3, #12]
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[0].RIR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[0].RDTR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[0].RDLR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[0].RDHR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f043 0220 	orr.w	r2, r3, #32
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60da      	str	r2, [r3, #12]
    }
}
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <CAN1_Rx1_FIFOx>:


void CAN1_Rx1_FIFOx(CAN_TypeDef *port, CAN_FIFOMailBox_TypeDef *fifo) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    if (port->RF1R & CAN_RF1R_FMP1) { // Nuevo mensaje en FIFO
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d027      	beq.n	8001166 <CAN1_Rx1_FIFOx+0x66>
        // Verificar el Last Error Code (LEC)
        if (CANx_GetLEC(port) == CAN_LEC_NO_ERROR) { // No hubo errores en la recepción
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff63 	bl	8000fe2 <CANx_GetLEC>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11a      	bne.n	8001158 <CAN1_Rx1_FIFOx+0x58>
            // Copiar los datos del FIFO a la estructura fifo
            fifo->RIR = port->sFIFOMailBox[1].RIR;      // Identificador del mensaje
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	601a      	str	r2, [r3, #0]
            fifo->RDTR = port->sFIFOMailBox[1].RDTR;    // Código de longitud de datos y FMI
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	605a      	str	r2, [r3, #4]
            fifo->RDLR = port->sFIFOMailBox[1].RDLR;    // Datos (Low)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	609a      	str	r2, [r3, #8]
            fifo->RDHR = port->sFIFOMailBox[1].RDHR;    // Datos (High)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	60da      	str	r2, [r3, #12]
            // Manejo del error: descartar el mensaje y liberar el FIFO
            SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
            return; // Salir de la función sin llenar la estructura
        }
        // Liberar el FIFO para el siguiente mensaje
        SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	f043 0220 	orr.w	r2, r3, #32
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	e04d      	b.n	80011f4 <CAN1_Rx1_FIFOx+0xf4>
            SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	f043 0220 	orr.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
            return; // Salir de la función sin llenar la estructura
 8001164:	e046      	b.n	80011f4 <CAN1_Rx1_FIFOx+0xf4>

    } else if (port->RF1R & CAN_RF1R_FULL1) { // FIFO lleno
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d01a      	beq.n	80011a8 <CAN1_Rx1_FIFOx+0xa8>
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[1].RIR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[1].RDTR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[1].RDLR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[1].RDHR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO para evitar la pérdida de datos
        SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	f043 0220 	orr.w	r2, r3, #32
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	e025      	b.n	80011f4 <CAN1_Rx1_FIFOx+0xf4>

    } else if (port->RF1R & CAN_RF1R_FOVR1) { // Sobrecarga en el FIFO
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01f      	beq.n	80011f4 <CAN1_Rx1_FIFOx+0xf4>
        // Manejar el estado de sobrecarga y limpiar el bit de sobrecarga
        CLEAR_BIT(port->RF1R, CAN_RF1R_FOVR1);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	f023 0210 	bic.w	r2, r3, #16
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[1].RIR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[1].RDTR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[1].RDLR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[1].RDHR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO
        SET_BIT(port->RF0R, CAN_RF1R_RFOM1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f043 0220 	orr.w	r2, r3, #32
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	60da      	str	r2, [r3, #12]
    }
}
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <GPIOx_InitAF>:
#define GPIO_OTYPER_OD                   1UL //Very High Speed

//Inicializa en la función alterna los puertos

                              /*Puerto	-	OTYPER	-	OSPEEDR		-	AFR		-	PUR*/
void GPIOx_InitAF(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t OTYPER_, uint8_t OSPEEDR_, uint8_t AFR_, bool PUR){ //L45
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	4608      	mov	r0, r1
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	4603      	mov	r3, r0
 800120a:	70fb      	strb	r3, [r7, #3]
 800120c:	460b      	mov	r3, r1
 800120e:	70bb      	strb	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT(Port_->MODER,(3 << (Pin_ * 2)));//Alternate Function on Pin x=1,...,15 /L45
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	0052      	lsls	r2, r2, #1
 800121c:	2103      	movs	r1, #3
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	43d2      	mvns	r2, r2
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
	SET_BIT(Port_->MODER,(GPIO_MODER_AF << (Pin_ * 2)));//Alternate Function on Pin x=1,...,15 /L45
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2102      	movs	r1, #2
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	601a      	str	r2, [r3, #0]
	SET_BIT(Port_->OTYPER,((OTYPER_ & 1) << (Pin_)));//Opend Drain or push pull
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	78ba      	ldrb	r2, [r7, #2]
 8001244:	f002 0101 	and.w	r1, r2, #1
 8001248:	78fa      	ldrb	r2, [r7, #3]
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	605a      	str	r2, [r3, #4]
	SET_BIT(Port_->OSPEEDR,(OSPEEDR_ << (Pin_ * 2)));//High Speed
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	7879      	ldrb	r1, [r7, #1]
 800125a:	78fa      	ldrb	r2, [r7, #3]
 800125c:	0052      	lsls	r2, r2, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]
	if(Pin_ > 7){
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d90b      	bls.n	8001286 <GPIOx_InitAF+0x8c>
		SET_BIT(Port_->AFR[1],(AFR_ <<((Pin_ - 8) * 4)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	7c39      	ldrb	r1, [r7, #16]
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	3a08      	subs	r2, #8
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24
 8001284:	e009      	b.n	800129a <GPIOx_InitAF+0xa0>
	}
	else{
		SET_BIT(Port_->AFR[0],(AFR_ << (Pin_ * 4)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	7c39      	ldrb	r1, [r7, #16]
 800128c:	78fa      	ldrb	r2, [r7, #3]
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	621a      	str	r2, [r3, #32]
	}
	//Veificar IDR? Debe estar en 1 los puertos
	if(PUR){
 800129a:	7d3b      	ldrb	r3, [r7, #20]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00a      	beq.n	80012b6 <GPIOx_InitAF+0xbc>
		SET_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0_0 << (Pin_ * 2)));//Resistencias Pull UP
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	60da      	str	r2, [r3, #12]
	}
	else{
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
	}

}
 80012b4:	e00a      	b.n	80012cc <GPIOx_InitAF+0xd2>
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2103      	movs	r1, #3
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60da      	str	r2, [r3, #12]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <GPIOx_InitIO>:

void GPIOx_InitIO(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t IO, bool PUR){ //l45
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	70fb      	strb	r3, [r7, #3]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70bb      	strb	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	707b      	strb	r3, [r7, #1]
	if(IO == GPIO_MODER_OUTPUT){
 80012f2:	78bb      	ldrb	r3, [r7, #2]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d115      	bne.n	8001324 <GPIOx_InitIO+0x4c>
		CLEAR_BIT(Port_->MODER,(3 << (Pin_ * 2)));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	0052      	lsls	r2, r2, #1
 8001300:	2103      	movs	r1, #3
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	43d2      	mvns	r2, r2
 8001308:	401a      	ands	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
		SET_BIT(Port_->MODER,(GPIO_MODER_OUTPUT << (Pin_ * 2))); // Salida
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e00f      	b.n	8001344 <GPIOx_InitIO+0x6c>
	}
	else{
		Port_->IDR &= 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
		CLEAR_BIT(Port_->MODER,(0x3 << (Pin_ * 2))); // Entrada
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	78fa      	ldrb	r2, [r7, #3]
 8001334:	0052      	lsls	r2, r2, #1
 8001336:	2103      	movs	r1, #3
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	43d2      	mvns	r2, r2
 800133e:	401a      	ands	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
	}
	if(PUR){
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <GPIOx_InitIO+0x88>
		SET_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0_0 << (Pin_ * 2)));//Resistencias Pull UP
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60da      	str	r2, [r3, #12]
	}
	else{
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
	}
}
 800135e:	e00a      	b.n	8001376 <GPIOx_InitIO+0x9e>
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2103      	movs	r1, #3
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60da      	str	r2, [r3, #12]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <RCC_EnPort>:

void RCC_EnPort(GPIO_TypeDef *port){//L45
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	if(port == GPIOA){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001392:	d106      	bne.n	80013a2 <RCC_EnPort+0x1e>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOAEN);
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <RCC_EnPort+0x98>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001398:	4a20      	ldr	r2, [pc, #128]	@ (800141c <RCC_EnPort+0x98>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	64d3      	str	r3, [r2, #76]	@ 0x4c
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOEEN);
	}
	else if(port == GPIOH){
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOHEN);
	}
}
 80013a0:	e035      	b.n	800140e <RCC_EnPort+0x8a>
	else if(port == GPIOB){
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001420 <RCC_EnPort+0x9c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d106      	bne.n	80013b8 <RCC_EnPort+0x34>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOBEN);
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <RCC_EnPort+0x98>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <RCC_EnPort+0x98>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80013b6:	e02a      	b.n	800140e <RCC_EnPort+0x8a>
	else if(port == GPIOC){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <RCC_EnPort+0xa0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d106      	bne.n	80013ce <RCC_EnPort+0x4a>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOCEN);
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <RCC_EnPort+0x98>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	4a15      	ldr	r2, [pc, #84]	@ (800141c <RCC_EnPort+0x98>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80013cc:	e01f      	b.n	800140e <RCC_EnPort+0x8a>
	else if(port == GPIOD){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a15      	ldr	r2, [pc, #84]	@ (8001428 <RCC_EnPort+0xa4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d106      	bne.n	80013e4 <RCC_EnPort+0x60>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIODEN);
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <RCC_EnPort+0x98>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <RCC_EnPort+0x98>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80013e2:	e014      	b.n	800140e <RCC_EnPort+0x8a>
	else if(port == GPIOE){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a11      	ldr	r2, [pc, #68]	@ (800142c <RCC_EnPort+0xa8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d106      	bne.n	80013fa <RCC_EnPort+0x76>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOEEN);
 80013ec:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <RCC_EnPort+0x98>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <RCC_EnPort+0x98>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80013f8:	e009      	b.n	800140e <RCC_EnPort+0x8a>
	else if(port == GPIOH){
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <RCC_EnPort+0xac>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d105      	bne.n	800140e <RCC_EnPort+0x8a>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOHEN);
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <RCC_EnPort+0x98>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <RCC_EnPort+0x98>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400
 8001424:	48000800 	.word	0x48000800
 8001428:	48000c00 	.word	0x48000c00
 800142c:	48001000 	.word	0x48001000
 8001430:	48001c00 	.word	0x48001c00

08001434 <SystCLK_SetMSI>:

void SystCLK_SetMSI(uint8_t MSI_clkSel){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	while((RCC->CR && RCC_CR_MSION) == 0);
 800143e:	bf00      	nop
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <SystCLK_SetMSI+0x44>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0fb      	beq.n	8001440 <SystCLK_SetMSI+0xc>
	SET_BIT(RCC->CR,RCC_CR_MSIRGSEL);
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <SystCLK_SetMSI+0x44>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <SystCLK_SetMSI+0x44>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC->CR,RCC_CR_MSIRANGE);
 8001454:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <SystCLK_SetMSI+0x44>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	@ (8001478 <SystCLK_SetMSI+0x44>)
 800145a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800145e:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,MSI_clkSel);
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <SystCLK_SetMSI+0x44>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4904      	ldr	r1, [pc, #16]	@ (8001478 <SystCLK_SetMSI+0x44>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000

0800147c <I2C_delay>:
#include<stdbool.h>



void I2C_delay(uint32_t T)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	while(T--);
 8001484:	bf00      	nop
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1fa      	bne.n	8001486 <I2C_delay+0xa>
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <RCC_En_I2C>:


void RCC_En_I2C(I2C_TypeDef *port){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if(port == I2C1){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <RCC_En_I2C+0x3c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d105      	bne.n	80014bc <RCC_En_I2C+0x1c>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_I2C1EN);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <RCC_En_I2C+0x40>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <RCC_En_I2C+0x40>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ba:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == I2C3){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <RCC_En_I2C+0x44>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d105      	bne.n	80014d0 <RCC_En_I2C+0x30>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_I2C3EN);
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <RCC_En_I2C+0x40>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <RCC_En_I2C+0x40>)
 80014ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58
	}
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40005400 	.word	0x40005400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40005c00 	.word	0x40005c00

080014e8 <I2C_Init>:




void I2C_Init(I2C_TypeDef *Port){
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 0201 	bic.w	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	601a      	str	r2, [r3, #0]
	//CONFIGURA I2C EN Fast-mode (FM)
	SET_BIT(Port->TIMINGR,(1 << (28))); //Configura el preescalador PRESC[3:0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x9 << (0))); //Configura el SCLL del registro TIMINGR
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f043 0209 	orr.w	r2, r3, #9
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x3 << (8))); //Configura el SCLH del registro TIMINGR
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x2 << (16))); //Configura el SDADEL del registro TIMINGR
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x3 << (20))); //Configura el SCLDEL del registro TIMINGR
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f443 1240 	orr.w	r2, r3, #3145728	@ 0x300000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]
	//SET_BIT(Port->I2C_CR1,I2C_CR1_TXDMAEN); //Habilitar modo DMA para las transmisiones
	//SET_BIT(Port->I2C_CR1,I2C_CR1_RXDMAEN); //Habilitar modo DMA para las transmisiones
	SET_BIT(Port->CR1,I2C_CR1_ANFOFF); //Habilitar modo DMA para las transmisiones
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
    SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <I2C_Tx_1Byte>:

void I2C_Tx_1Byte (I2C_TypeDef *Port, uint8_t Adress, uint8_t Byte_0){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	4613      	mov	r3, r2
 800156a:	70bb      	strb	r3, [r7, #2]
	int timeout = 1000;  // Valor de timeout ajustable
 800156c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001570:	60fb      	str	r3, [r7, #12]
	CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2, I2C_CR2_RD_WRN); //Escritura
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(0x01 << (16)));  //Numero de BYTES
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2, I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]
	while((Port->ISR & I2C_ISR_TXIS) == 0){
 80015c8:	e005      	b.n	80015d6 <I2C_Tx_1Byte+0x7a>
	    if(--timeout == 0) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <I2C_Tx_1Byte+0x88>
	while((Port->ISR & I2C_ISR_TXIS) == 0){
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f3      	beq.n	80015ca <I2C_Tx_1Byte+0x6e>
 80015e2:	e000      	b.n	80015e6 <I2C_Tx_1Byte+0x8a>
	        // Gestionar el error: puede reiniciar el bus o informar un error
	        break;
 80015e4:	bf00      	nop
	    }
	}
	Port->TXDR = Byte_0;
 80015e6:	78ba      	ldrb	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
	I2C_delay(50);
 80015ec:	2032      	movs	r0, #50	@ 0x32
 80015ee:	f7ff ff45 	bl	800147c <I2C_delay>
	//SET_BIT(Port->I2C_CR2, I2C_CR2_STOP); //Condicion de stop
	SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f043 0220 	orr.w	r2, r3, #32
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 0201 	bic.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
	SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <I2C_Rx_1Byte>:

int16_t I2C_Rx_1Byte (I2C_TypeDef *Port, uint8_t Adress){
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
	int timeout = 1000;  // Valor de timeout ajustable
 800162a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162e:	60fb      	str	r3, [r7, #12]
	int16_t ACEL_XOUT;
	uint8_t ACCEL_XOUT_H;
	uint8_t ACCEL_XOUT_L;
	CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,I2C_CR2_HEAD10R); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2, I2C_CR2_RD_WRN); //lectura
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2,(0x02 << (16)));  //Numero de BYTES
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(Port->CR2,I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	605a      	str	r2, [r3, #4]

	while((Port->ISR & I2C_ISR_RXNE) == 0){
 8001692:	e005      	b.n	80016a0 <I2C_Rx_1Byte+0x82>
	    if(--timeout == 0) {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3b01      	subs	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <I2C_Rx_1Byte+0x90>
	while((Port->ISR & I2C_ISR_RXNE) == 0){
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f3      	beq.n	8001694 <I2C_Rx_1Byte+0x76>
 80016ac:	e000      	b.n	80016b0 <I2C_Rx_1Byte+0x92>
	        // Gestionar el error: puede reiniciar el bus o informar un error
	        break;
 80016ae:	bf00      	nop
	    }
	}
	timeout = 1000;
 80016b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b4:	60fb      	str	r3, [r7, #12]
	ACCEL_XOUT_H=Port->RXDR;  //Leo valor que envia MPU
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	72fb      	strb	r3, [r7, #11]
	I2C_delay(100);
 80016bc:	2064      	movs	r0, #100	@ 0x64
 80016be:	f7ff fedd 	bl	800147c <I2C_delay>
	while((Port->ISR & I2C_ISR_RXNE) == 0){
 80016c2:	e005      	b.n	80016d0 <I2C_Rx_1Byte+0xb2>
	    if(--timeout == 0) {
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <I2C_Rx_1Byte+0xc0>
	while((Port->ISR & I2C_ISR_RXNE) == 0){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f3      	beq.n	80016c4 <I2C_Rx_1Byte+0xa6>
 80016dc:	e000      	b.n	80016e0 <I2C_Rx_1Byte+0xc2>
	        // Gestionar el error: puede reiniciar el bus o informar un error
	        break;
 80016de:	bf00      	nop
	    }
	}
	timeout = 1000;
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	60fb      	str	r3, [r7, #12]
	ACCEL_XOUT_L=Port->RXDR;  //Leo valor que envia MPU
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	72bb      	strb	r3, [r7, #10]
	I2C_delay(100);
 80016ec:	2064      	movs	r0, #100	@ 0x64
 80016ee:	f7ff fec5 	bl	800147c <I2C_delay>
	SET_BIT(Port->CR2, I2C_CR2_STOP); //Condicion de stop
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	605a      	str	r2, [r3, #4]
	SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f043 0220 	orr.w	r2, r3, #32
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	61da      	str	r2, [r3, #28]
	SET_BIT(Port->ICR, I2C_ICR_NACKCF); //Limpia bandaera de deteccion de condicion de stop
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f043 0210 	orr.w	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0201 	bic.w	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
	SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
	ACEL_XOUT = ACCEL_XOUT_H <<8 |ACCEL_XOUT_L;
 800172e:	7afb      	ldrb	r3, [r7, #11]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7abb      	ldrb	r3, [r7, #10]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	813b      	strh	r3, [r7, #8]
	return ACEL_XOUT;
 800173c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <I2C_Tx_2Bytes>:

void I2C_Tx_2Bytes (I2C_TypeDef *Port, uint8_t Adress, uint8_t Byte_0, uint8_t Byte_1){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	460b      	mov	r3, r1
 800175c:	70bb      	strb	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2, I2C_CR2_RD_WRN); //Escritura
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2,(0x02 << (16)));  //Numero de BYTES
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2, I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
while((Port->ISR&I2C_ISR_TXIS)==0){};
 80017b8:	bf00      	nop
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f9      	beq.n	80017ba <I2C_Tx_2Bytes+0x72>
Port->TXDR = Byte_0;
 80017c6:	78ba      	ldrb	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
I2C_delay(100);
 80017cc:	2064      	movs	r0, #100	@ 0x64
 80017ce:	f7ff fe55 	bl	800147c <I2C_delay>
while((Port->ISR&I2C_ISR_TXIS)==0){};
 80017d2:	bf00      	nop
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f9      	beq.n	80017d4 <I2C_Tx_2Bytes+0x8c>
Port->TXDR = Byte_1;
 80017e0:	787a      	ldrb	r2, [r7, #1]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
I2C_delay(100);
 80017e6:	2064      	movs	r0, #100	@ 0x64
 80017e8:	f7ff fe48 	bl	800147c <I2C_delay>
SET_BIT(Port->CR2, I2C_CR2_STOP); //Condicion de stop
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]
SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	61da      	str	r2, [r3, #28]
CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 0201 	bic.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	601a      	str	r2, [r3, #0]
SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <NVIC_Enable>:
#include "stm32l4xx.h"
#include <stdint.h>
#include<stdbool.h>
#include "NVIC.h"

void NVIC_Enable(uint32_t irq_num, uint8_t priority) {
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
    if (irq_num >= 84) {
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b53      	cmp	r3, #83	@ 0x53
 8001834:	d81a      	bhi.n	800186c <NVIC_Enable+0x48>
        // El número de interrupción es inválido, dado que el microcontrolador solo tiene 84 interrupciones
        return;
    }

    // Calcular el índice del registro ISER y el bit correspondiente
    uint32_t iser_index = irq_num / 32;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	60fb      	str	r3, [r7, #12]
    uint32_t iser_bit = irq_num % 32;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	60bb      	str	r3, [r7, #8]

    // Activar la interrupción correspondiente en NVIC_ISER
    NVIC->ISER[iser_index] = (1 << iser_bit);
 8001844:	2201      	movs	r2, #1
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <NVIC_Enable+0x54>)
 800184e:	4619      	mov	r1, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Configurar la prioridad en el registro NVIC_IPR
    NVIC->IP[irq_num] = (priority & 0xF) << 4; // La prioridad usa 4 bits más significativos
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <NVIC_Enable+0x54>)
 800185c:	b2d9      	uxtb	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001866:	460a      	mov	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e000      	b.n	800186e <NVIC_Enable+0x4a>
        return;
 800186c:	bf00      	nop

    // La función no limpia en ICER, pero si quieres limpiar el bit usa:
    // NVIC->ICER[iser_index] = (1 << iser_bit); // Esto es opcional si necesitas desactivar
}
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100

0800187c <RCC_En_USARTx>:
#include "NVIC.h"

char *A;
char buffer[255];

void RCC_En_USARTx(USART_TypeDef *port){
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if(port == USART2){
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <RCC_En_USARTx+0x50>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d105      	bne.n	8001898 <RCC_En_USARTx+0x1c>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_USART2EN);
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <RCC_En_USARTx+0x54>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <RCC_En_USARTx+0x54>)
 8001892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001896:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == USART3){
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <RCC_En_USARTx+0x58>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d105      	bne.n	80018ac <RCC_En_USARTx+0x30>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_USART3EN);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <RCC_En_USARTx+0x54>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <RCC_En_USARTx+0x54>)
 80018a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018aa:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == UART4){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <RCC_En_USARTx+0x5c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d105      	bne.n	80018c0 <RCC_En_USARTx+0x44>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_UART4EN );
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <RCC_En_USARTx+0x54>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <RCC_En_USARTx+0x54>)
 80018ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018be:	6593      	str	r3, [r2, #88]	@ 0x58
	}
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40004400 	.word	0x40004400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40004800 	.word	0x40004800
 80018d8:	40004c00 	.word	0x40004c00

080018dc <USARTx_CONF>:


void USARTx_CONF(USART_TypeDef *USARTx_, uint16_t USARTx_BRR_MSI, uint8_t USARTx_Pos_IRQn, uint8_t USARTx_Prio_IRQn){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	807b      	strh	r3, [r7, #2]
 80018ee:	460b      	mov	r3, r1
 80018f0:	707b      	strb	r3, [r7, #1]
 80018f2:	4613      	mov	r3, r2
 80018f4:	703b      	strb	r3, [r7, #0]

	A = buffer;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <USARTx_CONF+0x88>)
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <USARTx_CONF+0x8c>)
 80018fa:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(USARTx_->CR1, 0xFF);	//LIMPIAMOS Y DESHABILITAMOS CONFIGURACIÓN DE USART3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
	SET_BIT(USARTx_->BRR, USARTx_BRR_MSI);	//SE CONFIGURA UN BAUD RATE
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]

	SET_BIT(USARTx_->CR1, 0x0C);	//HABILITAMOS TX Y RX
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f043 020c 	orr.w	r2, r3, #12
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	601a      	str	r2, [r3, #0]
	/*#####CONFIGURACIÓN PARA INDICADORES DE BANDERAS EN USART3 CON CR1#####*/
	SET_BIT(USARTx_->CR1, 0x020);	//ENMASCARAMOS BANDERA INDICADORA EN LA RECEPCIÓN DE DATOS, BIT 5
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	601a      	str	r2, [r3, #0]

	/*#####ÚLTIMA CONFIGURACIÓN PARA USART3#####*/
	SET_BIT(USARTx_->CR1, 0x01);	//HABILITAMOS LA CONEXIÓN EN USART3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]

	switch(USARTx_Pos_IRQn){
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b27      	cmp	r3, #39	@ 0x27
 800193c:	d002      	beq.n	8001944 <USARTx_CONF+0x68>
 800193e:	2b34      	cmp	r3, #52	@ 0x34
 8001940:	d006      	beq.n	8001950 <USARTx_CONF+0x74>
		break;
	case UART4_IRQn:
		NVIC_Enable(UART4_IRQn, USARTx_Prio_IRQn);//ACTIVA INTERRUPCIÓN UART4
		break;
	default:
		break;
 8001942:	e00b      	b.n	800195c <USARTx_CONF+0x80>
		NVIC_Enable(USART3_IRQn, USARTx_Prio_IRQn);//ACTIVA INTERRUPCIÓN USART3
 8001944:	783b      	ldrb	r3, [r7, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	2027      	movs	r0, #39	@ 0x27
 800194a:	f7ff ff6b 	bl	8001824 <NVIC_Enable>
		break;
 800194e:	e005      	b.n	800195c <USARTx_CONF+0x80>
		NVIC_Enable(UART4_IRQn, USARTx_Prio_IRQn);//ACTIVA INTERRUPCIÓN UART4
 8001950:	783b      	ldrb	r3, [r7, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	2034      	movs	r0, #52	@ 0x34
 8001956:	f7ff ff65 	bl	8001824 <NVIC_Enable>
		break;
 800195a:	bf00      	nop
	}
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000006c 	.word	0x2000006c
 8001968:	20000070 	.word	0x20000070

0800196c <USART3_IRQHandler>:

// Función de interrupción por UART
void USART3_IRQHandler(void){
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
	//CADA QUE SE ACTIVE LA BANDERA DE INTERRUPCIÓN DE LA RECEPCIÓN,SE VA A HACER LO SIGUIENTE:
	*A++ = USART3->RDR;
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <USART3_IRQHandler+0x34>)
 8001972:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001974:	b298      	uxth	r0, r3
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <USART3_IRQHandler+0x38>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <USART3_IRQHandler+0x38>)
 800197e:	600a      	str	r2, [r1, #0]
 8001980:	b2c2      	uxtb	r2, r0
 8001982:	701a      	strb	r2, [r3, #0]
	//LIMPIAMOS BANDERA PARA SALIR DE INTERRUPCIÓN
	CLEAR_BIT(USART3->RQR, 0x08);
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <USART3_IRQHandler+0x34>)
 8001986:	8b1b      	ldrh	r3, [r3, #24]
 8001988:	b29b      	uxth	r3, r3
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <USART3_IRQHandler+0x34>)
 800198c:	f023 0308 	bic.w	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	8313      	strh	r3, [r2, #24]
	//UART4->TDR = *A++;
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40004800 	.word	0x40004800
 80019a4:	2000006c 	.word	0x2000006c

080019a8 <sendStringUARTx>:

// Función que envía un dato por UART
void sendStringUARTx(USART_TypeDef *USARTx_, register const char *msg){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1

    while(*msg)
 80019b2:	e00c      	b.n	80019ce <sendStringUARTx+0x26>
    {
    	USARTx_->TDR = *msg++;
 80019b4:	461a      	mov	r2, r3
 80019b6:	1c53      	adds	r3, r2, #1
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	4611      	mov	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	8511      	strh	r1, [r2, #40]	@ 0x28
    	while(!(USARTx_->ISR & 0x080));
 80019c0:	bf00      	nop
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	69d2      	ldr	r2, [r2, #28]
 80019c6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80019ca:	2a00      	cmp	r2, #0
 80019cc:	d0f9      	beq.n	80019c2 <sendStringUARTx+0x1a>
    while(*msg)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	d1ef      	bne.n	80019b4 <sendStringUARTx+0xc>
    }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <sendByteUARTx>:
// Función que envía una cadena por UART

// Función que envía un solo byte (8 bits) por UART
void sendByteUARTx(USART_TypeDef *USARTx_, uint8_t data) {
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
    // Cargar el byte en el registro de transmisión (TDR)
    USARTx_->TDR = data;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Esperar a que la transmisión esté completa (espera hasta que el bit TXE esté listo)
    while (!(USARTx_->ISR & 0x080));
 80019f6:	bf00      	nop
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f9      	beq.n	80019f8 <sendByteUARTx+0x16>
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0c      	blt.n	8001a40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_ClearPendingIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	3360      	adds	r3, #96	@ 0x60
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <SSD1306_Init>:





void SSD1306_Init(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

	// Apaga la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xAE);  // Display OFF
 8001a54:	23ae      	movs	r3, #174	@ 0xae
 8001a56:	2200      	movs	r2, #0
 8001a58:	213c      	movs	r1, #60	@ 0x3c
 8001a5a:	484a      	ldr	r0, [pc, #296]	@ (8001b84 <SSD1306_Init+0x134>)
 8001a5c:	f7ff fe74 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura la frecuencia del reloj
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xD5);  // Set display clock divide ratio/oscillator frequency
 8001a60:	23d5      	movs	r3, #213	@ 0xd5
 8001a62:	2200      	movs	r2, #0
 8001a64:	213c      	movs	r1, #60	@ 0x3c
 8001a66:	4847      	ldr	r0, [pc, #284]	@ (8001b84 <SSD1306_Init+0x134>)
 8001a68:	f7ff fe6e 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x80);  // Recommended oscillator frequency
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	2200      	movs	r2, #0
 8001a70:	213c      	movs	r1, #60	@ 0x3c
 8001a72:	4844      	ldr	r0, [pc, #272]	@ (8001b84 <SSD1306_Init+0x134>)
 8001a74:	f7ff fe68 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura la multiplexación (64 multiplex para 128x64)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA8);  // Set multiplex ratio
 8001a78:	23a8      	movs	r3, #168	@ 0xa8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	213c      	movs	r1, #60	@ 0x3c
 8001a7e:	4841      	ldr	r0, [pc, #260]	@ (8001b84 <SSD1306_Init+0x134>)
 8001a80:	f7ff fe62 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x3F);  // Multiplex ratio is 64 (for 128x64 display)
 8001a84:	233f      	movs	r3, #63	@ 0x3f
 8001a86:	2200      	movs	r2, #0
 8001a88:	213c      	movs	r1, #60	@ 0x3c
 8001a8a:	483e      	ldr	r0, [pc, #248]	@ (8001b84 <SSD1306_Init+0x134>)
 8001a8c:	f7ff fe5c 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura el offset de la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xD3);  // Set display offset
 8001a90:	23d3      	movs	r3, #211	@ 0xd3
 8001a92:	2200      	movs	r2, #0
 8001a94:	213c      	movs	r1, #60	@ 0x3c
 8001a96:	483b      	ldr	r0, [pc, #236]	@ (8001b84 <SSD1306_Init+0x134>)
 8001a98:	f7ff fe56 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);  // No offset
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	213c      	movs	r1, #60	@ 0x3c
 8001aa2:	4838      	ldr	r0, [pc, #224]	@ (8001b84 <SSD1306_Init+0x134>)
 8001aa4:	f7ff fe50 	bl	8001748 <I2C_Tx_2Bytes>

	// Línea de inicio de la pantalla en 0
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x40);  // Set display start line at 0
 8001aa8:	2340      	movs	r3, #64	@ 0x40
 8001aaa:	2200      	movs	r2, #0
 8001aac:	213c      	movs	r1, #60	@ 0x3c
 8001aae:	4835      	ldr	r0, [pc, #212]	@ (8001b84 <SSD1306_Init+0x134>)
 8001ab0:	f7ff fe4a 	bl	8001748 <I2C_Tx_2Bytes>

	// Habilita el regulador de la bomba de carga (Charge Pump)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x8D);  // Enable charge pump regulator
 8001ab4:	238d      	movs	r3, #141	@ 0x8d
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	213c      	movs	r1, #60	@ 0x3c
 8001aba:	4832      	ldr	r0, [pc, #200]	@ (8001b84 <SSD1306_Init+0x134>)
 8001abc:	f7ff fe44 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x14);  // Enable charge pump
 8001ac0:	2314      	movs	r3, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	213c      	movs	r1, #60	@ 0x3c
 8001ac6:	482f      	ldr	r0, [pc, #188]	@ (8001b84 <SSD1306_Init+0x134>)
 8001ac8:	f7ff fe3e 	bl	8001748 <I2C_Tx_2Bytes>

	// Establece el modo de direccionamiento de memoria
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x20);  // Set memory addressing mode
 8001acc:	2320      	movs	r3, #32
 8001ace:	2200      	movs	r2, #0
 8001ad0:	213c      	movs	r1, #60	@ 0x3c
 8001ad2:	482c      	ldr	r0, [pc, #176]	@ (8001b84 <SSD1306_Init+0x134>)
 8001ad4:	f7ff fe38 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);  // Horizontal addressing mode
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2200      	movs	r2, #0
 8001adc:	213c      	movs	r1, #60	@ 0x3c
 8001ade:	4829      	ldr	r0, [pc, #164]	@ (8001b84 <SSD1306_Init+0x134>)
 8001ae0:	f7ff fe32 	bl	8001748 <I2C_Tx_2Bytes>

	// Reconfigura el mapa de segmentos (columna 127 mapeada a SEG0)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA1);  // Set segment re-map (A0/A1)
 8001ae4:	23a1      	movs	r3, #161	@ 0xa1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	213c      	movs	r1, #60	@ 0x3c
 8001aea:	4826      	ldr	r0, [pc, #152]	@ (8001b84 <SSD1306_Init+0x134>)
 8001aec:	f7ff fe2c 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura la dirección de escaneo de salida COM
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xC8);  // Set COM output scan direction (C0/C8)
 8001af0:	23c8      	movs	r3, #200	@ 0xc8
 8001af2:	2200      	movs	r2, #0
 8001af4:	213c      	movs	r1, #60	@ 0x3c
 8001af6:	4823      	ldr	r0, [pc, #140]	@ (8001b84 <SSD1306_Init+0x134>)
 8001af8:	f7ff fe26 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura los pines COM
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xDA);  // Set COM pins hardware configuration
 8001afc:	23da      	movs	r3, #218	@ 0xda
 8001afe:	2200      	movs	r2, #0
 8001b00:	213c      	movs	r1, #60	@ 0x3c
 8001b02:	4820      	ldr	r0, [pc, #128]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b04:	f7ff fe20 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x12);  // Alternative COM pin config
 8001b08:	2312      	movs	r3, #18
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	213c      	movs	r1, #60	@ 0x3c
 8001b0e:	481d      	ldr	r0, [pc, #116]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b10:	f7ff fe1a 	bl	8001748 <I2C_Tx_2Bytes>

	// Establece el nivel de contraste de la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x81);  // Set contrast control
 8001b14:	2381      	movs	r3, #129	@ 0x81
 8001b16:	2200      	movs	r2, #0
 8001b18:	213c      	movs	r1, #60	@ 0x3c
 8001b1a:	481a      	ldr	r0, [pc, #104]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b1c:	f7ff fe14 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x7F);  // Contrast level (0x7F is typical)
 8001b20:	237f      	movs	r3, #127	@ 0x7f
 8001b22:	2200      	movs	r2, #0
 8001b24:	213c      	movs	r1, #60	@ 0x3c
 8001b26:	4817      	ldr	r0, [pc, #92]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b28:	f7ff fe0e 	bl	8001748 <I2C_Tx_2Bytes>

	// Deshabilita la inversa de la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);  // Disable entire display ON (resume to RAM content)
 8001b2c:	23a4      	movs	r3, #164	@ 0xa4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	213c      	movs	r1, #60	@ 0x3c
 8001b32:	4814      	ldr	r0, [pc, #80]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b34:	f7ff fe08 	bl	8001748 <I2C_Tx_2Bytes>

	// Establece el modo de visualización normal (sin inversión)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 8001b38:	23a6      	movs	r3, #166	@ 0xa6
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	213c      	movs	r1, #60	@ 0x3c
 8001b3e:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b40:	f7ff fe02 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura el rango de desplazamiento (horizontal)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xD9);  // Set pre-charge period
 8001b44:	23d9      	movs	r3, #217	@ 0xd9
 8001b46:	2200      	movs	r2, #0
 8001b48:	213c      	movs	r1, #60	@ 0x3c
 8001b4a:	480e      	ldr	r0, [pc, #56]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b4c:	f7ff fdfc 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xF1);  // Pre-charge period (recommended value)
 8001b50:	23f1      	movs	r3, #241	@ 0xf1
 8001b52:	2200      	movs	r2, #0
 8001b54:	213c      	movs	r1, #60	@ 0x3c
 8001b56:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b58:	f7ff fdf6 	bl	8001748 <I2C_Tx_2Bytes>

	// Configura el voltaje de desactivación del driver
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xDB);  // Set VCOMH deselect level
 8001b5c:	23db      	movs	r3, #219	@ 0xdb
 8001b5e:	2200      	movs	r2, #0
 8001b60:	213c      	movs	r1, #60	@ 0x3c
 8001b62:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b64:	f7ff fdf0 	bl	8001748 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x40);  // VCOMH deselect level (0x40 recommended)
 8001b68:	2340      	movs	r3, #64	@ 0x40
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	213c      	movs	r1, #60	@ 0x3c
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b70:	f7ff fdea 	bl	8001748 <I2C_Tx_2Bytes>

	// Enciende la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xAF);  // Display ON
 8001b74:	23af      	movs	r3, #175	@ 0xaf
 8001b76:	2200      	movs	r2, #0
 8001b78:	213c      	movs	r1, #60	@ 0x3c
 8001b7a:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <SSD1306_Init+0x134>)
 8001b7c:	f7ff fde4 	bl	8001748 <I2C_Tx_2Bytes>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40005c00 	.word	0x40005c00

08001b88 <SSD1306_WriteString>:



void SSD1306_WriteString(char *cadena){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    unsigned int i = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
    while (cadena[i] != 0) {
 8001b94:	e009      	b.n	8001baa <SSD1306_WriteString+0x22>
        SSD1306_WriteChar(cadena[i]); // Escribir cada carácter
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f80e 	bl	8001bc0 <SSD1306_WriteChar>
        i++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
    while (cadena[i] != 0) {
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ef      	bne.n	8001b96 <SSD1306_WriteString+0xe>
    }
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SSD1306_WriteChar>:



void SSD1306_WriteChar(char C){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]

    switch (C){
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	3b20      	subs	r3, #32
 8001bce:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bd0:	f200 80f2 	bhi.w	8001db8 <SSD1306_WriteChar+0x1f8>
 8001bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <SSD1306_WriteChar+0x1c>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001d65 	.word	0x08001d65
 8001be0:	08001d6b 	.word	0x08001d6b
 8001be4:	08001db9 	.word	0x08001db9
 8001be8:	08001db9 	.word	0x08001db9
 8001bec:	08001db9 	.word	0x08001db9
 8001bf0:	08001db9 	.word	0x08001db9
 8001bf4:	08001db9 	.word	0x08001db9
 8001bf8:	08001db9 	.word	0x08001db9
 8001bfc:	08001db9 	.word	0x08001db9
 8001c00:	08001db9 	.word	0x08001db9
 8001c04:	08001db3 	.word	0x08001db3
 8001c08:	08001db9 	.word	0x08001db9
 8001c0c:	08001db9 	.word	0x08001db9
 8001c10:	08001db9 	.word	0x08001db9
 8001c14:	08001db9 	.word	0x08001db9
 8001c18:	08001db9 	.word	0x08001db9
 8001c1c:	08001da7 	.word	0x08001da7
 8001c20:	08001d71 	.word	0x08001d71
 8001c24:	08001d77 	.word	0x08001d77
 8001c28:	08001d7d 	.word	0x08001d7d
 8001c2c:	08001d83 	.word	0x08001d83
 8001c30:	08001d89 	.word	0x08001d89
 8001c34:	08001d8f 	.word	0x08001d8f
 8001c38:	08001d95 	.word	0x08001d95
 8001c3c:	08001d9b 	.word	0x08001d9b
 8001c40:	08001da1 	.word	0x08001da1
 8001c44:	08001dad 	.word	0x08001dad
 8001c48:	08001db9 	.word	0x08001db9
 8001c4c:	08001db9 	.word	0x08001db9
 8001c50:	08001db9 	.word	0x08001db9
 8001c54:	08001db9 	.word	0x08001db9
 8001c58:	08001db9 	.word	0x08001db9
 8001c5c:	08001db9 	.word	0x08001db9
 8001c60:	08001cc9 	.word	0x08001cc9
 8001c64:	08001ccf 	.word	0x08001ccf
 8001c68:	08001cd5 	.word	0x08001cd5
 8001c6c:	08001cdb 	.word	0x08001cdb
 8001c70:	08001ce1 	.word	0x08001ce1
 8001c74:	08001ce7 	.word	0x08001ce7
 8001c78:	08001ced 	.word	0x08001ced
 8001c7c:	08001cf3 	.word	0x08001cf3
 8001c80:	08001cf9 	.word	0x08001cf9
 8001c84:	08001cff 	.word	0x08001cff
 8001c88:	08001d05 	.word	0x08001d05
 8001c8c:	08001d0b 	.word	0x08001d0b
 8001c90:	08001d11 	.word	0x08001d11
 8001c94:	08001d17 	.word	0x08001d17
 8001c98:	08001d1d 	.word	0x08001d1d
 8001c9c:	08001d23 	.word	0x08001d23
 8001ca0:	08001d29 	.word	0x08001d29
 8001ca4:	08001d2f 	.word	0x08001d2f
 8001ca8:	08001d35 	.word	0x08001d35
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001d41 	.word	0x08001d41
 8001cb4:	08001d47 	.word	0x08001d47
 8001cb8:	08001d4d 	.word	0x08001d4d
 8001cbc:	08001d53 	.word	0x08001d53
 8001cc0:	08001d59 	.word	0x08001d59
 8001cc4:	08001d5f 	.word	0x08001d5f
    case 'A':
Letra_A();
 8001cc8:	f000 f87a 	bl	8001dc0 <Letra_A>
    break;
 8001ccc:	e074      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'B':
Letra_B();
 8001cce:	f000 f8a7 	bl	8001e20 <Letra_B>
    break;
 8001cd2:	e071      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'C':
Letra_C();
 8001cd4:	f000 f8d4 	bl	8001e80 <Letra_C>
    break;
 8001cd8:	e06e      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'D':
Letra_D();
 8001cda:	f000 f901 	bl	8001ee0 <Letra_D>
    break;
 8001cde:	e06b      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'E':
Letra_E();
 8001ce0:	f000 f92e 	bl	8001f40 <Letra_E>
    break;
 8001ce4:	e068      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'F':
Letra_F();
 8001ce6:	f000 f95b 	bl	8001fa0 <Letra_F>
    break;
 8001cea:	e065      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'G':
Letra_G();
 8001cec:	f000 f988 	bl	8002000 <Letra_G>
    break;
 8001cf0:	e062      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'H':
Letra_H();
 8001cf2:	f000 f9b5 	bl	8002060 <Letra_H>
    break;
 8001cf6:	e05f      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'I':
Letra_I();
 8001cf8:	f000 f9e2 	bl	80020c0 <Letra_I>
    break;
 8001cfc:	e05c      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'J':
Letra_J();
 8001cfe:	f000 fa0f 	bl	8002120 <Letra_J>
    break;
 8001d02:	e059      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'K':
Letra_K();
 8001d04:	f000 fa3c 	bl	8002180 <Letra_K>
    break;
 8001d08:	e056      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'L':
Letra_L();
 8001d0a:	f000 fa69 	bl	80021e0 <Letra_L>
    break;
 8001d0e:	e053      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'M':
Letra_M();
 8001d10:	f000 fa96 	bl	8002240 <Letra_M>
    break;
 8001d14:	e050      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'N':
Letra_N();
 8001d16:	f000 fac9 	bl	80022ac <Letra_N>
    break;
 8001d1a:	e04d      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'O':
Letra_O();
 8001d1c:	f000 faf6 	bl	800230c <Letra_O>
    break;
 8001d20:	e04a      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'P':
Letra_P();
 8001d22:	f000 fb23 	bl	800236c <Letra_P>
    break;
 8001d26:	e047      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'Q':
Letra_Q();
 8001d28:	f000 fb50 	bl	80023cc <Letra_Q>
    break;
 8001d2c:	e044      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'R':
Letra_R();
 8001d2e:	f000 fb7d 	bl	800242c <Letra_R>
    break;
 8001d32:	e041      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'S':
Letra_S();
 8001d34:	f000 fbaa 	bl	800248c <Letra_S>
    break;
 8001d38:	e03e      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'T':
Letra_T();
 8001d3a:	f000 fbd7 	bl	80024ec <Letra_T>
    break;
 8001d3e:	e03b      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'U':
Letra_U();
 8001d40:	f000 fc04 	bl	800254c <Letra_U>
    break;
 8001d44:	e038      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'V':
Letra_U();
 8001d46:	f000 fc01 	bl	800254c <Letra_U>
    break;
 8001d4a:	e035      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
     case 'W':
Letra_W();
 8001d4c:	f000 fc2e 	bl	80025ac <Letra_W>
    break;
 8001d50:	e032      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'X':
Letra_X();
 8001d52:	f000 fc61 	bl	8002618 <Letra_X>
    break;
 8001d56:	e02f      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
    case 'Y':
Letra_Y();
 8001d58:	f000 fc8e 	bl	8002678 <Letra_Y>
    break;
 8001d5c:	e02c      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case 'Z':
Letra_Z();
 8001d5e:	f000 fcbb 	bl	80026d8 <Letra_Z>
    break;
 8001d62:	e029      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case ' ':
Espacio();
 8001d64:	f000 fce8 	bl	8002738 <Espacio>
    break;
 8001d68:	e026      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '!':
Admiracion();
 8001d6a:	f000 fd03 	bl	8002774 <Admiracion>
    break;
 8001d6e:	e023      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '1':
Numero_1();
 8001d70:	f000 fd24 	bl	80027bc <Numero_1>
    break;
 8001d74:	e020      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '2':
Numero_2();
 8001d76:	f000 fd45 	bl	8002804 <Numero_2>
    break;
 8001d7a:	e01d      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '3':
Numero_3();
 8001d7c:	f000 fd72 	bl	8002864 <Numero_3>
    break;
 8001d80:	e01a      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '4':
Numero_4();
 8001d82:	f000 fd9f 	bl	80028c4 <Numero_4>
    break;
 8001d86:	e017      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '5':
Numero_5();
 8001d88:	f000 fdcc 	bl	8002924 <Numero_5>
    break;
 8001d8c:	e014      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '6':
Numero_6();
 8001d8e:	f000 fdf9 	bl	8002984 <Numero_6>
    break;
 8001d92:	e011      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '7':
Numero_7();
 8001d94:	f000 fe26 	bl	80029e4 <Numero_7>
    break;
 8001d98:	e00e      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '8':
Numero_8();
 8001d9a:	f000 fe53 	bl	8002a44 <Numero_8>
    break;
 8001d9e:	e00b      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '9':
Numero_9();
 8001da0:	f000 fe80 	bl	8002aa4 <Numero_9>
    break;
 8001da4:	e008      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '0':
Numero_0();
 8001da6:	f000 fead 	bl	8002b04 <Numero_0>
    break;
 8001daa:	e005      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case ':':
DosPuntos();
 8001dac:	f000 feda 	bl	8002b64 <DosPuntos>
    break;
 8001db0:	e002      	b.n	8001db8 <SSD1306_WriteChar+0x1f8>
        case '*':
Simbolo_Grados();
 8001db2:	f000 feef 	bl	8002b94 <Simbolo_Grados>
	break;
 8001db6:	bf00      	nop
    }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <Letra_A>:




//LETRAS
void Letra_A(void){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001dc4:	23ff      	movs	r3, #255	@ 0xff
 8001dc6:	2240      	movs	r2, #64	@ 0x40
 8001dc8:	213c      	movs	r1, #60	@ 0x3c
 8001dca:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <Letra_A+0x5c>)
 8001dcc:	f7ff fcbc 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001dd0:	23ff      	movs	r3, #255	@ 0xff
 8001dd2:	2240      	movs	r2, #64	@ 0x40
 8001dd4:	213c      	movs	r1, #60	@ 0x3c
 8001dd6:	4811      	ldr	r0, [pc, #68]	@ (8001e1c <Letra_A+0x5c>)
 8001dd8:	f7ff fcb6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 8001ddc:	2333      	movs	r3, #51	@ 0x33
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	213c      	movs	r1, #60	@ 0x3c
 8001de2:	480e      	ldr	r0, [pc, #56]	@ (8001e1c <Letra_A+0x5c>)
 8001de4:	f7ff fcb0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 8001de8:	2333      	movs	r3, #51	@ 0x33
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	213c      	movs	r1, #60	@ 0x3c
 8001dee:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <Letra_A+0x5c>)
 8001df0:	f7ff fcaa 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001df4:	23ff      	movs	r3, #255	@ 0xff
 8001df6:	2240      	movs	r2, #64	@ 0x40
 8001df8:	213c      	movs	r1, #60	@ 0x3c
 8001dfa:	4808      	ldr	r0, [pc, #32]	@ (8001e1c <Letra_A+0x5c>)
 8001dfc:	f7ff fca4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e00:	23ff      	movs	r3, #255	@ 0xff
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	213c      	movs	r1, #60	@ 0x3c
 8001e06:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <Letra_A+0x5c>)
 8001e08:	f7ff fc9e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2240      	movs	r2, #64	@ 0x40
 8001e10:	213c      	movs	r1, #60	@ 0x3c
 8001e12:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <Letra_A+0x5c>)
 8001e14:	f7ff fc98 	bl	8001748 <I2C_Tx_2Bytes>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40005c00 	.word	0x40005c00

08001e20 <Letra_B>:
void Letra_B(void){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e24:	23ff      	movs	r3, #255	@ 0xff
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	213c      	movs	r1, #60	@ 0x3c
 8001e2a:	4814      	ldr	r0, [pc, #80]	@ (8001e7c <Letra_B+0x5c>)
 8001e2c:	f7ff fc8c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e30:	23ff      	movs	r3, #255	@ 0xff
 8001e32:	2240      	movs	r2, #64	@ 0x40
 8001e34:	213c      	movs	r1, #60	@ 0x3c
 8001e36:	4811      	ldr	r0, [pc, #68]	@ (8001e7c <Letra_B+0x5c>)
 8001e38:	f7ff fc86 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x99);
 8001e3c:	2399      	movs	r3, #153	@ 0x99
 8001e3e:	2240      	movs	r2, #64	@ 0x40
 8001e40:	213c      	movs	r1, #60	@ 0x3c
 8001e42:	480e      	ldr	r0, [pc, #56]	@ (8001e7c <Letra_B+0x5c>)
 8001e44:	f7ff fc80 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x99);
 8001e48:	2399      	movs	r3, #153	@ 0x99
 8001e4a:	2240      	movs	r2, #64	@ 0x40
 8001e4c:	213c      	movs	r1, #60	@ 0x3c
 8001e4e:	480b      	ldr	r0, [pc, #44]	@ (8001e7c <Letra_B+0x5c>)
 8001e50:	f7ff fc7a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e54:	23ff      	movs	r3, #255	@ 0xff
 8001e56:	2240      	movs	r2, #64	@ 0x40
 8001e58:	213c      	movs	r1, #60	@ 0x3c
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <Letra_B+0x5c>)
 8001e5c:	f7ff fc74 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e60:	23ff      	movs	r3, #255	@ 0xff
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	213c      	movs	r1, #60	@ 0x3c
 8001e66:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <Letra_B+0x5c>)
 8001e68:	f7ff fc6e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2240      	movs	r2, #64	@ 0x40
 8001e70:	213c      	movs	r1, #60	@ 0x3c
 8001e72:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <Letra_B+0x5c>)
 8001e74:	f7ff fc68 	bl	8001748 <I2C_Tx_2Bytes>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40005c00 	.word	0x40005c00

08001e80 <Letra_C>:
void Letra_C(void){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e84:	23ff      	movs	r3, #255	@ 0xff
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	213c      	movs	r1, #60	@ 0x3c
 8001e8a:	4814      	ldr	r0, [pc, #80]	@ (8001edc <Letra_C+0x5c>)
 8001e8c:	f7ff fc5c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e90:	23ff      	movs	r3, #255	@ 0xff
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	213c      	movs	r1, #60	@ 0x3c
 8001e96:	4811      	ldr	r0, [pc, #68]	@ (8001edc <Letra_C+0x5c>)
 8001e98:	f7ff fc56 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001e9c:	23c3      	movs	r3, #195	@ 0xc3
 8001e9e:	2240      	movs	r2, #64	@ 0x40
 8001ea0:	213c      	movs	r1, #60	@ 0x3c
 8001ea2:	480e      	ldr	r0, [pc, #56]	@ (8001edc <Letra_C+0x5c>)
 8001ea4:	f7ff fc50 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001ea8:	23c3      	movs	r3, #195	@ 0xc3
 8001eaa:	2240      	movs	r2, #64	@ 0x40
 8001eac:	213c      	movs	r1, #60	@ 0x3c
 8001eae:	480b      	ldr	r0, [pc, #44]	@ (8001edc <Letra_C+0x5c>)
 8001eb0:	f7ff fc4a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001eb4:	23c3      	movs	r3, #195	@ 0xc3
 8001eb6:	2240      	movs	r2, #64	@ 0x40
 8001eb8:	213c      	movs	r1, #60	@ 0x3c
 8001eba:	4808      	ldr	r0, [pc, #32]	@ (8001edc <Letra_C+0x5c>)
 8001ebc:	f7ff fc44 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001ec0:	23c3      	movs	r3, #195	@ 0xc3
 8001ec2:	2240      	movs	r2, #64	@ 0x40
 8001ec4:	213c      	movs	r1, #60	@ 0x3c
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <Letra_C+0x5c>)
 8001ec8:	f7ff fc3e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2240      	movs	r2, #64	@ 0x40
 8001ed0:	213c      	movs	r1, #60	@ 0x3c
 8001ed2:	4802      	ldr	r0, [pc, #8]	@ (8001edc <Letra_C+0x5c>)
 8001ed4:	f7ff fc38 	bl	8001748 <I2C_Tx_2Bytes>

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40005c00 	.word	0x40005c00

08001ee0 <Letra_D>:
void Letra_D(void){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001ee4:	23ff      	movs	r3, #255	@ 0xff
 8001ee6:	2240      	movs	r2, #64	@ 0x40
 8001ee8:	213c      	movs	r1, #60	@ 0x3c
 8001eea:	4814      	ldr	r0, [pc, #80]	@ (8001f3c <Letra_D+0x5c>)
 8001eec:	f7ff fc2c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001ef0:	23ff      	movs	r3, #255	@ 0xff
 8001ef2:	2240      	movs	r2, #64	@ 0x40
 8001ef4:	213c      	movs	r1, #60	@ 0x3c
 8001ef6:	4811      	ldr	r0, [pc, #68]	@ (8001f3c <Letra_D+0x5c>)
 8001ef8:	f7ff fc26 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001efc:	23c3      	movs	r3, #195	@ 0xc3
 8001efe:	2240      	movs	r2, #64	@ 0x40
 8001f00:	213c      	movs	r1, #60	@ 0x3c
 8001f02:	480e      	ldr	r0, [pc, #56]	@ (8001f3c <Letra_D+0x5c>)
 8001f04:	f7ff fc20 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001f08:	23c3      	movs	r3, #195	@ 0xc3
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	213c      	movs	r1, #60	@ 0x3c
 8001f0e:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <Letra_D+0x5c>)
 8001f10:	f7ff fc1a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001f14:	23ff      	movs	r3, #255	@ 0xff
 8001f16:	2240      	movs	r2, #64	@ 0x40
 8001f18:	213c      	movs	r1, #60	@ 0x3c
 8001f1a:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <Letra_D+0x5c>)
 8001f1c:	f7ff fc14 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001f20:	23ff      	movs	r3, #255	@ 0xff
 8001f22:	2240      	movs	r2, #64	@ 0x40
 8001f24:	213c      	movs	r1, #60	@ 0x3c
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <Letra_D+0x5c>)
 8001f28:	f7ff fc0e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2240      	movs	r2, #64	@ 0x40
 8001f30:	213c      	movs	r1, #60	@ 0x3c
 8001f32:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <Letra_D+0x5c>)
 8001f34:	f7ff fc08 	bl	8001748 <I2C_Tx_2Bytes>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40005c00 	.word	0x40005c00

08001f40 <Letra_E>:

void Letra_E(void){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001f44:	23ff      	movs	r3, #255	@ 0xff
 8001f46:	2240      	movs	r2, #64	@ 0x40
 8001f48:	213c      	movs	r1, #60	@ 0x3c
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <Letra_E+0x5c>)
 8001f4c:	f7ff fbfc 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001f50:	23ff      	movs	r3, #255	@ 0xff
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	213c      	movs	r1, #60	@ 0x3c
 8001f56:	4811      	ldr	r0, [pc, #68]	@ (8001f9c <Letra_E+0x5c>)
 8001f58:	f7ff fbf6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f5c:	23db      	movs	r3, #219	@ 0xdb
 8001f5e:	2240      	movs	r2, #64	@ 0x40
 8001f60:	213c      	movs	r1, #60	@ 0x3c
 8001f62:	480e      	ldr	r0, [pc, #56]	@ (8001f9c <Letra_E+0x5c>)
 8001f64:	f7ff fbf0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f68:	23db      	movs	r3, #219	@ 0xdb
 8001f6a:	2240      	movs	r2, #64	@ 0x40
 8001f6c:	213c      	movs	r1, #60	@ 0x3c
 8001f6e:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <Letra_E+0x5c>)
 8001f70:	f7ff fbea 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f74:	23db      	movs	r3, #219	@ 0xdb
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	213c      	movs	r1, #60	@ 0x3c
 8001f7a:	4808      	ldr	r0, [pc, #32]	@ (8001f9c <Letra_E+0x5c>)
 8001f7c:	f7ff fbe4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f80:	23db      	movs	r3, #219	@ 0xdb
 8001f82:	2240      	movs	r2, #64	@ 0x40
 8001f84:	213c      	movs	r1, #60	@ 0x3c
 8001f86:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <Letra_E+0x5c>)
 8001f88:	f7ff fbde 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2240      	movs	r2, #64	@ 0x40
 8001f90:	213c      	movs	r1, #60	@ 0x3c
 8001f92:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <Letra_E+0x5c>)
 8001f94:	f7ff fbd8 	bl	8001748 <I2C_Tx_2Bytes>

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40005c00 	.word	0x40005c00

08001fa0 <Letra_F>:
void Letra_F(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001fa4:	23ff      	movs	r3, #255	@ 0xff
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	213c      	movs	r1, #60	@ 0x3c
 8001faa:	4814      	ldr	r0, [pc, #80]	@ (8001ffc <Letra_F+0x5c>)
 8001fac:	f7ff fbcc 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001fb0:	23ff      	movs	r3, #255	@ 0xff
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	213c      	movs	r1, #60	@ 0x3c
 8001fb6:	4811      	ldr	r0, [pc, #68]	@ (8001ffc <Letra_F+0x5c>)
 8001fb8:	f7ff fbc6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 8001fbc:	2333      	movs	r3, #51	@ 0x33
 8001fbe:	2240      	movs	r2, #64	@ 0x40
 8001fc0:	213c      	movs	r1, #60	@ 0x3c
 8001fc2:	480e      	ldr	r0, [pc, #56]	@ (8001ffc <Letra_F+0x5c>)
 8001fc4:	f7ff fbc0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 8001fc8:	2333      	movs	r3, #51	@ 0x33
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	213c      	movs	r1, #60	@ 0x3c
 8001fce:	480b      	ldr	r0, [pc, #44]	@ (8001ffc <Letra_F+0x5c>)
 8001fd0:	f7ff fbba 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	2240      	movs	r2, #64	@ 0x40
 8001fd8:	213c      	movs	r1, #60	@ 0x3c
 8001fda:	4808      	ldr	r0, [pc, #32]	@ (8001ffc <Letra_F+0x5c>)
 8001fdc:	f7ff fbb4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	213c      	movs	r1, #60	@ 0x3c
 8001fe6:	4805      	ldr	r0, [pc, #20]	@ (8001ffc <Letra_F+0x5c>)
 8001fe8:	f7ff fbae 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001fec:	2300      	movs	r3, #0
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	213c      	movs	r1, #60	@ 0x3c
 8001ff2:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <Letra_F+0x5c>)
 8001ff4:	f7ff fba8 	bl	8001748 <I2C_Tx_2Bytes>

}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40005c00 	.word	0x40005c00

08002000 <Letra_G>:
void Letra_G(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002004:	23ff      	movs	r3, #255	@ 0xff
 8002006:	2240      	movs	r2, #64	@ 0x40
 8002008:	213c      	movs	r1, #60	@ 0x3c
 800200a:	4814      	ldr	r0, [pc, #80]	@ (800205c <Letra_G+0x5c>)
 800200c:	f7ff fb9c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002010:	23ff      	movs	r3, #255	@ 0xff
 8002012:	2240      	movs	r2, #64	@ 0x40
 8002014:	213c      	movs	r1, #60	@ 0x3c
 8002016:	4811      	ldr	r0, [pc, #68]	@ (800205c <Letra_G+0x5c>)
 8002018:	f7ff fb96 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800201c:	23db      	movs	r3, #219	@ 0xdb
 800201e:	2240      	movs	r2, #64	@ 0x40
 8002020:	213c      	movs	r1, #60	@ 0x3c
 8002022:	480e      	ldr	r0, [pc, #56]	@ (800205c <Letra_G+0x5c>)
 8002024:	f7ff fb90 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002028:	23db      	movs	r3, #219	@ 0xdb
 800202a:	2240      	movs	r2, #64	@ 0x40
 800202c:	213c      	movs	r1, #60	@ 0x3c
 800202e:	480b      	ldr	r0, [pc, #44]	@ (800205c <Letra_G+0x5c>)
 8002030:	f7ff fb8a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF8);
 8002034:	23f8      	movs	r3, #248	@ 0xf8
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	213c      	movs	r1, #60	@ 0x3c
 800203a:	4808      	ldr	r0, [pc, #32]	@ (800205c <Letra_G+0x5c>)
 800203c:	f7ff fb84 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF8);
 8002040:	23f8      	movs	r3, #248	@ 0xf8
 8002042:	2240      	movs	r2, #64	@ 0x40
 8002044:	213c      	movs	r1, #60	@ 0x3c
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <Letra_G+0x5c>)
 8002048:	f7ff fb7e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800204c:	2300      	movs	r3, #0
 800204e:	2240      	movs	r2, #64	@ 0x40
 8002050:	213c      	movs	r1, #60	@ 0x3c
 8002052:	4802      	ldr	r0, [pc, #8]	@ (800205c <Letra_G+0x5c>)
 8002054:	f7ff fb78 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40005c00 	.word	0x40005c00

08002060 <Letra_H>:
void Letra_H(void){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002064:	23ff      	movs	r3, #255	@ 0xff
 8002066:	2240      	movs	r2, #64	@ 0x40
 8002068:	213c      	movs	r1, #60	@ 0x3c
 800206a:	4814      	ldr	r0, [pc, #80]	@ (80020bc <Letra_H+0x5c>)
 800206c:	f7ff fb6c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002070:	23ff      	movs	r3, #255	@ 0xff
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	213c      	movs	r1, #60	@ 0x3c
 8002076:	4811      	ldr	r0, [pc, #68]	@ (80020bc <Letra_H+0x5c>)
 8002078:	f7ff fb66 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 800207c:	2318      	movs	r3, #24
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	213c      	movs	r1, #60	@ 0x3c
 8002082:	480e      	ldr	r0, [pc, #56]	@ (80020bc <Letra_H+0x5c>)
 8002084:	f7ff fb60 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 8002088:	2318      	movs	r3, #24
 800208a:	2240      	movs	r2, #64	@ 0x40
 800208c:	213c      	movs	r1, #60	@ 0x3c
 800208e:	480b      	ldr	r0, [pc, #44]	@ (80020bc <Letra_H+0x5c>)
 8002090:	f7ff fb5a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002094:	23ff      	movs	r3, #255	@ 0xff
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	213c      	movs	r1, #60	@ 0x3c
 800209a:	4808      	ldr	r0, [pc, #32]	@ (80020bc <Letra_H+0x5c>)
 800209c:	f7ff fb54 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80020a0:	23ff      	movs	r3, #255	@ 0xff
 80020a2:	2240      	movs	r2, #64	@ 0x40
 80020a4:	213c      	movs	r1, #60	@ 0x3c
 80020a6:	4805      	ldr	r0, [pc, #20]	@ (80020bc <Letra_H+0x5c>)
 80020a8:	f7ff fb4e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80020ac:	2300      	movs	r3, #0
 80020ae:	2240      	movs	r2, #64	@ 0x40
 80020b0:	213c      	movs	r1, #60	@ 0x3c
 80020b2:	4802      	ldr	r0, [pc, #8]	@ (80020bc <Letra_H+0x5c>)
 80020b4:	f7ff fb48 	bl	8001748 <I2C_Tx_2Bytes>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40005c00 	.word	0x40005c00

080020c0 <Letra_I>:
void Letra_I(void){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80020c4:	23c3      	movs	r3, #195	@ 0xc3
 80020c6:	2240      	movs	r2, #64	@ 0x40
 80020c8:	213c      	movs	r1, #60	@ 0x3c
 80020ca:	4814      	ldr	r0, [pc, #80]	@ (800211c <Letra_I+0x5c>)
 80020cc:	f7ff fb3c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80020d0:	23c3      	movs	r3, #195	@ 0xc3
 80020d2:	2240      	movs	r2, #64	@ 0x40
 80020d4:	213c      	movs	r1, #60	@ 0x3c
 80020d6:	4811      	ldr	r0, [pc, #68]	@ (800211c <Letra_I+0x5c>)
 80020d8:	f7ff fb36 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80020dc:	23ff      	movs	r3, #255	@ 0xff
 80020de:	2240      	movs	r2, #64	@ 0x40
 80020e0:	213c      	movs	r1, #60	@ 0x3c
 80020e2:	480e      	ldr	r0, [pc, #56]	@ (800211c <Letra_I+0x5c>)
 80020e4:	f7ff fb30 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80020e8:	23ff      	movs	r3, #255	@ 0xff
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	213c      	movs	r1, #60	@ 0x3c
 80020ee:	480b      	ldr	r0, [pc, #44]	@ (800211c <Letra_I+0x5c>)
 80020f0:	f7ff fb2a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80020f4:	23c3      	movs	r3, #195	@ 0xc3
 80020f6:	2240      	movs	r2, #64	@ 0x40
 80020f8:	213c      	movs	r1, #60	@ 0x3c
 80020fa:	4808      	ldr	r0, [pc, #32]	@ (800211c <Letra_I+0x5c>)
 80020fc:	f7ff fb24 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002100:	23c3      	movs	r3, #195	@ 0xc3
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	213c      	movs	r1, #60	@ 0x3c
 8002106:	4805      	ldr	r0, [pc, #20]	@ (800211c <Letra_I+0x5c>)
 8002108:	f7ff fb1e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800210c:	2300      	movs	r3, #0
 800210e:	2240      	movs	r2, #64	@ 0x40
 8002110:	213c      	movs	r1, #60	@ 0x3c
 8002112:	4802      	ldr	r0, [pc, #8]	@ (800211c <Letra_I+0x5c>)
 8002114:	f7ff fb18 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40005c00 	.word	0x40005c00

08002120 <Letra_J>:
void Letra_J(void){
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002124:	23c3      	movs	r3, #195	@ 0xc3
 8002126:	2240      	movs	r2, #64	@ 0x40
 8002128:	213c      	movs	r1, #60	@ 0x3c
 800212a:	4814      	ldr	r0, [pc, #80]	@ (800217c <Letra_J+0x5c>)
 800212c:	f7ff fb0c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002130:	23c3      	movs	r3, #195	@ 0xc3
 8002132:	2240      	movs	r2, #64	@ 0x40
 8002134:	213c      	movs	r1, #60	@ 0x3c
 8002136:	4811      	ldr	r0, [pc, #68]	@ (800217c <Letra_J+0x5c>)
 8002138:	f7ff fb06 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800213c:	23ff      	movs	r3, #255	@ 0xff
 800213e:	2240      	movs	r2, #64	@ 0x40
 8002140:	213c      	movs	r1, #60	@ 0x3c
 8002142:	480e      	ldr	r0, [pc, #56]	@ (800217c <Letra_J+0x5c>)
 8002144:	f7ff fb00 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002148:	23ff      	movs	r3, #255	@ 0xff
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	213c      	movs	r1, #60	@ 0x3c
 800214e:	480b      	ldr	r0, [pc, #44]	@ (800217c <Letra_J+0x5c>)
 8002150:	f7ff fafa 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8002154:	2303      	movs	r3, #3
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	213c      	movs	r1, #60	@ 0x3c
 800215a:	4808      	ldr	r0, [pc, #32]	@ (800217c <Letra_J+0x5c>)
 800215c:	f7ff faf4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8002160:	2303      	movs	r3, #3
 8002162:	2240      	movs	r2, #64	@ 0x40
 8002164:	213c      	movs	r1, #60	@ 0x3c
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <Letra_J+0x5c>)
 8002168:	f7ff faee 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800216c:	2300      	movs	r3, #0
 800216e:	2240      	movs	r2, #64	@ 0x40
 8002170:	213c      	movs	r1, #60	@ 0x3c
 8002172:	4802      	ldr	r0, [pc, #8]	@ (800217c <Letra_J+0x5c>)
 8002174:	f7ff fae8 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40005c00 	.word	0x40005c00

08002180 <Letra_K>:
void Letra_K(void){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002184:	23ff      	movs	r3, #255	@ 0xff
 8002186:	2240      	movs	r2, #64	@ 0x40
 8002188:	213c      	movs	r1, #60	@ 0x3c
 800218a:	4814      	ldr	r0, [pc, #80]	@ (80021dc <Letra_K+0x5c>)
 800218c:	f7ff fadc 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002190:	23ff      	movs	r3, #255	@ 0xff
 8002192:	2240      	movs	r2, #64	@ 0x40
 8002194:	213c      	movs	r1, #60	@ 0x3c
 8002196:	4811      	ldr	r0, [pc, #68]	@ (80021dc <Letra_K+0x5c>)
 8002198:	f7ff fad6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 800219c:	2318      	movs	r3, #24
 800219e:	2240      	movs	r2, #64	@ 0x40
 80021a0:	213c      	movs	r1, #60	@ 0x3c
 80021a2:	480e      	ldr	r0, [pc, #56]	@ (80021dc <Letra_K+0x5c>)
 80021a4:	f7ff fad0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3C);
 80021a8:	233c      	movs	r3, #60	@ 0x3c
 80021aa:	2240      	movs	r2, #64	@ 0x40
 80021ac:	213c      	movs	r1, #60	@ 0x3c
 80021ae:	480b      	ldr	r0, [pc, #44]	@ (80021dc <Letra_K+0x5c>)
 80021b0:	f7ff faca 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x66);
 80021b4:	2366      	movs	r3, #102	@ 0x66
 80021b6:	2240      	movs	r2, #64	@ 0x40
 80021b8:	213c      	movs	r1, #60	@ 0x3c
 80021ba:	4808      	ldr	r0, [pc, #32]	@ (80021dc <Letra_K+0x5c>)
 80021bc:	f7ff fac4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80021c0:	23c3      	movs	r3, #195	@ 0xc3
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	213c      	movs	r1, #60	@ 0x3c
 80021c6:	4805      	ldr	r0, [pc, #20]	@ (80021dc <Letra_K+0x5c>)
 80021c8:	f7ff fabe 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80021cc:	2300      	movs	r3, #0
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	213c      	movs	r1, #60	@ 0x3c
 80021d2:	4802      	ldr	r0, [pc, #8]	@ (80021dc <Letra_K+0x5c>)
 80021d4:	f7ff fab8 	bl	8001748 <I2C_Tx_2Bytes>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40005c00 	.word	0x40005c00

080021e0 <Letra_L>:

void Letra_L(void){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021e4:	23ff      	movs	r3, #255	@ 0xff
 80021e6:	2240      	movs	r2, #64	@ 0x40
 80021e8:	213c      	movs	r1, #60	@ 0x3c
 80021ea:	4814      	ldr	r0, [pc, #80]	@ (800223c <Letra_L+0x5c>)
 80021ec:	f7ff faac 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021f0:	23ff      	movs	r3, #255	@ 0xff
 80021f2:	2240      	movs	r2, #64	@ 0x40
 80021f4:	213c      	movs	r1, #60	@ 0x3c
 80021f6:	4811      	ldr	r0, [pc, #68]	@ (800223c <Letra_L+0x5c>)
 80021f8:	f7ff faa6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021fc:	23ff      	movs	r3, #255	@ 0xff
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	213c      	movs	r1, #60	@ 0x3c
 8002202:	480e      	ldr	r0, [pc, #56]	@ (800223c <Letra_L+0x5c>)
 8002204:	f7ff faa0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8002208:	23c0      	movs	r3, #192	@ 0xc0
 800220a:	2240      	movs	r2, #64	@ 0x40
 800220c:	213c      	movs	r1, #60	@ 0x3c
 800220e:	480b      	ldr	r0, [pc, #44]	@ (800223c <Letra_L+0x5c>)
 8002210:	f7ff fa9a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8002214:	23c0      	movs	r3, #192	@ 0xc0
 8002216:	2240      	movs	r2, #64	@ 0x40
 8002218:	213c      	movs	r1, #60	@ 0x3c
 800221a:	4808      	ldr	r0, [pc, #32]	@ (800223c <Letra_L+0x5c>)
 800221c:	f7ff fa94 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8002220:	23c0      	movs	r3, #192	@ 0xc0
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	213c      	movs	r1, #60	@ 0x3c
 8002226:	4805      	ldr	r0, [pc, #20]	@ (800223c <Letra_L+0x5c>)
 8002228:	f7ff fa8e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800222c:	2300      	movs	r3, #0
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	213c      	movs	r1, #60	@ 0x3c
 8002232:	4802      	ldr	r0, [pc, #8]	@ (800223c <Letra_L+0x5c>)
 8002234:	f7ff fa88 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40005c00 	.word	0x40005c00

08002240 <Letra_M>:
void Letra_M(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002244:	23ff      	movs	r3, #255	@ 0xff
 8002246:	2240      	movs	r2, #64	@ 0x40
 8002248:	213c      	movs	r1, #60	@ 0x3c
 800224a:	4817      	ldr	r0, [pc, #92]	@ (80022a8 <Letra_M+0x68>)
 800224c:	f7ff fa7c 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002250:	23ff      	movs	r3, #255	@ 0xff
 8002252:	2240      	movs	r2, #64	@ 0x40
 8002254:	213c      	movs	r1, #60	@ 0x3c
 8002256:	4814      	ldr	r0, [pc, #80]	@ (80022a8 <Letra_M+0x68>)
 8002258:	f7ff fa76 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0C);
 800225c:	230c      	movs	r3, #12
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	213c      	movs	r1, #60	@ 0x3c
 8002262:	4811      	ldr	r0, [pc, #68]	@ (80022a8 <Letra_M+0x68>)
 8002264:	f7ff fa70 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1C);
 8002268:	231c      	movs	r3, #28
 800226a:	2240      	movs	r2, #64	@ 0x40
 800226c:	213c      	movs	r1, #60	@ 0x3c
 800226e:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <Letra_M+0x68>)
 8002270:	f7ff fa6a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0C);
 8002274:	230c      	movs	r3, #12
 8002276:	2240      	movs	r2, #64	@ 0x40
 8002278:	213c      	movs	r1, #60	@ 0x3c
 800227a:	480b      	ldr	r0, [pc, #44]	@ (80022a8 <Letra_M+0x68>)
 800227c:	f7ff fa64 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002280:	23ff      	movs	r3, #255	@ 0xff
 8002282:	2240      	movs	r2, #64	@ 0x40
 8002284:	213c      	movs	r1, #60	@ 0x3c
 8002286:	4808      	ldr	r0, [pc, #32]	@ (80022a8 <Letra_M+0x68>)
 8002288:	f7ff fa5e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800228c:	23ff      	movs	r3, #255	@ 0xff
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	213c      	movs	r1, #60	@ 0x3c
 8002292:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <Letra_M+0x68>)
 8002294:	f7ff fa58 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002298:	2300      	movs	r3, #0
 800229a:	2240      	movs	r2, #64	@ 0x40
 800229c:	213c      	movs	r1, #60	@ 0x3c
 800229e:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <Letra_M+0x68>)
 80022a0:	f7ff fa52 	bl	8001748 <I2C_Tx_2Bytes>

}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40005c00 	.word	0x40005c00

080022ac <Letra_N>:
void Letra_N(void){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80022b0:	23ff      	movs	r3, #255	@ 0xff
 80022b2:	2240      	movs	r2, #64	@ 0x40
 80022b4:	213c      	movs	r1, #60	@ 0x3c
 80022b6:	4814      	ldr	r0, [pc, #80]	@ (8002308 <Letra_N+0x5c>)
 80022b8:	f7ff fa46 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80022bc:	23ff      	movs	r3, #255	@ 0xff
 80022be:	2240      	movs	r2, #64	@ 0x40
 80022c0:	213c      	movs	r1, #60	@ 0x3c
 80022c2:	4811      	ldr	r0, [pc, #68]	@ (8002308 <Letra_N+0x5c>)
 80022c4:	f7ff fa40 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1C);
 80022c8:	231c      	movs	r3, #28
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	213c      	movs	r1, #60	@ 0x3c
 80022ce:	480e      	ldr	r0, [pc, #56]	@ (8002308 <Letra_N+0x5c>)
 80022d0:	f7ff fa3a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x38);
 80022d4:	2338      	movs	r3, #56	@ 0x38
 80022d6:	2240      	movs	r2, #64	@ 0x40
 80022d8:	213c      	movs	r1, #60	@ 0x3c
 80022da:	480b      	ldr	r0, [pc, #44]	@ (8002308 <Letra_N+0x5c>)
 80022dc:	f7ff fa34 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80022e0:	23ff      	movs	r3, #255	@ 0xff
 80022e2:	2240      	movs	r2, #64	@ 0x40
 80022e4:	213c      	movs	r1, #60	@ 0x3c
 80022e6:	4808      	ldr	r0, [pc, #32]	@ (8002308 <Letra_N+0x5c>)
 80022e8:	f7ff fa2e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80022ec:	23ff      	movs	r3, #255	@ 0xff
 80022ee:	2240      	movs	r2, #64	@ 0x40
 80022f0:	213c      	movs	r1, #60	@ 0x3c
 80022f2:	4805      	ldr	r0, [pc, #20]	@ (8002308 <Letra_N+0x5c>)
 80022f4:	f7ff fa28 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80022f8:	2300      	movs	r3, #0
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	213c      	movs	r1, #60	@ 0x3c
 80022fe:	4802      	ldr	r0, [pc, #8]	@ (8002308 <Letra_N+0x5c>)
 8002300:	f7ff fa22 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40005c00 	.word	0x40005c00

0800230c <Letra_O>:
void Letra_O(void){
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0


    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002310:	23ff      	movs	r3, #255	@ 0xff
 8002312:	2240      	movs	r2, #64	@ 0x40
 8002314:	213c      	movs	r1, #60	@ 0x3c
 8002316:	4814      	ldr	r0, [pc, #80]	@ (8002368 <Letra_O+0x5c>)
 8002318:	f7ff fa16 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800231c:	23ff      	movs	r3, #255	@ 0xff
 800231e:	2240      	movs	r2, #64	@ 0x40
 8002320:	213c      	movs	r1, #60	@ 0x3c
 8002322:	4811      	ldr	r0, [pc, #68]	@ (8002368 <Letra_O+0x5c>)
 8002324:	f7ff fa10 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002328:	23c3      	movs	r3, #195	@ 0xc3
 800232a:	2240      	movs	r2, #64	@ 0x40
 800232c:	213c      	movs	r1, #60	@ 0x3c
 800232e:	480e      	ldr	r0, [pc, #56]	@ (8002368 <Letra_O+0x5c>)
 8002330:	f7ff fa0a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002334:	23c3      	movs	r3, #195	@ 0xc3
 8002336:	2240      	movs	r2, #64	@ 0x40
 8002338:	213c      	movs	r1, #60	@ 0x3c
 800233a:	480b      	ldr	r0, [pc, #44]	@ (8002368 <Letra_O+0x5c>)
 800233c:	f7ff fa04 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002340:	23ff      	movs	r3, #255	@ 0xff
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	213c      	movs	r1, #60	@ 0x3c
 8002346:	4808      	ldr	r0, [pc, #32]	@ (8002368 <Letra_O+0x5c>)
 8002348:	f7ff f9fe 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800234c:	23ff      	movs	r3, #255	@ 0xff
 800234e:	2240      	movs	r2, #64	@ 0x40
 8002350:	213c      	movs	r1, #60	@ 0x3c
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <Letra_O+0x5c>)
 8002354:	f7ff f9f8 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002358:	2300      	movs	r3, #0
 800235a:	2240      	movs	r2, #64	@ 0x40
 800235c:	213c      	movs	r1, #60	@ 0x3c
 800235e:	4802      	ldr	r0, [pc, #8]	@ (8002368 <Letra_O+0x5c>)
 8002360:	f7ff f9f2 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40005c00 	.word	0x40005c00

0800236c <Letra_P>:
void Letra_P(void){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002370:	23ff      	movs	r3, #255	@ 0xff
 8002372:	2240      	movs	r2, #64	@ 0x40
 8002374:	213c      	movs	r1, #60	@ 0x3c
 8002376:	4814      	ldr	r0, [pc, #80]	@ (80023c8 <Letra_P+0x5c>)
 8002378:	f7ff f9e6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800237c:	23ff      	movs	r3, #255	@ 0xff
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	213c      	movs	r1, #60	@ 0x3c
 8002382:	4811      	ldr	r0, [pc, #68]	@ (80023c8 <Letra_P+0x5c>)
 8002384:	f7ff f9e0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1B);
 8002388:	231b      	movs	r3, #27
 800238a:	2240      	movs	r2, #64	@ 0x40
 800238c:	213c      	movs	r1, #60	@ 0x3c
 800238e:	480e      	ldr	r0, [pc, #56]	@ (80023c8 <Letra_P+0x5c>)
 8002390:	f7ff f9da 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1B);
 8002394:	231b      	movs	r3, #27
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	213c      	movs	r1, #60	@ 0x3c
 800239a:	480b      	ldr	r0, [pc, #44]	@ (80023c8 <Letra_P+0x5c>)
 800239c:	f7ff f9d4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 80023a0:	231f      	movs	r3, #31
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	213c      	movs	r1, #60	@ 0x3c
 80023a6:	4808      	ldr	r0, [pc, #32]	@ (80023c8 <Letra_P+0x5c>)
 80023a8:	f7ff f9ce 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 80023ac:	231f      	movs	r3, #31
 80023ae:	2240      	movs	r2, #64	@ 0x40
 80023b0:	213c      	movs	r1, #60	@ 0x3c
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <Letra_P+0x5c>)
 80023b4:	f7ff f9c8 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80023b8:	2300      	movs	r3, #0
 80023ba:	2240      	movs	r2, #64	@ 0x40
 80023bc:	213c      	movs	r1, #60	@ 0x3c
 80023be:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <Letra_P+0x5c>)
 80023c0:	f7ff f9c2 	bl	8001748 <I2C_Tx_2Bytes>

}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40005c00 	.word	0x40005c00

080023cc <Letra_Q>:
void Letra_Q(void){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7F);
 80023d0:	237f      	movs	r3, #127	@ 0x7f
 80023d2:	2240      	movs	r2, #64	@ 0x40
 80023d4:	213c      	movs	r1, #60	@ 0x3c
 80023d6:	4814      	ldr	r0, [pc, #80]	@ (8002428 <Letra_Q+0x5c>)
 80023d8:	f7ff f9b6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7F);
 80023dc:	237f      	movs	r3, #127	@ 0x7f
 80023de:	2240      	movs	r2, #64	@ 0x40
 80023e0:	213c      	movs	r1, #60	@ 0x3c
 80023e2:	4811      	ldr	r0, [pc, #68]	@ (8002428 <Letra_Q+0x5c>)
 80023e4:	f7ff f9b0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x63);
 80023e8:	2363      	movs	r3, #99	@ 0x63
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	213c      	movs	r1, #60	@ 0x3c
 80023ee:	480e      	ldr	r0, [pc, #56]	@ (8002428 <Letra_Q+0x5c>)
 80023f0:	f7ff f9aa 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0X63);
 80023f4:	2363      	movs	r3, #99	@ 0x63
 80023f6:	2240      	movs	r2, #64	@ 0x40
 80023f8:	213c      	movs	r1, #60	@ 0x3c
 80023fa:	480b      	ldr	r0, [pc, #44]	@ (8002428 <Letra_Q+0x5c>)
 80023fc:	f7ff f9a4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002400:	23ff      	movs	r3, #255	@ 0xff
 8002402:	2240      	movs	r2, #64	@ 0x40
 8002404:	213c      	movs	r1, #60	@ 0x3c
 8002406:	4808      	ldr	r0, [pc, #32]	@ (8002428 <Letra_Q+0x5c>)
 8002408:	f7ff f99e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800240c:	23ff      	movs	r3, #255	@ 0xff
 800240e:	2240      	movs	r2, #64	@ 0x40
 8002410:	213c      	movs	r1, #60	@ 0x3c
 8002412:	4805      	ldr	r0, [pc, #20]	@ (8002428 <Letra_Q+0x5c>)
 8002414:	f7ff f998 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002418:	2300      	movs	r3, #0
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	213c      	movs	r1, #60	@ 0x3c
 800241e:	4802      	ldr	r0, [pc, #8]	@ (8002428 <Letra_Q+0x5c>)
 8002420:	f7ff f992 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40005c00 	.word	0x40005c00

0800242c <Letra_R>:
void Letra_R(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002430:	23ff      	movs	r3, #255	@ 0xff
 8002432:	2240      	movs	r2, #64	@ 0x40
 8002434:	213c      	movs	r1, #60	@ 0x3c
 8002436:	4814      	ldr	r0, [pc, #80]	@ (8002488 <Letra_R+0x5c>)
 8002438:	f7ff f986 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800243c:	23ff      	movs	r3, #255	@ 0xff
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	213c      	movs	r1, #60	@ 0x3c
 8002442:	4811      	ldr	r0, [pc, #68]	@ (8002488 <Letra_R+0x5c>)
 8002444:	f7ff f980 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1B);
 8002448:	231b      	movs	r3, #27
 800244a:	2240      	movs	r2, #64	@ 0x40
 800244c:	213c      	movs	r1, #60	@ 0x3c
 800244e:	480e      	ldr	r0, [pc, #56]	@ (8002488 <Letra_R+0x5c>)
 8002450:	f7ff f97a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7B);
 8002454:	237b      	movs	r3, #123	@ 0x7b
 8002456:	2240      	movs	r2, #64	@ 0x40
 8002458:	213c      	movs	r1, #60	@ 0x3c
 800245a:	480b      	ldr	r0, [pc, #44]	@ (8002488 <Letra_R+0x5c>)
 800245c:	f7ff f974 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x6F);
 8002460:	236f      	movs	r3, #111	@ 0x6f
 8002462:	2240      	movs	r2, #64	@ 0x40
 8002464:	213c      	movs	r1, #60	@ 0x3c
 8002466:	4808      	ldr	r0, [pc, #32]	@ (8002488 <Letra_R+0x5c>)
 8002468:	f7ff f96e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xEF);
 800246c:	23ef      	movs	r3, #239	@ 0xef
 800246e:	2240      	movs	r2, #64	@ 0x40
 8002470:	213c      	movs	r1, #60	@ 0x3c
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <Letra_R+0x5c>)
 8002474:	f7ff f968 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002478:	2300      	movs	r3, #0
 800247a:	2240      	movs	r2, #64	@ 0x40
 800247c:	213c      	movs	r1, #60	@ 0x3c
 800247e:	4802      	ldr	r0, [pc, #8]	@ (8002488 <Letra_R+0x5c>)
 8002480:	f7ff f962 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40005c00 	.word	0x40005c00

0800248c <Letra_S>:
void Letra_S(void){
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xCF);
 8002490:	23cf      	movs	r3, #207	@ 0xcf
 8002492:	2240      	movs	r2, #64	@ 0x40
 8002494:	213c      	movs	r1, #60	@ 0x3c
 8002496:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <Letra_S+0x5c>)
 8002498:	f7ff f956 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xCF);
 800249c:	23cf      	movs	r3, #207	@ 0xcf
 800249e:	2240      	movs	r2, #64	@ 0x40
 80024a0:	213c      	movs	r1, #60	@ 0x3c
 80024a2:	4811      	ldr	r0, [pc, #68]	@ (80024e8 <Letra_S+0x5c>)
 80024a4:	f7ff f950 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 80024a8:	23db      	movs	r3, #219	@ 0xdb
 80024aa:	2240      	movs	r2, #64	@ 0x40
 80024ac:	213c      	movs	r1, #60	@ 0x3c
 80024ae:	480e      	ldr	r0, [pc, #56]	@ (80024e8 <Letra_S+0x5c>)
 80024b0:	f7ff f94a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 80024b4:	23db      	movs	r3, #219	@ 0xdb
 80024b6:	2240      	movs	r2, #64	@ 0x40
 80024b8:	213c      	movs	r1, #60	@ 0x3c
 80024ba:	480b      	ldr	r0, [pc, #44]	@ (80024e8 <Letra_S+0x5c>)
 80024bc:	f7ff f944 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF3);
 80024c0:	23f3      	movs	r3, #243	@ 0xf3
 80024c2:	2240      	movs	r2, #64	@ 0x40
 80024c4:	213c      	movs	r1, #60	@ 0x3c
 80024c6:	4808      	ldr	r0, [pc, #32]	@ (80024e8 <Letra_S+0x5c>)
 80024c8:	f7ff f93e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF3);
 80024cc:	23f3      	movs	r3, #243	@ 0xf3
 80024ce:	2240      	movs	r2, #64	@ 0x40
 80024d0:	213c      	movs	r1, #60	@ 0x3c
 80024d2:	4805      	ldr	r0, [pc, #20]	@ (80024e8 <Letra_S+0x5c>)
 80024d4:	f7ff f938 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80024d8:	2300      	movs	r3, #0
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	213c      	movs	r1, #60	@ 0x3c
 80024de:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <Letra_S+0x5c>)
 80024e0:	f7ff f932 	bl	8001748 <I2C_Tx_2Bytes>

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40005c00 	.word	0x40005c00

080024ec <Letra_T>:
void Letra_T(void){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 80024f0:	2303      	movs	r3, #3
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	213c      	movs	r1, #60	@ 0x3c
 80024f6:	4814      	ldr	r0, [pc, #80]	@ (8002548 <Letra_T+0x5c>)
 80024f8:	f7ff f926 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 80024fc:	2303      	movs	r3, #3
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	213c      	movs	r1, #60	@ 0x3c
 8002502:	4811      	ldr	r0, [pc, #68]	@ (8002548 <Letra_T+0x5c>)
 8002504:	f7ff f920 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002508:	23ff      	movs	r3, #255	@ 0xff
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	213c      	movs	r1, #60	@ 0x3c
 800250e:	480e      	ldr	r0, [pc, #56]	@ (8002548 <Letra_T+0x5c>)
 8002510:	f7ff f91a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002514:	23ff      	movs	r3, #255	@ 0xff
 8002516:	2240      	movs	r2, #64	@ 0x40
 8002518:	213c      	movs	r1, #60	@ 0x3c
 800251a:	480b      	ldr	r0, [pc, #44]	@ (8002548 <Letra_T+0x5c>)
 800251c:	f7ff f914 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8002520:	2303      	movs	r3, #3
 8002522:	2240      	movs	r2, #64	@ 0x40
 8002524:	213c      	movs	r1, #60	@ 0x3c
 8002526:	4808      	ldr	r0, [pc, #32]	@ (8002548 <Letra_T+0x5c>)
 8002528:	f7ff f90e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 800252c:	2303      	movs	r3, #3
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	213c      	movs	r1, #60	@ 0x3c
 8002532:	4805      	ldr	r0, [pc, #20]	@ (8002548 <Letra_T+0x5c>)
 8002534:	f7ff f908 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002538:	2300      	movs	r3, #0
 800253a:	2240      	movs	r2, #64	@ 0x40
 800253c:	213c      	movs	r1, #60	@ 0x3c
 800253e:	4802      	ldr	r0, [pc, #8]	@ (8002548 <Letra_T+0x5c>)
 8002540:	f7ff f902 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40005c00 	.word	0x40005c00

0800254c <Letra_U>:
void Letra_U(void){
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002550:	23ff      	movs	r3, #255	@ 0xff
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	213c      	movs	r1, #60	@ 0x3c
 8002556:	4814      	ldr	r0, [pc, #80]	@ (80025a8 <Letra_U+0x5c>)
 8002558:	f7ff f8f6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800255c:	23ff      	movs	r3, #255	@ 0xff
 800255e:	2240      	movs	r2, #64	@ 0x40
 8002560:	213c      	movs	r1, #60	@ 0x3c
 8002562:	4811      	ldr	r0, [pc, #68]	@ (80025a8 <Letra_U+0x5c>)
 8002564:	f7ff f8f0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8002568:	23c0      	movs	r3, #192	@ 0xc0
 800256a:	2240      	movs	r2, #64	@ 0x40
 800256c:	213c      	movs	r1, #60	@ 0x3c
 800256e:	480e      	ldr	r0, [pc, #56]	@ (80025a8 <Letra_U+0x5c>)
 8002570:	f7ff f8ea 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8002574:	23c0      	movs	r3, #192	@ 0xc0
 8002576:	2240      	movs	r2, #64	@ 0x40
 8002578:	213c      	movs	r1, #60	@ 0x3c
 800257a:	480b      	ldr	r0, [pc, #44]	@ (80025a8 <Letra_U+0x5c>)
 800257c:	f7ff f8e4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002580:	23ff      	movs	r3, #255	@ 0xff
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	213c      	movs	r1, #60	@ 0x3c
 8002586:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <Letra_U+0x5c>)
 8002588:	f7ff f8de 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800258c:	23ff      	movs	r3, #255	@ 0xff
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	213c      	movs	r1, #60	@ 0x3c
 8002592:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <Letra_U+0x5c>)
 8002594:	f7ff f8d8 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002598:	2300      	movs	r3, #0
 800259a:	2240      	movs	r2, #64	@ 0x40
 800259c:	213c      	movs	r1, #60	@ 0x3c
 800259e:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <Letra_U+0x5c>)
 80025a0:	f7ff f8d2 	bl	8001748 <I2C_Tx_2Bytes>

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40005c00 	.word	0x40005c00

080025ac <Letra_W>:
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7F);
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);

}
void Letra_W(void){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80025b0:	23ff      	movs	r3, #255	@ 0xff
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	213c      	movs	r1, #60	@ 0x3c
 80025b6:	4817      	ldr	r0, [pc, #92]	@ (8002614 <Letra_W+0x68>)
 80025b8:	f7ff f8c6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80025bc:	23ff      	movs	r3, #255	@ 0xff
 80025be:	2240      	movs	r2, #64	@ 0x40
 80025c0:	213c      	movs	r1, #60	@ 0x3c
 80025c2:	4814      	ldr	r0, [pc, #80]	@ (8002614 <Letra_W+0x68>)
 80025c4:	f7ff f8c0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x70);
 80025c8:	2370      	movs	r3, #112	@ 0x70
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	213c      	movs	r1, #60	@ 0x3c
 80025ce:	4811      	ldr	r0, [pc, #68]	@ (8002614 <Letra_W+0x68>)
 80025d0:	f7ff f8ba 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x38);
 80025d4:	2338      	movs	r3, #56	@ 0x38
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	213c      	movs	r1, #60	@ 0x3c
 80025da:	480e      	ldr	r0, [pc, #56]	@ (8002614 <Letra_W+0x68>)
 80025dc:	f7ff f8b4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x70);
 80025e0:	2370      	movs	r3, #112	@ 0x70
 80025e2:	2240      	movs	r2, #64	@ 0x40
 80025e4:	213c      	movs	r1, #60	@ 0x3c
 80025e6:	480b      	ldr	r0, [pc, #44]	@ (8002614 <Letra_W+0x68>)
 80025e8:	f7ff f8ae 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80025ec:	23ff      	movs	r3, #255	@ 0xff
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	213c      	movs	r1, #60	@ 0x3c
 80025f2:	4808      	ldr	r0, [pc, #32]	@ (8002614 <Letra_W+0x68>)
 80025f4:	f7ff f8a8 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80025f8:	23ff      	movs	r3, #255	@ 0xff
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	213c      	movs	r1, #60	@ 0x3c
 80025fe:	4805      	ldr	r0, [pc, #20]	@ (8002614 <Letra_W+0x68>)
 8002600:	f7ff f8a2 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002604:	2300      	movs	r3, #0
 8002606:	2240      	movs	r2, #64	@ 0x40
 8002608:	213c      	movs	r1, #60	@ 0x3c
 800260a:	4802      	ldr	r0, [pc, #8]	@ (8002614 <Letra_W+0x68>)
 800260c:	f7ff f89c 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40005c00 	.word	0x40005c00

08002618 <Letra_X>:
void Letra_X(void){
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 800261c:	23c3      	movs	r3, #195	@ 0xc3
 800261e:	2240      	movs	r2, #64	@ 0x40
 8002620:	213c      	movs	r1, #60	@ 0x3c
 8002622:	4814      	ldr	r0, [pc, #80]	@ (8002674 <Letra_X+0x5c>)
 8002624:	f7ff f890 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE7);
 8002628:	23e7      	movs	r3, #231	@ 0xe7
 800262a:	2240      	movs	r2, #64	@ 0x40
 800262c:	213c      	movs	r1, #60	@ 0x3c
 800262e:	4811      	ldr	r0, [pc, #68]	@ (8002674 <Letra_X+0x5c>)
 8002630:	f7ff f88a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3C);
 8002634:	233c      	movs	r3, #60	@ 0x3c
 8002636:	2240      	movs	r2, #64	@ 0x40
 8002638:	213c      	movs	r1, #60	@ 0x3c
 800263a:	480e      	ldr	r0, [pc, #56]	@ (8002674 <Letra_X+0x5c>)
 800263c:	f7ff f884 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3C);
 8002640:	233c      	movs	r3, #60	@ 0x3c
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	213c      	movs	r1, #60	@ 0x3c
 8002646:	480b      	ldr	r0, [pc, #44]	@ (8002674 <Letra_X+0x5c>)
 8002648:	f7ff f87e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE7);
 800264c:	23e7      	movs	r3, #231	@ 0xe7
 800264e:	2240      	movs	r2, #64	@ 0x40
 8002650:	213c      	movs	r1, #60	@ 0x3c
 8002652:	4808      	ldr	r0, [pc, #32]	@ (8002674 <Letra_X+0x5c>)
 8002654:	f7ff f878 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002658:	23c3      	movs	r3, #195	@ 0xc3
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	213c      	movs	r1, #60	@ 0x3c
 800265e:	4805      	ldr	r0, [pc, #20]	@ (8002674 <Letra_X+0x5c>)
 8002660:	f7ff f872 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002664:	2300      	movs	r3, #0
 8002666:	2240      	movs	r2, #64	@ 0x40
 8002668:	213c      	movs	r1, #60	@ 0x3c
 800266a:	4802      	ldr	r0, [pc, #8]	@ (8002674 <Letra_X+0x5c>)
 800266c:	f7ff f86c 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40005c00 	.word	0x40005c00

08002678 <Letra_Y>:
void Letra_Y(void){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 800267c:	2303      	movs	r3, #3
 800267e:	2240      	movs	r2, #64	@ 0x40
 8002680:	213c      	movs	r1, #60	@ 0x3c
 8002682:	4814      	ldr	r0, [pc, #80]	@ (80026d4 <Letra_Y+0x5c>)
 8002684:	f7ff f860 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0F);
 8002688:	230f      	movs	r3, #15
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	213c      	movs	r1, #60	@ 0x3c
 800268e:	4811      	ldr	r0, [pc, #68]	@ (80026d4 <Letra_Y+0x5c>)
 8002690:	f7ff f85a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFC);
 8002694:	23fc      	movs	r3, #252	@ 0xfc
 8002696:	2240      	movs	r2, #64	@ 0x40
 8002698:	213c      	movs	r1, #60	@ 0x3c
 800269a:	480e      	ldr	r0, [pc, #56]	@ (80026d4 <Letra_Y+0x5c>)
 800269c:	f7ff f854 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFC);
 80026a0:	23fc      	movs	r3, #252	@ 0xfc
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	213c      	movs	r1, #60	@ 0x3c
 80026a6:	480b      	ldr	r0, [pc, #44]	@ (80026d4 <Letra_Y+0x5c>)
 80026a8:	f7ff f84e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0F);
 80026ac:	230f      	movs	r3, #15
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	213c      	movs	r1, #60	@ 0x3c
 80026b2:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <Letra_Y+0x5c>)
 80026b4:	f7ff f848 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 80026b8:	2303      	movs	r3, #3
 80026ba:	2240      	movs	r2, #64	@ 0x40
 80026bc:	213c      	movs	r1, #60	@ 0x3c
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <Letra_Y+0x5c>)
 80026c0:	f7ff f842 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80026c4:	2300      	movs	r3, #0
 80026c6:	2240      	movs	r2, #64	@ 0x40
 80026c8:	213c      	movs	r1, #60	@ 0x3c
 80026ca:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <Letra_Y+0x5c>)
 80026cc:	f7ff f83c 	bl	8001748 <I2C_Tx_2Bytes>

}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40005c00 	.word	0x40005c00

080026d8 <Letra_Z>:

void Letra_Z(void){
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80026dc:	23c3      	movs	r3, #195	@ 0xc3
 80026de:	2240      	movs	r2, #64	@ 0x40
 80026e0:	213c      	movs	r1, #60	@ 0x3c
 80026e2:	4814      	ldr	r0, [pc, #80]	@ (8002734 <Letra_Z+0x5c>)
 80026e4:	f7ff f830 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE3);
 80026e8:	23e3      	movs	r3, #227	@ 0xe3
 80026ea:	2240      	movs	r2, #64	@ 0x40
 80026ec:	213c      	movs	r1, #60	@ 0x3c
 80026ee:	4811      	ldr	r0, [pc, #68]	@ (8002734 <Letra_Z+0x5c>)
 80026f0:	f7ff f82a 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 80026f4:	23fb      	movs	r3, #251	@ 0xfb
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	213c      	movs	r1, #60	@ 0x3c
 80026fa:	480e      	ldr	r0, [pc, #56]	@ (8002734 <Letra_Z+0x5c>)
 80026fc:	f7ff f824 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xD7);
 8002700:	23d7      	movs	r3, #215	@ 0xd7
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	213c      	movs	r1, #60	@ 0x3c
 8002706:	480b      	ldr	r0, [pc, #44]	@ (8002734 <Letra_Z+0x5c>)
 8002708:	f7ff f81e 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC7);
 800270c:	23c7      	movs	r3, #199	@ 0xc7
 800270e:	2240      	movs	r2, #64	@ 0x40
 8002710:	213c      	movs	r1, #60	@ 0x3c
 8002712:	4808      	ldr	r0, [pc, #32]	@ (8002734 <Letra_Z+0x5c>)
 8002714:	f7ff f818 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002718:	23c3      	movs	r3, #195	@ 0xc3
 800271a:	2240      	movs	r2, #64	@ 0x40
 800271c:	213c      	movs	r1, #60	@ 0x3c
 800271e:	4805      	ldr	r0, [pc, #20]	@ (8002734 <Letra_Z+0x5c>)
 8002720:	f7ff f812 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002724:	2300      	movs	r3, #0
 8002726:	2240      	movs	r2, #64	@ 0x40
 8002728:	213c      	movs	r1, #60	@ 0x3c
 800272a:	4802      	ldr	r0, [pc, #8]	@ (8002734 <Letra_Z+0x5c>)
 800272c:	f7ff f80c 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40005c00 	.word	0x40005c00

08002738 <Espacio>:

void Espacio (void){
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800273c:	2300      	movs	r3, #0
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	213c      	movs	r1, #60	@ 0x3c
 8002742:	480b      	ldr	r0, [pc, #44]	@ (8002770 <Espacio+0x38>)
 8002744:	f7ff f800 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002748:	2300      	movs	r3, #0
 800274a:	2240      	movs	r2, #64	@ 0x40
 800274c:	213c      	movs	r1, #60	@ 0x3c
 800274e:	4808      	ldr	r0, [pc, #32]	@ (8002770 <Espacio+0x38>)
 8002750:	f7fe fffa 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002754:	2300      	movs	r3, #0
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	213c      	movs	r1, #60	@ 0x3c
 800275a:	4805      	ldr	r0, [pc, #20]	@ (8002770 <Espacio+0x38>)
 800275c:	f7fe fff4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002760:	2300      	movs	r3, #0
 8002762:	2240      	movs	r2, #64	@ 0x40
 8002764:	213c      	movs	r1, #60	@ 0x3c
 8002766:	4802      	ldr	r0, [pc, #8]	@ (8002770 <Espacio+0x38>)
 8002768:	f7fe ffee 	bl	8001748 <I2C_Tx_2Bytes>
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40005c00 	.word	0x40005c00

08002774 <Admiracion>:

void Admiracion(void){
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002778:	23fb      	movs	r3, #251	@ 0xfb
 800277a:	2240      	movs	r2, #64	@ 0x40
 800277c:	213c      	movs	r1, #60	@ 0x3c
 800277e:	480e      	ldr	r0, [pc, #56]	@ (80027b8 <Admiracion+0x44>)
 8002780:	f7fe ffe2 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002784:	23fb      	movs	r3, #251	@ 0xfb
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	213c      	movs	r1, #60	@ 0x3c
 800278a:	480b      	ldr	r0, [pc, #44]	@ (80027b8 <Admiracion+0x44>)
 800278c:	f7fe ffdc 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002790:	23fb      	movs	r3, #251	@ 0xfb
 8002792:	2240      	movs	r2, #64	@ 0x40
 8002794:	213c      	movs	r1, #60	@ 0x3c
 8002796:	4808      	ldr	r0, [pc, #32]	@ (80027b8 <Admiracion+0x44>)
 8002798:	f7fe ffd6 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800279c:	2300      	movs	r3, #0
 800279e:	2240      	movs	r2, #64	@ 0x40
 80027a0:	213c      	movs	r1, #60	@ 0x3c
 80027a2:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <Admiracion+0x44>)
 80027a4:	f7fe ffd0 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80027a8:	2300      	movs	r3, #0
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	213c      	movs	r1, #60	@ 0x3c
 80027ae:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <Admiracion+0x44>)
 80027b0:	f7fe ffca 	bl	8001748 <I2C_Tx_2Bytes>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40005c00 	.word	0x40005c00

080027bc <Numero_1>:


/*Declaracion de numeros decimales pantalla oled*/

void Numero_1(void){
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x01);
 80027c0:	2301      	movs	r3, #1
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	213c      	movs	r1, #60	@ 0x3c
 80027c6:	480e      	ldr	r0, [pc, #56]	@ (8002800 <Numero_1+0x44>)
 80027c8:	f7fe ffbe 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x01);
 80027cc:	2301      	movs	r3, #1
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	213c      	movs	r1, #60	@ 0x3c
 80027d2:	480b      	ldr	r0, [pc, #44]	@ (8002800 <Numero_1+0x44>)
 80027d4:	f7fe ffb8 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80027d8:	23ff      	movs	r3, #255	@ 0xff
 80027da:	2240      	movs	r2, #64	@ 0x40
 80027dc:	213c      	movs	r1, #60	@ 0x3c
 80027de:	4808      	ldr	r0, [pc, #32]	@ (8002800 <Numero_1+0x44>)
 80027e0:	f7fe ffb2 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80027e4:	23ff      	movs	r3, #255	@ 0xff
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	213c      	movs	r1, #60	@ 0x3c
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <Numero_1+0x44>)
 80027ec:	f7fe ffac 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80027f0:	2300      	movs	r3, #0
 80027f2:	2240      	movs	r2, #64	@ 0x40
 80027f4:	213c      	movs	r1, #60	@ 0x3c
 80027f6:	4802      	ldr	r0, [pc, #8]	@ (8002800 <Numero_1+0x44>)
 80027f8:	f7fe ffa6 	bl	8001748 <I2C_Tx_2Bytes>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40005c00 	.word	0x40005c00

08002804 <Numero_2>:


void Numero_2(void){
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002808:	23fb      	movs	r3, #251	@ 0xfb
 800280a:	2240      	movs	r2, #64	@ 0x40
 800280c:	213c      	movs	r1, #60	@ 0x3c
 800280e:	4814      	ldr	r0, [pc, #80]	@ (8002860 <Numero_2+0x5c>)
 8002810:	f7fe ff9a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002814:	23fb      	movs	r3, #251	@ 0xfb
 8002816:	2240      	movs	r2, #64	@ 0x40
 8002818:	213c      	movs	r1, #60	@ 0x3c
 800281a:	4811      	ldr	r0, [pc, #68]	@ (8002860 <Numero_2+0x5c>)
 800281c:	f7fe ff94 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002820:	23db      	movs	r3, #219	@ 0xdb
 8002822:	2240      	movs	r2, #64	@ 0x40
 8002824:	213c      	movs	r1, #60	@ 0x3c
 8002826:	480e      	ldr	r0, [pc, #56]	@ (8002860 <Numero_2+0x5c>)
 8002828:	f7fe ff8e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800282c:	23db      	movs	r3, #219	@ 0xdb
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	213c      	movs	r1, #60	@ 0x3c
 8002832:	480b      	ldr	r0, [pc, #44]	@ (8002860 <Numero_2+0x5c>)
 8002834:	f7fe ff88 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002838:	23df      	movs	r3, #223	@ 0xdf
 800283a:	2240      	movs	r2, #64	@ 0x40
 800283c:	213c      	movs	r1, #60	@ 0x3c
 800283e:	4808      	ldr	r0, [pc, #32]	@ (8002860 <Numero_2+0x5c>)
 8002840:	f7fe ff82 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002844:	23df      	movs	r3, #223	@ 0xdf
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	213c      	movs	r1, #60	@ 0x3c
 800284a:	4805      	ldr	r0, [pc, #20]	@ (8002860 <Numero_2+0x5c>)
 800284c:	f7fe ff7c 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002850:	2300      	movs	r3, #0
 8002852:	2240      	movs	r2, #64	@ 0x40
 8002854:	213c      	movs	r1, #60	@ 0x3c
 8002856:	4802      	ldr	r0, [pc, #8]	@ (8002860 <Numero_2+0x5c>)
 8002858:	f7fe ff76 	bl	8001748 <I2C_Tx_2Bytes>
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40005c00 	.word	0x40005c00

08002864 <Numero_3>:

void Numero_3(void){
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002868:	23db      	movs	r3, #219	@ 0xdb
 800286a:	2240      	movs	r2, #64	@ 0x40
 800286c:	213c      	movs	r1, #60	@ 0x3c
 800286e:	4814      	ldr	r0, [pc, #80]	@ (80028c0 <Numero_3+0x5c>)
 8002870:	f7fe ff6a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002874:	23db      	movs	r3, #219	@ 0xdb
 8002876:	2240      	movs	r2, #64	@ 0x40
 8002878:	213c      	movs	r1, #60	@ 0x3c
 800287a:	4811      	ldr	r0, [pc, #68]	@ (80028c0 <Numero_3+0x5c>)
 800287c:	f7fe ff64 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002880:	23db      	movs	r3, #219	@ 0xdb
 8002882:	2240      	movs	r2, #64	@ 0x40
 8002884:	213c      	movs	r1, #60	@ 0x3c
 8002886:	480e      	ldr	r0, [pc, #56]	@ (80028c0 <Numero_3+0x5c>)
 8002888:	f7fe ff5e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800288c:	23db      	movs	r3, #219	@ 0xdb
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	213c      	movs	r1, #60	@ 0x3c
 8002892:	480b      	ldr	r0, [pc, #44]	@ (80028c0 <Numero_3+0x5c>)
 8002894:	f7fe ff58 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002898:	23ff      	movs	r3, #255	@ 0xff
 800289a:	2240      	movs	r2, #64	@ 0x40
 800289c:	213c      	movs	r1, #60	@ 0x3c
 800289e:	4808      	ldr	r0, [pc, #32]	@ (80028c0 <Numero_3+0x5c>)
 80028a0:	f7fe ff52 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80028a4:	23ff      	movs	r3, #255	@ 0xff
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	213c      	movs	r1, #60	@ 0x3c
 80028aa:	4805      	ldr	r0, [pc, #20]	@ (80028c0 <Numero_3+0x5c>)
 80028ac:	f7fe ff4c 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80028b0:	2300      	movs	r3, #0
 80028b2:	2240      	movs	r2, #64	@ 0x40
 80028b4:	213c      	movs	r1, #60	@ 0x3c
 80028b6:	4802      	ldr	r0, [pc, #8]	@ (80028c0 <Numero_3+0x5c>)
 80028b8:	f7fe ff46 	bl	8001748 <I2C_Tx_2Bytes>
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40005c00 	.word	0x40005c00

080028c4 <Numero_4>:

void Numero_4(void){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 80028c8:	231f      	movs	r3, #31
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	213c      	movs	r1, #60	@ 0x3c
 80028ce:	4814      	ldr	r0, [pc, #80]	@ (8002920 <Numero_4+0x5c>)
 80028d0:	f7fe ff3a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 80028d4:	231f      	movs	r3, #31
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	213c      	movs	r1, #60	@ 0x3c
 80028da:	4811      	ldr	r0, [pc, #68]	@ (8002920 <Numero_4+0x5c>)
 80028dc:	f7fe ff34 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 80028e0:	2318      	movs	r3, #24
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	213c      	movs	r1, #60	@ 0x3c
 80028e6:	480e      	ldr	r0, [pc, #56]	@ (8002920 <Numero_4+0x5c>)
 80028e8:	f7fe ff2e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 80028ec:	2318      	movs	r3, #24
 80028ee:	2240      	movs	r2, #64	@ 0x40
 80028f0:	213c      	movs	r1, #60	@ 0x3c
 80028f2:	480b      	ldr	r0, [pc, #44]	@ (8002920 <Numero_4+0x5c>)
 80028f4:	f7fe ff28 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80028f8:	23ff      	movs	r3, #255	@ 0xff
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	213c      	movs	r1, #60	@ 0x3c
 80028fe:	4808      	ldr	r0, [pc, #32]	@ (8002920 <Numero_4+0x5c>)
 8002900:	f7fe ff22 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002904:	23ff      	movs	r3, #255	@ 0xff
 8002906:	2240      	movs	r2, #64	@ 0x40
 8002908:	213c      	movs	r1, #60	@ 0x3c
 800290a:	4805      	ldr	r0, [pc, #20]	@ (8002920 <Numero_4+0x5c>)
 800290c:	f7fe ff1c 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002910:	2300      	movs	r3, #0
 8002912:	2240      	movs	r2, #64	@ 0x40
 8002914:	213c      	movs	r1, #60	@ 0x3c
 8002916:	4802      	ldr	r0, [pc, #8]	@ (8002920 <Numero_4+0x5c>)
 8002918:	f7fe ff16 	bl	8001748 <I2C_Tx_2Bytes>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40005c00 	.word	0x40005c00

08002924 <Numero_5>:

void Numero_5(void){
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002928:	23df      	movs	r3, #223	@ 0xdf
 800292a:	2240      	movs	r2, #64	@ 0x40
 800292c:	213c      	movs	r1, #60	@ 0x3c
 800292e:	4814      	ldr	r0, [pc, #80]	@ (8002980 <Numero_5+0x5c>)
 8002930:	f7fe ff0a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002934:	23df      	movs	r3, #223	@ 0xdf
 8002936:	2240      	movs	r2, #64	@ 0x40
 8002938:	213c      	movs	r1, #60	@ 0x3c
 800293a:	4811      	ldr	r0, [pc, #68]	@ (8002980 <Numero_5+0x5c>)
 800293c:	f7fe ff04 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002940:	23db      	movs	r3, #219	@ 0xdb
 8002942:	2240      	movs	r2, #64	@ 0x40
 8002944:	213c      	movs	r1, #60	@ 0x3c
 8002946:	480e      	ldr	r0, [pc, #56]	@ (8002980 <Numero_5+0x5c>)
 8002948:	f7fe fefe 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800294c:	23db      	movs	r3, #219	@ 0xdb
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	213c      	movs	r1, #60	@ 0x3c
 8002952:	480b      	ldr	r0, [pc, #44]	@ (8002980 <Numero_5+0x5c>)
 8002954:	f7fe fef8 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002958:	23fb      	movs	r3, #251	@ 0xfb
 800295a:	2240      	movs	r2, #64	@ 0x40
 800295c:	213c      	movs	r1, #60	@ 0x3c
 800295e:	4808      	ldr	r0, [pc, #32]	@ (8002980 <Numero_5+0x5c>)
 8002960:	f7fe fef2 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002964:	23fb      	movs	r3, #251	@ 0xfb
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	213c      	movs	r1, #60	@ 0x3c
 800296a:	4805      	ldr	r0, [pc, #20]	@ (8002980 <Numero_5+0x5c>)
 800296c:	f7fe feec 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002970:	2300      	movs	r3, #0
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	213c      	movs	r1, #60	@ 0x3c
 8002976:	4802      	ldr	r0, [pc, #8]	@ (8002980 <Numero_5+0x5c>)
 8002978:	f7fe fee6 	bl	8001748 <I2C_Tx_2Bytes>
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40005c00 	.word	0x40005c00

08002984 <Numero_6>:
void Numero_6(void){
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002988:	23ff      	movs	r3, #255	@ 0xff
 800298a:	2240      	movs	r2, #64	@ 0x40
 800298c:	213c      	movs	r1, #60	@ 0x3c
 800298e:	4814      	ldr	r0, [pc, #80]	@ (80029e0 <Numero_6+0x5c>)
 8002990:	f7fe feda 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002994:	23ff      	movs	r3, #255	@ 0xff
 8002996:	2240      	movs	r2, #64	@ 0x40
 8002998:	213c      	movs	r1, #60	@ 0x3c
 800299a:	4811      	ldr	r0, [pc, #68]	@ (80029e0 <Numero_6+0x5c>)
 800299c:	f7fe fed4 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 80029a0:	23db      	movs	r3, #219	@ 0xdb
 80029a2:	2240      	movs	r2, #64	@ 0x40
 80029a4:	213c      	movs	r1, #60	@ 0x3c
 80029a6:	480e      	ldr	r0, [pc, #56]	@ (80029e0 <Numero_6+0x5c>)
 80029a8:	f7fe fece 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 80029ac:	23db      	movs	r3, #219	@ 0xdb
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	213c      	movs	r1, #60	@ 0x3c
 80029b2:	480b      	ldr	r0, [pc, #44]	@ (80029e0 <Numero_6+0x5c>)
 80029b4:	f7fe fec8 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 80029b8:	23fb      	movs	r3, #251	@ 0xfb
 80029ba:	2240      	movs	r2, #64	@ 0x40
 80029bc:	213c      	movs	r1, #60	@ 0x3c
 80029be:	4808      	ldr	r0, [pc, #32]	@ (80029e0 <Numero_6+0x5c>)
 80029c0:	f7fe fec2 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 80029c4:	23fb      	movs	r3, #251	@ 0xfb
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	213c      	movs	r1, #60	@ 0x3c
 80029ca:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <Numero_6+0x5c>)
 80029cc:	f7fe febc 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0X00);
 80029d0:	2300      	movs	r3, #0
 80029d2:	2240      	movs	r2, #64	@ 0x40
 80029d4:	213c      	movs	r1, #60	@ 0x3c
 80029d6:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <Numero_6+0x5c>)
 80029d8:	f7fe feb6 	bl	8001748 <I2C_Tx_2Bytes>
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40005c00 	.word	0x40005c00

080029e4 <Numero_7>:


void Numero_7(void){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80029e8:	23c3      	movs	r3, #195	@ 0xc3
 80029ea:	2240      	movs	r2, #64	@ 0x40
 80029ec:	213c      	movs	r1, #60	@ 0x3c
 80029ee:	4814      	ldr	r0, [pc, #80]	@ (8002a40 <Numero_7+0x5c>)
 80029f0:	f7fe feaa 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE3);
 80029f4:	23e3      	movs	r3, #227	@ 0xe3
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	213c      	movs	r1, #60	@ 0x3c
 80029fa:	4811      	ldr	r0, [pc, #68]	@ (8002a40 <Numero_7+0x5c>)
 80029fc:	f7fe fea4 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3B);
 8002a00:	233b      	movs	r3, #59	@ 0x3b
 8002a02:	2240      	movs	r2, #64	@ 0x40
 8002a04:	213c      	movs	r1, #60	@ 0x3c
 8002a06:	480e      	ldr	r0, [pc, #56]	@ (8002a40 <Numero_7+0x5c>)
 8002a08:	f7fe fe9e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	213c      	movs	r1, #60	@ 0x3c
 8002a12:	480b      	ldr	r0, [pc, #44]	@ (8002a40 <Numero_7+0x5c>)
 8002a14:	f7fe fe98 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0F);
 8002a18:	230f      	movs	r3, #15
 8002a1a:	2240      	movs	r2, #64	@ 0x40
 8002a1c:	213c      	movs	r1, #60	@ 0x3c
 8002a1e:	4808      	ldr	r0, [pc, #32]	@ (8002a40 <Numero_7+0x5c>)
 8002a20:	f7fe fe92 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x07);
 8002a24:	2307      	movs	r3, #7
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	213c      	movs	r1, #60	@ 0x3c
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <Numero_7+0x5c>)
 8002a2c:	f7fe fe8c 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002a30:	2300      	movs	r3, #0
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	213c      	movs	r1, #60	@ 0x3c
 8002a36:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <Numero_7+0x5c>)
 8002a38:	f7fe fe86 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40005c00 	.word	0x40005c00

08002a44 <Numero_8>:

void Numero_8(void){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002a48:	23ff      	movs	r3, #255	@ 0xff
 8002a4a:	2240      	movs	r2, #64	@ 0x40
 8002a4c:	213c      	movs	r1, #60	@ 0x3c
 8002a4e:	4814      	ldr	r0, [pc, #80]	@ (8002aa0 <Numero_8+0x5c>)
 8002a50:	f7fe fe7a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002a54:	23ff      	movs	r3, #255	@ 0xff
 8002a56:	2240      	movs	r2, #64	@ 0x40
 8002a58:	213c      	movs	r1, #60	@ 0x3c
 8002a5a:	4811      	ldr	r0, [pc, #68]	@ (8002aa0 <Numero_8+0x5c>)
 8002a5c:	f7fe fe74 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002a60:	23db      	movs	r3, #219	@ 0xdb
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	213c      	movs	r1, #60	@ 0x3c
 8002a66:	480e      	ldr	r0, [pc, #56]	@ (8002aa0 <Numero_8+0x5c>)
 8002a68:	f7fe fe6e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002a6c:	23db      	movs	r3, #219	@ 0xdb
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	213c      	movs	r1, #60	@ 0x3c
 8002a72:	480b      	ldr	r0, [pc, #44]	@ (8002aa0 <Numero_8+0x5c>)
 8002a74:	f7fe fe68 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002a78:	23ff      	movs	r3, #255	@ 0xff
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	213c      	movs	r1, #60	@ 0x3c
 8002a7e:	4808      	ldr	r0, [pc, #32]	@ (8002aa0 <Numero_8+0x5c>)
 8002a80:	f7fe fe62 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002a84:	23ff      	movs	r3, #255	@ 0xff
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	213c      	movs	r1, #60	@ 0x3c
 8002a8a:	4805      	ldr	r0, [pc, #20]	@ (8002aa0 <Numero_8+0x5c>)
 8002a8c:	f7fe fe5c 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0X00);
 8002a90:	2300      	movs	r3, #0
 8002a92:	2240      	movs	r2, #64	@ 0x40
 8002a94:	213c      	movs	r1, #60	@ 0x3c
 8002a96:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <Numero_8+0x5c>)
 8002a98:	f7fe fe56 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40005c00 	.word	0x40005c00

08002aa4 <Numero_9>:

void Numero_9(void){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002aa8:	23df      	movs	r3, #223	@ 0xdf
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	213c      	movs	r1, #60	@ 0x3c
 8002aae:	4814      	ldr	r0, [pc, #80]	@ (8002b00 <Numero_9+0x5c>)
 8002ab0:	f7fe fe4a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002ab4:	23df      	movs	r3, #223	@ 0xdf
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	213c      	movs	r1, #60	@ 0x3c
 8002aba:	4811      	ldr	r0, [pc, #68]	@ (8002b00 <Numero_9+0x5c>)
 8002abc:	f7fe fe44 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002ac0:	23db      	movs	r3, #219	@ 0xdb
 8002ac2:	2240      	movs	r2, #64	@ 0x40
 8002ac4:	213c      	movs	r1, #60	@ 0x3c
 8002ac6:	480e      	ldr	r0, [pc, #56]	@ (8002b00 <Numero_9+0x5c>)
 8002ac8:	f7fe fe3e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002acc:	23db      	movs	r3, #219	@ 0xdb
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	213c      	movs	r1, #60	@ 0x3c
 8002ad2:	480b      	ldr	r0, [pc, #44]	@ (8002b00 <Numero_9+0x5c>)
 8002ad4:	f7fe fe38 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002ad8:	23ff      	movs	r3, #255	@ 0xff
 8002ada:	2240      	movs	r2, #64	@ 0x40
 8002adc:	213c      	movs	r1, #60	@ 0x3c
 8002ade:	4808      	ldr	r0, [pc, #32]	@ (8002b00 <Numero_9+0x5c>)
 8002ae0:	f7fe fe32 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002ae4:	23ff      	movs	r3, #255	@ 0xff
 8002ae6:	2240      	movs	r2, #64	@ 0x40
 8002ae8:	213c      	movs	r1, #60	@ 0x3c
 8002aea:	4805      	ldr	r0, [pc, #20]	@ (8002b00 <Numero_9+0x5c>)
 8002aec:	f7fe fe2c 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002af0:	2300      	movs	r3, #0
 8002af2:	2240      	movs	r2, #64	@ 0x40
 8002af4:	213c      	movs	r1, #60	@ 0x3c
 8002af6:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <Numero_9+0x5c>)
 8002af8:	f7fe fe26 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40005c00 	.word	0x40005c00

08002b04 <Numero_0>:
void Numero_0(void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002b08:	23ff      	movs	r3, #255	@ 0xff
 8002b0a:	2240      	movs	r2, #64	@ 0x40
 8002b0c:	213c      	movs	r1, #60	@ 0x3c
 8002b0e:	4814      	ldr	r0, [pc, #80]	@ (8002b60 <Numero_0+0x5c>)
 8002b10:	f7fe fe1a 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002b14:	23ff      	movs	r3, #255	@ 0xff
 8002b16:	2240      	movs	r2, #64	@ 0x40
 8002b18:	213c      	movs	r1, #60	@ 0x3c
 8002b1a:	4811      	ldr	r0, [pc, #68]	@ (8002b60 <Numero_0+0x5c>)
 8002b1c:	f7fe fe14 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002b20:	23c3      	movs	r3, #195	@ 0xc3
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	213c      	movs	r1, #60	@ 0x3c
 8002b26:	480e      	ldr	r0, [pc, #56]	@ (8002b60 <Numero_0+0x5c>)
 8002b28:	f7fe fe0e 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002b2c:	23c3      	movs	r3, #195	@ 0xc3
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	213c      	movs	r1, #60	@ 0x3c
 8002b32:	480b      	ldr	r0, [pc, #44]	@ (8002b60 <Numero_0+0x5c>)
 8002b34:	f7fe fe08 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002b38:	23ff      	movs	r3, #255	@ 0xff
 8002b3a:	2240      	movs	r2, #64	@ 0x40
 8002b3c:	213c      	movs	r1, #60	@ 0x3c
 8002b3e:	4808      	ldr	r0, [pc, #32]	@ (8002b60 <Numero_0+0x5c>)
 8002b40:	f7fe fe02 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002b44:	23ff      	movs	r3, #255	@ 0xff
 8002b46:	2240      	movs	r2, #64	@ 0x40
 8002b48:	213c      	movs	r1, #60	@ 0x3c
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <Numero_0+0x5c>)
 8002b4c:	f7fe fdfc 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002b50:	2300      	movs	r3, #0
 8002b52:	2240      	movs	r2, #64	@ 0x40
 8002b54:	213c      	movs	r1, #60	@ 0x3c
 8002b56:	4802      	ldr	r0, [pc, #8]	@ (8002b60 <Numero_0+0x5c>)
 8002b58:	f7fe fdf6 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40005c00 	.word	0x40005c00

08002b64 <DosPuntos>:

void DosPuntos(void){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002b68:	23c3      	movs	r3, #195	@ 0xc3
 8002b6a:	2240      	movs	r2, #64	@ 0x40
 8002b6c:	213c      	movs	r1, #60	@ 0x3c
 8002b6e:	4808      	ldr	r0, [pc, #32]	@ (8002b90 <DosPuntos+0x2c>)
 8002b70:	f7fe fdea 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002b74:	23c3      	movs	r3, #195	@ 0xc3
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	213c      	movs	r1, #60	@ 0x3c
 8002b7a:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <DosPuntos+0x2c>)
 8002b7c:	f7fe fde4 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002b80:	2300      	movs	r3, #0
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	213c      	movs	r1, #60	@ 0x3c
 8002b86:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <DosPuntos+0x2c>)
 8002b88:	f7fe fdde 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40005c00 	.word	0x40005c00

08002b94 <Simbolo_Grados>:

void Simbolo_Grados(void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
    // Ajustamos los valores para subir el símbolo de grados
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x30); // Parte superior del círculo, subido
 8002b98:	2330      	movs	r3, #48	@ 0x30
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	213c      	movs	r1, #60	@ 0x3c
 8002b9e:	480b      	ldr	r0, [pc, #44]	@ (8002bcc <Simbolo_Grados+0x38>)
 8002ba0:	f7fe fdd2 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x48); // Lados del círculo, subido
 8002ba4:	2348      	movs	r3, #72	@ 0x48
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	213c      	movs	r1, #60	@ 0x3c
 8002baa:	4808      	ldr	r0, [pc, #32]	@ (8002bcc <Simbolo_Grados+0x38>)
 8002bac:	f7fe fdcc 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x30); // Parte inferior del círculo, subido
 8002bb0:	2330      	movs	r3, #48	@ 0x30
 8002bb2:	2240      	movs	r2, #64	@ 0x40
 8002bb4:	213c      	movs	r1, #60	@ 0x3c
 8002bb6:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <Simbolo_Grados+0x38>)
 8002bb8:	f7fe fdc6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00); // Separación
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	213c      	movs	r1, #60	@ 0x3c
 8002bc2:	4802      	ldr	r0, [pc, #8]	@ (8002bcc <Simbolo_Grados+0x38>)
 8002bc4:	f7fe fdc0 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40005c00 	.word	0x40005c00

08002bd0 <SSD1306_Clear>:
}




void SSD1306_Clear(void){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
    int c;
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
 8002bd6:	23b0      	movs	r3, #176	@ 0xb0
 8002bd8:	2200      	movs	r2, #0
 8002bda:	213c      	movs	r1, #60	@ 0x3c
 8002bdc:	4869      	ldr	r0, [pc, #420]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002bde:	f7fe fdb3 	bl	8001748 <I2C_Tx_2Bytes>
    SSD1306_PosCom(0);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 f8d0 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002be8:	2300      	movs	r3, #0
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	e008      	b.n	8002c00 <SSD1306_Clear+0x30>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2240      	movs	r2, #64	@ 0x40
 8002bf2:	213c      	movs	r1, #60	@ 0x3c
 8002bf4:	4863      	ldr	r0, [pc, #396]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002bf6:	f7fe fda7 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c04:	ddf3      	ble.n	8002bee <SSD1306_Clear+0x1e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE1);
 8002c06:	23b1      	movs	r3, #177	@ 0xb1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	213c      	movs	r1, #60	@ 0x3c
 8002c0c:	485d      	ldr	r0, [pc, #372]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c0e:	f7fe fd9b 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f000 f8b8 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	e008      	b.n	8002c30 <SSD1306_Clear+0x60>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2240      	movs	r2, #64	@ 0x40
 8002c22:	213c      	movs	r1, #60	@ 0x3c
 8002c24:	4857      	ldr	r0, [pc, #348]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c26:	f7fe fd8f 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c34:	ddf3      	ble.n	8002c1e <SSD1306_Clear+0x4e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE2);
 8002c36:	23b2      	movs	r3, #178	@ 0xb2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	213c      	movs	r1, #60	@ 0x3c
 8002c3c:	4851      	ldr	r0, [pc, #324]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c3e:	f7fe fd83 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f8a0 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	e008      	b.n	8002c60 <SSD1306_Clear+0x90>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2240      	movs	r2, #64	@ 0x40
 8002c52:	213c      	movs	r1, #60	@ 0x3c
 8002c54:	484b      	ldr	r0, [pc, #300]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c56:	f7fe fd77 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c64:	ddf3      	ble.n	8002c4e <SSD1306_Clear+0x7e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002c66:	23b3      	movs	r3, #179	@ 0xb3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	213c      	movs	r1, #60	@ 0x3c
 8002c6c:	4845      	ldr	r0, [pc, #276]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c6e:	f7fe fd6b 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f000 f888 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e008      	b.n	8002c90 <SSD1306_Clear+0xc0>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2240      	movs	r2, #64	@ 0x40
 8002c82:	213c      	movs	r1, #60	@ 0x3c
 8002c84:	483f      	ldr	r0, [pc, #252]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c86:	f7fe fd5f 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c94:	ddf3      	ble.n	8002c7e <SSD1306_Clear+0xae>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE4);
 8002c96:	23b4      	movs	r3, #180	@ 0xb4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	213c      	movs	r1, #60	@ 0x3c
 8002c9c:	4839      	ldr	r0, [pc, #228]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002c9e:	f7fe fd53 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f000 f870 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	e008      	b.n	8002cc0 <SSD1306_Clear+0xf0>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2240      	movs	r2, #64	@ 0x40
 8002cb2:	213c      	movs	r1, #60	@ 0x3c
 8002cb4:	4833      	ldr	r0, [pc, #204]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002cb6:	f7fe fd47 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cc4:	ddf3      	ble.n	8002cae <SSD1306_Clear+0xde>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8002cc6:	23b5      	movs	r3, #181	@ 0xb5
 8002cc8:	2200      	movs	r2, #0
 8002cca:	213c      	movs	r1, #60	@ 0x3c
 8002ccc:	482d      	ldr	r0, [pc, #180]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002cce:	f7fe fd3b 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 f858 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002cd8:	2300      	movs	r3, #0
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	e008      	b.n	8002cf0 <SSD1306_Clear+0x120>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2240      	movs	r2, #64	@ 0x40
 8002ce2:	213c      	movs	r1, #60	@ 0x3c
 8002ce4:	4827      	ldr	r0, [pc, #156]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002ce6:	f7fe fd2f 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3301      	adds	r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cf4:	ddf3      	ble.n	8002cde <SSD1306_Clear+0x10e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE6);
 8002cf6:	23b6      	movs	r3, #182	@ 0xb6
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	213c      	movs	r1, #60	@ 0x3c
 8002cfc:	4821      	ldr	r0, [pc, #132]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002cfe:	f7fe fd23 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f000 f840 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	e008      	b.n	8002d20 <SSD1306_Clear+0x150>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	213c      	movs	r1, #60	@ 0x3c
 8002d14:	481b      	ldr	r0, [pc, #108]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002d16:	f7fe fd17 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d24:	ddf3      	ble.n	8002d0e <SSD1306_Clear+0x13e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 8002d26:	23b7      	movs	r3, #183	@ 0xb7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	213c      	movs	r1, #60	@ 0x3c
 8002d2c:	4815      	ldr	r0, [pc, #84]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002d2e:	f7fe fd0b 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f000 f828 	bl	8002d88 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002d38:	2300      	movs	r3, #0
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	e008      	b.n	8002d50 <SSD1306_Clear+0x180>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2240      	movs	r2, #64	@ 0x40
 8002d42:	213c      	movs	r1, #60	@ 0x3c
 8002d44:	480f      	ldr	r0, [pc, #60]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002d46:	f7fe fcff 	bl	8001748 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d54:	ddf3      	ble.n	8002d3e <SSD1306_Clear+0x16e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
 8002d56:	23b0      	movs	r3, #176	@ 0xb0
 8002d58:	2200      	movs	r2, #0
 8002d5a:	213c      	movs	r1, #60	@ 0x3c
 8002d5c:	4809      	ldr	r0, [pc, #36]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002d5e:	f7fe fcf3 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);
 8002d62:	2300      	movs	r3, #0
 8002d64:	2200      	movs	r2, #0
 8002d66:	213c      	movs	r1, #60	@ 0x3c
 8002d68:	4806      	ldr	r0, [pc, #24]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002d6a:	f7fe fced 	bl	8001748 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2200      	movs	r2, #0
 8002d72:	213c      	movs	r1, #60	@ 0x3c
 8002d74:	4803      	ldr	r0, [pc, #12]	@ (8002d84 <SSD1306_Clear+0x1b4>)
 8002d76:	f7fe fce7 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40005c00 	.word	0x40005c00

08002d88 <SSD1306_PosCom>:


void SSD1306_PosCom(uint8_t Pos){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]

    uint8_t high = (Pos & 0xF0) >> 4; // Parte alta del número
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	73fb      	strb	r3, [r7, #15]
    uint8_t low = Pos & 0x0F;         // Parte baja del número
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	73bb      	strb	r3, [r7, #14]

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x10 | high); // Enviar parte alta
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	f043 0310 	orr.w	r3, r3, #16
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2200      	movs	r2, #0
 8002daa:	213c      	movs	r1, #60	@ 0x3c
 8002dac:	4806      	ldr	r0, [pc, #24]	@ (8002dc8 <SSD1306_PosCom+0x40>)
 8002dae:	f7fe fccb 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00 | low);  // Enviar parte baja
 8002db2:	7bbb      	ldrb	r3, [r7, #14]
 8002db4:	2200      	movs	r2, #0
 8002db6:	213c      	movs	r1, #60	@ 0x3c
 8002db8:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <SSD1306_PosCom+0x40>)
 8002dba:	f7fe fcc5 	bl	8001748 <I2C_Tx_2Bytes>

}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40005c00 	.word	0x40005c00

08002dcc <MPU6050_Init>:
void MPU6050_Init(void);


int16_t MPU6050_Read(uint8_t Register);

void MPU6050_Init(void){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_PWR_MGMT_1, 0x00);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	226b      	movs	r2, #107	@ 0x6b
 8002dd4:	2168      	movs	r1, #104	@ 0x68
 8002dd6:	4814      	ldr	r0, [pc, #80]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002dd8:	f7fe fcb6 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_ACCEL_CONFIG, 0X00); //Configura el acelerometro a +-4g
 8002ddc:	2300      	movs	r3, #0
 8002dde:	221c      	movs	r2, #28
 8002de0:	2168      	movs	r1, #104	@ 0x68
 8002de2:	4811      	ldr	r0, [pc, #68]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002de4:	f7fe fcb0 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_GYRO_CONFIG, 0X00); //Configura giroscopio a +- 250°/s
 8002de8:	2300      	movs	r3, #0
 8002dea:	221b      	movs	r2, #27
 8002dec:	2168      	movs	r1, #104	@ 0x68
 8002dee:	480e      	ldr	r0, [pc, #56]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002df0:	f7fe fcaa 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, 0x19, 0X07);
 8002df4:	2307      	movs	r3, #7
 8002df6:	2219      	movs	r2, #25
 8002df8:	2168      	movs	r1, #104	@ 0x68
 8002dfa:	480b      	ldr	r0, [pc, #44]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002dfc:	f7fe fca4 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_CONFIG, 0x01);
 8002e00:	2301      	movs	r3, #1
 8002e02:	221a      	movs	r2, #26
 8002e04:	2168      	movs	r1, #104	@ 0x68
 8002e06:	4808      	ldr	r0, [pc, #32]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002e08:	f7fe fc9e 	bl	8001748 <I2C_Tx_2Bytes>
    //I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_CONFIG, 0x01);
   // I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_ACCEL_CONFIG, 0X00);
    //I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_FIFO_EN, 0XFF);
     I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_FIFO_EN, 0xFF);
 8002e0c:	23ff      	movs	r3, #255	@ 0xff
 8002e0e:	2223      	movs	r2, #35	@ 0x23
 8002e10:	2168      	movs	r1, #104	@ 0x68
 8002e12:	4805      	ldr	r0, [pc, #20]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002e14:	f7fe fc98 	bl	8001748 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_USER_CTRL, 0x40);
 8002e18:	2340      	movs	r3, #64	@ 0x40
 8002e1a:	226a      	movs	r2, #106	@ 0x6a
 8002e1c:	2168      	movs	r1, #104	@ 0x68
 8002e1e:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <MPU6050_Init+0x5c>)
 8002e20:	f7fe fc92 	bl	8001748 <I2C_Tx_2Bytes>
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40005c00 	.word	0x40005c00

08002e2c <MPU6050_Read>:

int16_t MPU6050_Read(uint8_t Register){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]

	int16_t Data;
I2C_Tx_1Byte (I2C3, AddressMPU6050, Register);
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2168      	movs	r1, #104	@ 0x68
 8002e3c:	4807      	ldr	r0, [pc, #28]	@ (8002e5c <MPU6050_Read+0x30>)
 8002e3e:	f7fe fb8d 	bl	800155c <I2C_Tx_1Byte>
Data = I2C_Rx_1Byte(I2C3, AddressMPU6050);
 8002e42:	2168      	movs	r1, #104	@ 0x68
 8002e44:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <MPU6050_Read+0x30>)
 8002e46:	f7fe fbea 	bl	800161e <I2C_Rx_1Byte>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	81fb      	strh	r3, [r7, #14]

//I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_USER_CTRL, 0x04);
//I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_FIFO_EN, 0x08);
//I2C_Tx_2Bytes(I2C3, AddressMPU6050, MPU6050_USER_CTRL, 0x40);

return Data;
 8002e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40005c00 	.word	0x40005c00

08002e60 <main>:
/*********FIN DE VARIABLES GLOBALES ************/
CAN_FIFOMailBox_TypeDef *FIFOmailBox0,*FIFOmailBox1;
uint32_t countdown = 10000; // Configura el tiempo del ciclo (10,000 "unidades", ajustable)

int main(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af02      	add	r7, sp, #8
  // uint32_t caseNumber = 0;  // Inicializar el contador para el caso del switch


/****************************INICIALIZACION Y CONFIGURACION DE PUERTOS Y PERIFERICOS************************************************/
/**********************************************************************************************************************************/
   Init_Peripheral();
 8002e66:	f000 f935 	bl	80030d4 <Init_Peripheral>
   Conf_Peripheral();
 8002e6a:	f000 f953 	bl	8003114 <Conf_Peripheral>



    I2C_Init(I2C3); //Inicializacion de periferico I2C
 8002e6e:	4886      	ldr	r0, [pc, #536]	@ (8003088 <main+0x228>)
 8002e70:	f7fe fb3a 	bl	80014e8 <I2C_Init>

    USARTx_CONF(USART3, USARTx_BRR_MSI_16MHz, USART3_IRQn, 7); // Configuracion del periferico Uart
 8002e74:	2307      	movs	r3, #7
 8002e76:	2227      	movs	r2, #39	@ 0x27
 8002e78:	f240 6182 	movw	r1, #1666	@ 0x682
 8002e7c:	4883      	ldr	r0, [pc, #524]	@ (800308c <main+0x22c>)
 8002e7e:	f7fe fd2d 	bl	80018dc <USARTx_CONF>
    CANx_Init(CAN1); //Inicializacion del periferico CAN
 8002e82:	4883      	ldr	r0, [pc, #524]	@ (8003090 <main+0x230>)
 8002e84:	f7fd fe32 	bl	8000aec <CANx_Init>
	CANx_BitTiming_500Kz(CAN1); //Configuracion del can bit
 8002e88:	4881      	ldr	r0, [pc, #516]	@ (8003090 <main+0x230>)
 8002e8a:	f7fd fe90 	bl	8000bae <CANx_BitTiming_500Kz>
	CANx_EnFIFO0Ints(CAN1); //interrupcion de la FIFO0
 8002e8e:	4880      	ldr	r0, [pc, #512]	@ (8003090 <main+0x230>)
 8002e90:	f7fe f897 	bl	8000fc2 <CANx_EnFIFO0Ints>
 	CANx_EnFIFO1Ints(CAN1); //Interrupcion de la FIFO1
 8002e94:	487e      	ldr	r0, [pc, #504]	@ (8003090 <main+0x230>)
 8002e96:	f7fe f884 	bl	8000fa2 <CANx_EnFIFO1Ints>
	NVIC_Enable(CAN1_RX0_IRQn, 5); // Habilitar el vector de interrupcion
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	2014      	movs	r0, #20
 8002e9e:	f7fe fcc1 	bl	8001824 <NVIC_Enable>
	NVIC_Enable(CAN1_RX1_IRQn, 4);  // Habilitar el vector de interrupcion
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	2015      	movs	r0, #21
 8002ea6:	f7fe fcbd 	bl	8001824 <NVIC_Enable>
	GPIOC->ODR ^= GPIO_ODR_ODR_13;
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8003094 <main+0x234>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4a79      	ldr	r2, [pc, #484]	@ (8003094 <main+0x234>)
 8002eb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002eb4:	6153      	str	r3, [r2, #20]
	CLEAR_BIT(CAN1->MCR, CAN_MCR_INRQ);//limpia bandera de modo inicialización
 8002eb6:	4b76      	ldr	r3, [pc, #472]	@ (8003090 <main+0x230>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a75      	ldr	r2, [pc, #468]	@ (8003090 <main+0x230>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]
	while(CAN1->MSR & CAN_MSR_INAK) {}; //Esperamos a que el bit CAN_MSR_INAK se limpie ****ENTRA
 8002ec2:	bf00      	nop
 8002ec4:	4b72      	ldr	r3, [pc, #456]	@ (8003090 <main+0x230>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f9      	bne.n	8002ec4 <main+0x64>
/****************************Uso de perifericos con librerias propias************************************************/
/**********************************************************************************************************************************/

/*************************CONFIGURACION DE FILTROS DE LAS FIFOS DE RECEPCION****************************/
/*******************************************************************************************************/
    CAN_FilterInit (CAN1, List_mode, Single_32bit, Fifo_0, 0); //CAN1, Mode , Scale, FIFO, Localidad
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	2101      	movs	r1, #1
 8002eda:	486d      	ldr	r0, [pc, #436]	@ (8003090 <main+0x230>)
 8002edc:	f7fd fe97 	bl	8000c0e <CAN_FilterInit>
    CAN_SetFilterValue(CAN1, 0x7E8, 0x00, 0);  //CAN1, ID , MSK, Localidad
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8002ee8:	4869      	ldr	r0, [pc, #420]	@ (8003090 <main+0x230>)
 8002eea:	f7fd ff11 	bl	8000d10 <CAN_SetFilterValue>

    CAN_FilterInit (CAN1, List_mode, Single_32bit, Fifo_1, 1); //CAN1, Mode , Scale, FIFO, Localidad
 8002eee:	2301      	movs	r3, #1
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4865      	ldr	r0, [pc, #404]	@ (8003090 <main+0x230>)
 8002efa:	f7fd fe88 	bl	8000c0e <CAN_FilterInit>
    CAN_SetFilterValue(CAN1, 0x0BB, 0x00, 1);  //CAN1, ID , MSK, Localidad
 8002efe:	2301      	movs	r3, #1
 8002f00:	2200      	movs	r2, #0
 8002f02:	21bb      	movs	r1, #187	@ 0xbb
 8002f04:	4862      	ldr	r0, [pc, #392]	@ (8003090 <main+0x230>)
 8002f06:	f7fd ff03 	bl	8000d10 <CAN_SetFilterValue>

    CLEAR_BIT(CAN1->FMR, CAN_FMR_FINIT);
 8002f0a:	4b61      	ldr	r3, [pc, #388]	@ (8003090 <main+0x230>)
 8002f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f10:	4a5f      	ldr	r2, [pc, #380]	@ (8003090 <main+0x230>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200


/*************************CONFIGURACION DE FILTROS DE LOS MILEBOX DE TRANSMICION***************************/
/*******************************************************************************************************/

   CAN_MailboxConfig(CAN1, false, 0x7DF, false, 0x0); //CAN1, ExtededID, IDE, RTR, Localidad
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f240 72df 	movw	r2, #2015	@ 0x7df
 8002f24:	2100      	movs	r1, #0
 8002f26:	485a      	ldr	r0, [pc, #360]	@ (8003090 <main+0x230>)
 8002f28:	f7fd ff45 	bl	8000db6 <CAN_MailboxConfig>
   CAN_SendData(CAN1, 8, 0x000D0102, 0x0); //CAN1, DLC , DATA, Localidad
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4a59      	ldr	r2, [pc, #356]	@ (8003098 <main+0x238>)
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	2108      	movs	r1, #8
 8002f38:	4855      	ldr	r0, [pc, #340]	@ (8003090 <main+0x230>)
 8002f3a:	f7fd ff93 	bl	8000e64 <CAN_SendData>

   //CONFIGURAR MAILBOXS
   //frame = (originalMessage & 0x00FFFFFF) | ((uint32_t)Velocidad << 24);

   CAN_MailboxConfig(CAN1, false, 0x7E8, false, 0x1); //CAN1, ExtededID, IDE, RTR, Localidad
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2300      	movs	r3, #0
 8002f44:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4851      	ldr	r0, [pc, #324]	@ (8003090 <main+0x230>)
 8002f4c:	f7fd ff33 	bl	8000db6 <CAN_MailboxConfig>


/*************************USO DE PANTALLA OLED I2C SSD1306***********************************************/
/*******************************************************************************************************/

   SSD1306_Init(); //Funcion para configurar la pantalla
 8002f50:	f7fe fd7e 	bl	8001a50 <SSD1306_Init>
   SSD1306_Clear(); //Funcion para limpiar la pantalla
 8002f54:	f7ff fe3c 	bl	8002bd0 <SSD1306_Clear>
   SecuanciaInicio(); //Secuencia de la interfaz de usuario - inicio
 8002f58:	f000 f9f4 	bl	8003344 <SecuanciaInicio>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
 8002f5c:	23b0      	movs	r3, #176	@ 0xb0
 8002f5e:	2200      	movs	r2, #0
 8002f60:	213c      	movs	r1, #60	@ 0x3c
 8002f62:	4849      	ldr	r0, [pc, #292]	@ (8003088 <main+0x228>)
 8002f64:	f7fe fbf0 	bl	8001748 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7ff ff0d 	bl	8002d88 <SSD1306_PosCom>
   SSD1306_WriteString("! TELEMETRY SYSTEM !");
 8002f6e:	484b      	ldr	r0, [pc, #300]	@ (800309c <main+0x23c>)
 8002f70:	f7fe fe0a 	bl	8001b88 <SSD1306_WriteString>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002f74:	23b3      	movs	r3, #179	@ 0xb3
 8002f76:	2200      	movs	r2, #0
 8002f78:	213c      	movs	r1, #60	@ 0x3c
 8002f7a:	4843      	ldr	r0, [pc, #268]	@ (8003088 <main+0x228>)
 8002f7c:	f7fe fbe4 	bl	8001748 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff ff01 	bl	8002d88 <SSD1306_PosCom>
   SSD1306_WriteString(" VELOCIDAD :        ");
 8002f86:	4846      	ldr	r0, [pc, #280]	@ (80030a0 <main+0x240>)
 8002f88:	f7fe fdfe 	bl	8001b88 <SSD1306_WriteString>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8002f8c:	23b5      	movs	r3, #181	@ 0xb5
 8002f8e:	2200      	movs	r2, #0
 8002f90:	213c      	movs	r1, #60	@ 0x3c
 8002f92:	483d      	ldr	r0, [pc, #244]	@ (8003088 <main+0x228>)
 8002f94:	f7fe fbd8 	bl	8001748 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff fef5 	bl	8002d88 <SSD1306_PosCom>
   SSD1306_WriteString(" RPMS :               ");
 8002f9e:	4841      	ldr	r0, [pc, #260]	@ (80030a4 <main+0x244>)
 8002fa0:	f7fe fdf2 	bl	8001b88 <SSD1306_WriteString>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 8002fa4:	23b7      	movs	r3, #183	@ 0xb7
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	213c      	movs	r1, #60	@ 0x3c
 8002faa:	4837      	ldr	r0, [pc, #220]	@ (8003088 <main+0x228>)
 8002fac:	f7fe fbcc 	bl	8001748 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7ff fee9 	bl	8002d88 <SSD1306_PosCom>
   SSD1306_WriteString(" GAS :                 ");
 8002fb6:	483c      	ldr	r0, [pc, #240]	@ (80030a8 <main+0x248>)
 8002fb8:	f7fe fde6 	bl	8001b88 <SSD1306_WriteString>


/*************************USO DE PANTALLA MPU6050***********************************************/
/*******************************************************************************************************/
   MPU6050_Init(); //INICIALIZAR Y CONFIGURAR REGISTROSD EL MPU6050
 8002fbc:	f7ff ff06 	bl	8002dcc <MPU6050_Init>


    while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 8002fc0:	e008      	b.n	8002fd4 <main+0x174>
        GPIOB->ODR ^= GPIO_ODR_ODR_13; //Conmuta led de usuario para indicar que esta listo para empezar despues de precionar boton
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80030ac <main+0x24c>)
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4a39      	ldr	r2, [pc, #228]	@ (80030ac <main+0x24c>)
 8002fc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002fcc:	6153      	str	r3, [r2, #20]
	    delay(300000);  // Se queda en este bucle mientras el botón está en 0 (no presionado)
 8002fce:	4838      	ldr	r0, [pc, #224]	@ (80030b0 <main+0x250>)
 8002fd0:	f000 fa86 	bl	80034e0 <delay>
    while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <main+0x234>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <main+0x162>
    }
    delay(500000);  // Se queda en este bucle mientras el botón está en 0 (no presionado)
 8002fe0:	4834      	ldr	r0, [pc, #208]	@ (80030b4 <main+0x254>)
 8002fe2:	f000 fa7d 	bl	80034e0 <delay>
    while (1) {

        while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 8002fe6:	e041      	b.n	800306c <main+0x20c>
           GPIOB->ODR ^= GPIO_ODR_ODR_13; // BLINK LED
 8002fe8:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <main+0x24c>)
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	4a2f      	ldr	r2, [pc, #188]	@ (80030ac <main+0x24c>)
 8002fee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ff2:	6153      	str	r3, [r2, #20]
           MPU6050_Read_Ace_Giro(); //LECTURA DE GIROSCOPIO Y ACELEROMETRO
 8002ff4:	f000 f8e0 	bl	80031b8 <MPU6050_Read_Ace_Giro>

           ByteA = 0;
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80030b8 <main+0x258>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
           ByteB = 0;
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <main+0x25c>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
           ByteC = 0;
 8003004:	4b2e      	ldr	r3, [pc, #184]	@ (80030c0 <main+0x260>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
           ByteD = 0;
 800300a:	4b2e      	ldr	r3, [pc, #184]	@ (80030c4 <main+0x264>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]

           Obdii_Message(PID_0D);
 8003010:	4821      	ldr	r0, [pc, #132]	@ (8003098 <main+0x238>)
 8003012:	f000 fbbf 	bl	8003794 <Obdii_Message>
           delay(10000);
 8003016:	f242 7010 	movw	r0, #10000	@ 0x2710
 800301a:	f000 fa61 	bl	80034e0 <delay>

           ByteA = (receivedData0_L & 0xFF000000) >> 24;
 800301e:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <main+0x268>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e1b      	lsrs	r3, r3, #24
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4b24      	ldr	r3, [pc, #144]	@ (80030b8 <main+0x258>)
 8003028:	701a      	strb	r2, [r3, #0]
           ByteB = (receivedData0_H & 0x000000FF);
 800302a:	4b28      	ldr	r3, [pc, #160]	@ (80030cc <main+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b22      	ldr	r3, [pc, #136]	@ (80030bc <main+0x25c>)
 8003032:	701a      	strb	r2, [r3, #0]
           ByteC = (receivedData0_H & 0x0000FF00) >> 8;
 8003034:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <main+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	b2da      	uxtb	r2, r3
 800303c:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <main+0x260>)
 800303e:	701a      	strb	r2, [r3, #0]
           ByteD = (receivedData0_H & 0x00FF0000) >> 16;
 8003040:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <main+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <main+0x264>)
 800304a:	701a      	strb	r2, [r3, #0]
           Vel_Km = ByteA;
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <main+0x258>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b1f      	ldr	r3, [pc, #124]	@ (80030d0 <main+0x270>)
 8003054:	601a      	str	r2, [r3, #0]
          // Get_Obdii_Data();
           SSD1306_Refresh();
 8003056:	f000 fbc1 	bl	80037dc <SSD1306_Refresh>
           delay(500000);
 800305a:	4816      	ldr	r0, [pc, #88]	@ (80030b4 <main+0x254>)
 800305c:	f000 fa40 	bl	80034e0 <delay>

           sendMessage_http_field1(Vel_Km);
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <main+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fa9c 	bl	80035a4 <sendMessage_http_field1>
        while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 800306c:	4b09      	ldr	r3, [pc, #36]	@ (8003094 <main+0x234>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0b7      	beq.n	8002fe8 <main+0x188>
                PID = 0x00;
            }
*/
        }

        Send_Telemetry ();
 8003078:	f000 fc36 	bl	80038e8 <Send_Telemetry>
        sendMessage_Cell(Vel_Km);
 800307c:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <main+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fb47 	bl	8003714 <sendMessage_Cell>
        while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 8003086:	e7f1      	b.n	800306c <main+0x20c>
 8003088:	40005c00 	.word	0x40005c00
 800308c:	40004800 	.word	0x40004800
 8003090:	40006400 	.word	0x40006400
 8003094:	48000800 	.word	0x48000800
 8003098:	000d0102 	.word	0x000d0102
 800309c:	08004394 	.word	0x08004394
 80030a0:	080043ac 	.word	0x080043ac
 80030a4:	080043c4 	.word	0x080043c4
 80030a8:	080043dc 	.word	0x080043dc
 80030ac:	48000400 	.word	0x48000400
 80030b0:	000493e0 	.word	0x000493e0
 80030b4:	0007a120 	.word	0x0007a120
 80030b8:	200001b8 	.word	0x200001b8
 80030bc:	200001b9 	.word	0x200001b9
 80030c0:	200001ba 	.word	0x200001ba
 80030c4:	200001bb 	.word	0x200001bb
 80030c8:	20000198 	.word	0x20000198
 80030cc:	2000019c 	.word	0x2000019c
 80030d0:	200001ac 	.word	0x200001ac

080030d4 <Init_Peripheral>:
		  I2C_delay(30);*/


 }

void Init_Peripheral(void){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
	  /*CONFIGURACIÓN DEL RELOJ*/
	  SystCLK_SetMSI(MSI_16MHz); //Configura 16MHz como  reloj
 80030d8:	2080      	movs	r0, #128	@ 0x80
 80030da:	f7fe f9ab 	bl	8001434 <SystCLK_SetMSI>
	  RCC_EnPort(GPIOB);//configura reloj en puerto B Para CANX
 80030de:	4808      	ldr	r0, [pc, #32]	@ (8003100 <Init_Peripheral+0x2c>)
 80030e0:	f7fe f950 	bl	8001384 <RCC_EnPort>
	  RCC_EnPort(GPIOC);//configura reloj en puerto C para I2C
 80030e4:	4807      	ldr	r0, [pc, #28]	@ (8003104 <Init_Peripheral+0x30>)
 80030e6:	f7fe f94d 	bl	8001384 <RCC_EnPort>
	  RCC_En_I2C(I2C3); // Habilitar reloj al periférico I2C.
 80030ea:	4807      	ldr	r0, [pc, #28]	@ (8003108 <Init_Peripheral+0x34>)
 80030ec:	f7fe f9d8 	bl	80014a0 <RCC_En_I2C>
	  RCC_En_CANx(CAN1);// Habilitar reloj al periferico CAN
 80030f0:	4806      	ldr	r0, [pc, #24]	@ (800310c <Init_Peripheral+0x38>)
 80030f2:	f7fd fce3 	bl	8000abc <RCC_En_CANx>
	  RCC_En_USARTx(USART3);
 80030f6:	4806      	ldr	r0, [pc, #24]	@ (8003110 <Init_Peripheral+0x3c>)
 80030f8:	f7fe fbc0 	bl	800187c <RCC_En_USARTx>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	48000400 	.word	0x48000400
 8003104:	48000800 	.word	0x48000800
 8003108:	40005c00 	.word	0x40005c00
 800310c:	40006400 	.word	0x40006400
 8003110:	40004800 	.word	0x40004800

08003114 <Conf_Peripheral>:

void Conf_Peripheral(void){
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af02      	add	r7, sp, #8

	 //Configuración de Led y boton de usuario
	//  GPIOx_InitIO(GPIOC, 2, GPIO_MODER_INPUT, false); //Botón de Usuario de Liese-duino
	 // GPIOx_InitIO(GPIOC, 13, GPIO_MODER_OUTPUT, false); //Led de usuario de Liese-duino

	  GPIOx_InitIO(GPIOC, 13, GPIO_MODER_INPUT, false); //Botón de Usuario de nucleo
 800311a:	2300      	movs	r3, #0
 800311c:	2200      	movs	r2, #0
 800311e:	210d      	movs	r1, #13
 8003120:	4823      	ldr	r0, [pc, #140]	@ (80031b0 <Conf_Peripheral+0x9c>)
 8003122:	f7fe f8d9 	bl	80012d8 <GPIOx_InitIO>
	 GPIOx_InitIO(GPIOB, 13, GPIO_MODER_OUTPUT, false); //Led de usuario de nucleo
 8003126:	2300      	movs	r3, #0
 8003128:	2201      	movs	r2, #1
 800312a:	210d      	movs	r1, #13
 800312c:	4821      	ldr	r0, [pc, #132]	@ (80031b4 <Conf_Peripheral+0xa0>)
 800312e:	f7fe f8d3 	bl	80012d8 <GPIOx_InitIO>


	  GPIOx_InitAF(GPIOC, 0, 1, 2, 4, false); /*Puerto C / PIN 0 / Configura Open Drain / High speed /  Función alterna 4 - I2C3_SCL / Habilita Resistencia de Pull -Up  */
 8003132:	2300      	movs	r3, #0
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	2304      	movs	r3, #4
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2302      	movs	r3, #2
 800313c:	2201      	movs	r2, #1
 800313e:	2100      	movs	r1, #0
 8003140:	481b      	ldr	r0, [pc, #108]	@ (80031b0 <Conf_Peripheral+0x9c>)
 8003142:	f7fe f85a 	bl	80011fa <GPIOx_InitAF>
	  GPIOx_InitAF(GPIOC, 1, 1, 2, 4, false); /*Puerto C / PIN 1 / Configura Open Drain / High speed /  Función alterna 4 - I2C3_SDA / Habilita Resistencia de Pull -Up  */
 8003146:	2300      	movs	r3, #0
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2304      	movs	r3, #4
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2302      	movs	r3, #2
 8003150:	2201      	movs	r2, #1
 8003152:	2101      	movs	r1, #1
 8003154:	4816      	ldr	r0, [pc, #88]	@ (80031b0 <Conf_Peripheral+0x9c>)
 8003156:	f7fe f850 	bl	80011fa <GPIOx_InitAF>


	  //inicializa funcion alterna para CAN1 RX en pin B8
	  GPIOx_InitAF(GPIOB, 8, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, 9 , false); /*Puerto B / PIN 8 / Configura Push Pull / High speed /  Función alterna 9 - CAN1_RX / Habilita Resistencia de Pull -Up  */
 800315a:	2300      	movs	r3, #0
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2309      	movs	r3, #9
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2303      	movs	r3, #3
 8003164:	2200      	movs	r2, #0
 8003166:	2108      	movs	r1, #8
 8003168:	4812      	ldr	r0, [pc, #72]	@ (80031b4 <Conf_Peripheral+0xa0>)
 800316a:	f7fe f846 	bl	80011fa <GPIOx_InitAF>
	  //inicializa funcion alterna para CAN1 TX en pin B9
	  GPIOx_InitAF(GPIOB, 9, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, 9 , false); /*Puerto B / PIN 9 / Configura Push Pull / High speed /  Función alterna 9 - CAN1_TX / Habilita Resistencia de Pull -Up  */
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2309      	movs	r3, #9
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2303      	movs	r3, #3
 8003178:	2200      	movs	r2, #0
 800317a:	2109      	movs	r1, #9
 800317c:	480d      	ldr	r0, [pc, #52]	@ (80031b4 <Conf_Peripheral+0xa0>)
 800317e:	f7fe f83c 	bl	80011fa <GPIOx_InitAF>

	  // Inicializa función alterna para USART3
	  GPIOx_InitAF(GPIOB, 10, GPIO_OTYPER_PP, 0, 7, false); // USART3_TX en PB10
 8003182:	2300      	movs	r3, #0
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	2307      	movs	r3, #7
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2300      	movs	r3, #0
 800318c:	2200      	movs	r2, #0
 800318e:	210a      	movs	r1, #10
 8003190:	4808      	ldr	r0, [pc, #32]	@ (80031b4 <Conf_Peripheral+0xa0>)
 8003192:	f7fe f832 	bl	80011fa <GPIOx_InitAF>
	  GPIOx_InitAF(GPIOB, 11, GPIO_OTYPER_PP, 0, 7, true);  // USART3_RX en PB11 con Pull-Up
 8003196:	2301      	movs	r3, #1
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2307      	movs	r3, #7
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	2200      	movs	r2, #0
 80031a2:	210b      	movs	r1, #11
 80031a4:	4803      	ldr	r0, [pc, #12]	@ (80031b4 <Conf_Peripheral+0xa0>)
 80031a6:	f7fe f828 	bl	80011fa <GPIOx_InitAF>
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	48000800 	.word	0x48000800
 80031b4:	48000400 	.word	0x48000400

080031b8 <MPU6050_Read_Ace_Giro>:

void MPU6050_Read_Ace_Giro(void){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	  AC_X =  MPU6050_Read(MPU6050_ACCEL_XOUT_H);
 80031bc:	203b      	movs	r0, #59	@ 0x3b
 80031be:	f7ff fe35 	bl	8002e2c <MPU6050_Read>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b52      	ldr	r3, [pc, #328]	@ (8003310 <MPU6050_Read_Ace_Giro+0x158>)
 80031c8:	801a      	strh	r2, [r3, #0]
	  AX=(AC_X/16384.0);
 80031ca:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <MPU6050_Read_Ace_Giro+0x158>)
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9a7 	bl	8000524 <__aeabi_i2d>
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <MPU6050_Read_Ace_Giro+0x15c>)
 80031dc:	f7fd fb36 	bl	800084c <__aeabi_ddiv>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fc18 	bl	8000a1c <__aeabi_d2f>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003318 <MPU6050_Read_Ace_Giro+0x160>)
 80031f0:	6013      	str	r3, [r2, #0]
	  AC_Y =  MPU6050_Read(MPU6050_ACCEL_YOUT_H);
 80031f2:	203d      	movs	r0, #61	@ 0x3d
 80031f4:	f7ff fe1a 	bl	8002e2c <MPU6050_Read>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	4b47      	ldr	r3, [pc, #284]	@ (800331c <MPU6050_Read_Ace_Giro+0x164>)
 80031fe:	801a      	strh	r2, [r3, #0]
	  AY=(AC_Y/16384.0);
 8003200:	4b46      	ldr	r3, [pc, #280]	@ (800331c <MPU6050_Read_Ace_Giro+0x164>)
 8003202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f98c 	bl	8000524 <__aeabi_i2d>
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <MPU6050_Read_Ace_Giro+0x15c>)
 8003212:	f7fd fb1b 	bl	800084c <__aeabi_ddiv>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f7fd fbfd 	bl	8000a1c <__aeabi_d2f>
 8003222:	4603      	mov	r3, r0
 8003224:	4a3e      	ldr	r2, [pc, #248]	@ (8003320 <MPU6050_Read_Ace_Giro+0x168>)
 8003226:	6013      	str	r3, [r2, #0]
	  AC_Z =  MPU6050_Read(MPU6050_ACCEL_ZOUT_H);
 8003228:	203f      	movs	r0, #63	@ 0x3f
 800322a:	f7ff fdff 	bl	8002e2c <MPU6050_Read>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	4b3c      	ldr	r3, [pc, #240]	@ (8003324 <MPU6050_Read_Ace_Giro+0x16c>)
 8003234:	801a      	strh	r2, [r3, #0]
	  AZ=(AC_Z/16384.0);
 8003236:	4b3b      	ldr	r3, [pc, #236]	@ (8003324 <MPU6050_Read_Ace_Giro+0x16c>)
 8003238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f971 	bl	8000524 <__aeabi_i2d>
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	4b33      	ldr	r3, [pc, #204]	@ (8003314 <MPU6050_Read_Ace_Giro+0x15c>)
 8003248:	f7fd fb00 	bl	800084c <__aeabi_ddiv>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f7fd fbe2 	bl	8000a1c <__aeabi_d2f>
 8003258:	4603      	mov	r3, r0
 800325a:	4a33      	ldr	r2, [pc, #204]	@ (8003328 <MPU6050_Read_Ace_Giro+0x170>)
 800325c:	6013      	str	r3, [r2, #0]
	  G_X =  MPU6050_Read(MPU6050_GYRO_XOUT_H);
 800325e:	2043      	movs	r0, #67	@ 0x43
 8003260:	f7ff fde4 	bl	8002e2c <MPU6050_Read>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	4b30      	ldr	r3, [pc, #192]	@ (800332c <MPU6050_Read_Ace_Giro+0x174>)
 800326a:	801a      	strh	r2, [r3, #0]
	  GX=(G_X/131.0);
 800326c:	4b2f      	ldr	r3, [pc, #188]	@ (800332c <MPU6050_Read_Ace_Giro+0x174>)
 800326e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f956 	bl	8000524 <__aeabi_i2d>
 8003278:	a323      	add	r3, pc, #140	@ (adr r3, 8003308 <MPU6050_Read_Ace_Giro+0x150>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f7fd fae5 	bl	800084c <__aeabi_ddiv>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f7fd fbc7 	bl	8000a1c <__aeabi_d2f>
 800328e:	4603      	mov	r3, r0
 8003290:	4a27      	ldr	r2, [pc, #156]	@ (8003330 <MPU6050_Read_Ace_Giro+0x178>)
 8003292:	6013      	str	r3, [r2, #0]
	  G_Y =  MPU6050_Read(MPU6050_GYRO_YOUT_H);
 8003294:	2045      	movs	r0, #69	@ 0x45
 8003296:	f7ff fdc9 	bl	8002e2c <MPU6050_Read>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <MPU6050_Read_Ace_Giro+0x17c>)
 80032a0:	801a      	strh	r2, [r3, #0]
	  GY=(G_Y/131.0);
 80032a2:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <MPU6050_Read_Ace_Giro+0x17c>)
 80032a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f93b 	bl	8000524 <__aeabi_i2d>
 80032ae:	a316      	add	r3, pc, #88	@ (adr r3, 8003308 <MPU6050_Read_Ace_Giro+0x150>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd faca 	bl	800084c <__aeabi_ddiv>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fbac 	bl	8000a1c <__aeabi_d2f>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003338 <MPU6050_Read_Ace_Giro+0x180>)
 80032c8:	6013      	str	r3, [r2, #0]
	  G_Z = MPU6050_Read(MPU6050_GYRO_ZOUT_H);
 80032ca:	2047      	movs	r0, #71	@ 0x47
 80032cc:	f7ff fdae 	bl	8002e2c <MPU6050_Read>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <MPU6050_Read_Ace_Giro+0x184>)
 80032d6:	801a      	strh	r2, [r3, #0]
	  GZ=(G_Z/131.0);
 80032d8:	4b18      	ldr	r3, [pc, #96]	@ (800333c <MPU6050_Read_Ace_Giro+0x184>)
 80032da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f920 	bl	8000524 <__aeabi_i2d>
 80032e4:	a308      	add	r3, pc, #32	@ (adr r3, 8003308 <MPU6050_Read_Ace_Giro+0x150>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd faaf 	bl	800084c <__aeabi_ddiv>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	f7fd fb91 	bl	8000a1c <__aeabi_d2f>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4a10      	ldr	r2, [pc, #64]	@ (8003340 <MPU6050_Read_Ace_Giro+0x188>)
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	f3af 8000 	nop.w
 8003308:	00000000 	.word	0x00000000
 800330c:	40606000 	.word	0x40606000
 8003310:	20000170 	.word	0x20000170
 8003314:	40d00000 	.word	0x40d00000
 8003318:	20000178 	.word	0x20000178
 800331c:	20000172 	.word	0x20000172
 8003320:	2000017c 	.word	0x2000017c
 8003324:	20000174 	.word	0x20000174
 8003328:	20000180 	.word	0x20000180
 800332c:	20000184 	.word	0x20000184
 8003330:	2000018c 	.word	0x2000018c
 8003334:	20000186 	.word	0x20000186
 8003338:	20000190 	.word	0x20000190
 800333c:	20000188 	.word	0x20000188
 8003340:	20000194 	.word	0x20000194

08003344 <SecuanciaInicio>:

void SecuanciaInicio(void){
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0X2E); //Escrollin off
 8003348:	232e      	movs	r3, #46	@ 0x2e
 800334a:	2200      	movs	r2, #0
 800334c:	213c      	movs	r1, #60	@ 0x3c
 800334e:	485c      	ldr	r0, [pc, #368]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003350:	f7fe f9fa 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA5);
 8003354:	23a5      	movs	r3, #165	@ 0xa5
 8003356:	2200      	movs	r2, #0
 8003358:	213c      	movs	r1, #60	@ 0x3c
 800335a:	4859      	ldr	r0, [pc, #356]	@ (80034c0 <SecuanciaInicio+0x17c>)
 800335c:	f7fe f9f4 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8003360:	4858      	ldr	r0, [pc, #352]	@ (80034c4 <SecuanciaInicio+0x180>)
 8003362:	f7fe f88b 	bl	800147c <I2C_delay>
	 // GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);
 8003366:	23a4      	movs	r3, #164	@ 0xa4
 8003368:	2200      	movs	r2, #0
 800336a:	213c      	movs	r1, #60	@ 0x3c
 800336c:	4854      	ldr	r0, [pc, #336]	@ (80034c0 <SecuanciaInicio+0x17c>)
 800336e:	f7fe f9eb 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8003372:	4854      	ldr	r0, [pc, #336]	@ (80034c4 <SecuanciaInicio+0x180>)
 8003374:	f7fe f882 	bl	800147c <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA5);
 8003378:	23a5      	movs	r3, #165	@ 0xa5
 800337a:	2200      	movs	r2, #0
 800337c:	213c      	movs	r1, #60	@ 0x3c
 800337e:	4850      	ldr	r0, [pc, #320]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003380:	f7fe f9e2 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8003384:	484f      	ldr	r0, [pc, #316]	@ (80034c4 <SecuanciaInicio+0x180>)
 8003386:	f7fe f879 	bl	800147c <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);
 800338a:	23a4      	movs	r3, #164	@ 0xa4
 800338c:	2200      	movs	r2, #0
 800338e:	213c      	movs	r1, #60	@ 0x3c
 8003390:	484b      	ldr	r0, [pc, #300]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003392:	f7fe f9d9 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8003396:	484b      	ldr	r0, [pc, #300]	@ (80034c4 <SecuanciaInicio+0x180>)
 8003398:	f7fe f870 	bl	800147c <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA5);
 800339c:	23a5      	movs	r3, #165	@ 0xa5
 800339e:	2200      	movs	r2, #0
 80033a0:	213c      	movs	r1, #60	@ 0x3c
 80033a2:	4847      	ldr	r0, [pc, #284]	@ (80034c0 <SecuanciaInicio+0x17c>)
 80033a4:	f7fe f9d0 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80033a8:	4846      	ldr	r0, [pc, #280]	@ (80034c4 <SecuanciaInicio+0x180>)
 80033aa:	f7fe f867 	bl	800147c <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);
 80033ae:	23a4      	movs	r3, #164	@ 0xa4
 80033b0:	2200      	movs	r2, #0
 80033b2:	213c      	movs	r1, #60	@ 0x3c
 80033b4:	4842      	ldr	r0, [pc, #264]	@ (80034c0 <SecuanciaInicio+0x17c>)
 80033b6:	f7fe f9c7 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80033ba:	4842      	ldr	r0, [pc, #264]	@ (80034c4 <SecuanciaInicio+0x180>)
 80033bc:	f7fe f85e 	bl	800147c <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE1);
 80033c0:	23b1      	movs	r3, #177	@ 0xb1
 80033c2:	2200      	movs	r2, #0
 80033c4:	213c      	movs	r1, #60	@ 0x3c
 80033c6:	483e      	ldr	r0, [pc, #248]	@ (80034c0 <SecuanciaInicio+0x17c>)
 80033c8:	f7fe f9be 	bl	8001748 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7ff fcdb 	bl	8002d88 <SSD1306_PosCom>
	  SSD1306_WriteString("  ! LIESE LAB 2024 ! ");
 80033d2:	483d      	ldr	r0, [pc, #244]	@ (80034c8 <SecuanciaInicio+0x184>)
 80033d4:	f7fe fbd8 	bl	8001b88 <SSD1306_WriteString>
	  I2C_delay(2000000);
 80033d8:	483c      	ldr	r0, [pc, #240]	@ (80034cc <SecuanciaInicio+0x188>)
 80033da:	f7fe f84f 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 80033de:	23b3      	movs	r3, #179	@ 0xb3
 80033e0:	2200      	movs	r2, #0
 80033e2:	213c      	movs	r1, #60	@ 0x3c
 80033e4:	4836      	ldr	r0, [pc, #216]	@ (80034c0 <SecuanciaInicio+0x17c>)
 80033e6:	f7fe f9af 	bl	8001748 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7ff fccc 	bl	8002d88 <SSD1306_PosCom>
	  SSD1306_WriteString("                                ");
 80033f0:	4837      	ldr	r0, [pc, #220]	@ (80034d0 <SecuanciaInicio+0x18c>)
 80033f2:	f7fe fbc9 	bl	8001b88 <SSD1306_WriteString>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 80033f6:	23b3      	movs	r3, #179	@ 0xb3
 80033f8:	2200      	movs	r2, #0
 80033fa:	213c      	movs	r1, #60	@ 0x3c
 80033fc:	4830      	ldr	r0, [pc, #192]	@ (80034c0 <SecuanciaInicio+0x17c>)
 80033fe:	f7fe f9a3 	bl	8001748 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 8003402:	2000      	movs	r0, #0
 8003404:	f7ff fcc0 	bl	8002d88 <SSD1306_PosCom>
	  SSD1306_WriteString("! TELEMETRY SYSTEM !");
 8003408:	4832      	ldr	r0, [pc, #200]	@ (80034d4 <SecuanciaInicio+0x190>)
 800340a:	f7fe fbbd 	bl	8001b88 <SSD1306_WriteString>
	  I2C_delay(2000000);
 800340e:	482f      	ldr	r0, [pc, #188]	@ (80034cc <SecuanciaInicio+0x188>)
 8003410:	f7fe f834 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8003414:	23b5      	movs	r3, #181	@ 0xb5
 8003416:	2200      	movs	r2, #0
 8003418:	213c      	movs	r1, #60	@ 0x3c
 800341a:	4829      	ldr	r0, [pc, #164]	@ (80034c0 <SecuanciaInicio+0x17c>)
 800341c:	f7fe f994 	bl	8001748 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff fcb1 	bl	8002d88 <SSD1306_PosCom>
	  SSD1306_WriteString("                                ");
 8003426:	482a      	ldr	r0, [pc, #168]	@ (80034d0 <SecuanciaInicio+0x18c>)
 8003428:	f7fe fbae 	bl	8001b88 <SSD1306_WriteString>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 800342c:	23b5      	movs	r3, #181	@ 0xb5
 800342e:	2200      	movs	r2, #0
 8003430:	213c      	movs	r1, #60	@ 0x3c
 8003432:	4823      	ldr	r0, [pc, #140]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003434:	f7fe f988 	bl	8001748 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 8003438:	2000      	movs	r0, #0
 800343a:	f7ff fca5 	bl	8002d88 <SSD1306_PosCom>
	  SSD1306_WriteString("  ! SCANNER OBDII ! ");
 800343e:	4826      	ldr	r0, [pc, #152]	@ (80034d8 <SecuanciaInicio+0x194>)
 8003440:	f7fe fba2 	bl	8001b88 <SSD1306_WriteString>
	  I2C_delay(2500000);
 8003444:	4825      	ldr	r0, [pc, #148]	@ (80034dc <SecuanciaInicio+0x198>)
 8003446:	f7fe f819 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA7);  // Set normal display mode (A6 = normal, A7 = inverted)
 800344a:	23a7      	movs	r3, #167	@ 0xa7
 800344c:	2200      	movs	r2, #0
 800344e:	213c      	movs	r1, #60	@ 0x3c
 8003450:	481b      	ldr	r0, [pc, #108]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003452:	f7fe f979 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8003456:	481b      	ldr	r0, [pc, #108]	@ (80034c4 <SecuanciaInicio+0x180>)
 8003458:	f7fe f810 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 800345c:	23a6      	movs	r3, #166	@ 0xa6
 800345e:	2200      	movs	r2, #0
 8003460:	213c      	movs	r1, #60	@ 0x3c
 8003462:	4817      	ldr	r0, [pc, #92]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003464:	f7fe f970 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8003468:	4816      	ldr	r0, [pc, #88]	@ (80034c4 <SecuanciaInicio+0x180>)
 800346a:	f7fe f807 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA7);  // Set normal display mode (A6 = normal, A7 = inverted)
 800346e:	23a7      	movs	r3, #167	@ 0xa7
 8003470:	2200      	movs	r2, #0
 8003472:	213c      	movs	r1, #60	@ 0x3c
 8003474:	4812      	ldr	r0, [pc, #72]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003476:	f7fe f967 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 800347a:	4812      	ldr	r0, [pc, #72]	@ (80034c4 <SecuanciaInicio+0x180>)
 800347c:	f7fd fffe 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 8003480:	23a6      	movs	r3, #166	@ 0xa6
 8003482:	2200      	movs	r2, #0
 8003484:	213c      	movs	r1, #60	@ 0x3c
 8003486:	480e      	ldr	r0, [pc, #56]	@ (80034c0 <SecuanciaInicio+0x17c>)
 8003488:	f7fe f95e 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 800348c:	480d      	ldr	r0, [pc, #52]	@ (80034c4 <SecuanciaInicio+0x180>)
 800348e:	f7fd fff5 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA7);  // Set normal display mode (A6 = normal, A7 = inverted)
 8003492:	23a7      	movs	r3, #167	@ 0xa7
 8003494:	2200      	movs	r2, #0
 8003496:	213c      	movs	r1, #60	@ 0x3c
 8003498:	4809      	ldr	r0, [pc, #36]	@ (80034c0 <SecuanciaInicio+0x17c>)
 800349a:	f7fe f955 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 800349e:	4809      	ldr	r0, [pc, #36]	@ (80034c4 <SecuanciaInicio+0x180>)
 80034a0:	f7fd ffec 	bl	800147c <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 80034a4:	23a6      	movs	r3, #166	@ 0xa6
 80034a6:	2200      	movs	r2, #0
 80034a8:	213c      	movs	r1, #60	@ 0x3c
 80034aa:	4805      	ldr	r0, [pc, #20]	@ (80034c0 <SecuanciaInicio+0x17c>)
 80034ac:	f7fe f94c 	bl	8001748 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80034b0:	4804      	ldr	r0, [pc, #16]	@ (80034c4 <SecuanciaInicio+0x180>)
 80034b2:	f7fd ffe3 	bl	800147c <I2C_delay>
	  SSD1306_Clear();
 80034b6:	f7ff fb8b 	bl	8002bd0 <SSD1306_Clear>
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40005c00 	.word	0x40005c00
 80034c4:	000f4240 	.word	0x000f4240
 80034c8:	080043f4 	.word	0x080043f4
 80034cc:	001e8480 	.word	0x001e8480
 80034d0:	0800440c 	.word	0x0800440c
 80034d4:	08004394 	.word	0x08004394
 80034d8:	08004430 	.word	0x08004430
 80034dc:	002625a0 	.word	0x002625a0

080034e0 <delay>:


void delay(uint32_t n)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	while(n--);
 80034e8:	bf00      	nop
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1e5a      	subs	r2, r3, #1
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1fa      	bne.n	80034ea <delay+0xa>
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler(){
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(CAN1_RX0_IRQn);
 8003508:	2014      	movs	r0, #20
 800350a:	f7fe fa83 	bl	8001a14 <__NVIC_ClearPendingIRQ>
	CAN1_Rx0_FIFOx (CAN1, FIFOmailBox0);
 800350e:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <CAN1_RX0_IRQHandler+0x3c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	480b      	ldr	r0, [pc, #44]	@ (8003544 <CAN1_RX0_IRQHandler+0x40>)
 8003516:	f7fd fd76 	bl	8001006 <CAN1_Rx0_FIFOx>
	receivedData0_L = CAN1->sFIFOMailBox[0].RDLR;
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <CAN1_RX0_IRQHandler+0x40>)
 800351c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8003520:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <CAN1_RX0_IRQHandler+0x44>)
 8003522:	6013      	str	r3, [r2, #0]
	receivedData0_H = CAN1->sFIFOMailBox[0].RDHR;
 8003524:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <CAN1_RX0_IRQHandler+0x40>)
 8003526:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800352a:	4a08      	ldr	r2, [pc, #32]	@ (800354c <CAN1_RX0_IRQHandler+0x48>)
 800352c:	6013      	str	r3, [r2, #0]
    PID = (receivedData0_L & 0x00FF0000) >> 16;
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <CAN1_RX0_IRQHandler+0x44>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <CAN1_RX0_IRQHandler+0x4c>)
 8003538:	701a      	strb	r2, [r3, #0]
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200001bc 	.word	0x200001bc
 8003544:	40006400 	.word	0x40006400
 8003548:	20000198 	.word	0x20000198
 800354c:	2000019c 	.word	0x2000019c
 8003550:	200001a8 	.word	0x200001a8

08003554 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(){
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
     NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 8003558:	2015      	movs	r0, #21
 800355a:	f7fe fa5b 	bl	8001a14 <__NVIC_ClearPendingIRQ>
     CAN1_Rx1_FIFOx (CAN1, FIFOmailBox1);
 800355e:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <CAN1_RX1_IRQHandler+0x3c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4619      	mov	r1, r3
 8003564:	480b      	ldr	r0, [pc, #44]	@ (8003594 <CAN1_RX1_IRQHandler+0x40>)
 8003566:	f7fd fdcb 	bl	8001100 <CAN1_Rx1_FIFOx>
     receivedData1_L = CAN1->sFIFOMailBox[1].RDLR;
 800356a:	4b0a      	ldr	r3, [pc, #40]	@ (8003594 <CAN1_RX1_IRQHandler+0x40>)
 800356c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8003570:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <CAN1_RX1_IRQHandler+0x44>)
 8003572:	6013      	str	r3, [r2, #0]
     receivedData1_H = CAN1->sFIFOMailBox[1].RDHR;
 8003574:	4b07      	ldr	r3, [pc, #28]	@ (8003594 <CAN1_RX1_IRQHandler+0x40>)
 8003576:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800357a:	4a08      	ldr	r2, [pc, #32]	@ (800359c <CAN1_RX1_IRQHandler+0x48>)
 800357c:	6013      	str	r3, [r2, #0]
     PID = (receivedData1_L & 0x00FF0000) >> 16;
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <CAN1_RX1_IRQHandler+0x44>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <CAN1_RX1_IRQHandler+0x4c>)
 8003588:	701a      	strb	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200001c0 	.word	0x200001c0
 8003594:	40006400 	.word	0x40006400
 8003598:	200001a0 	.word	0x200001a0
 800359c:	200001a4 	.word	0x200001a4
 80035a0:	200001a8 	.word	0x200001a8

080035a4 <sendMessage_http_field1>:
         //   sendStringUARTx(USART3, "Comando no válido\r\n\0");
            break;
    }
}

void sendMessage_http_field1(uint16_t fieldValue){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b09c      	sub	sp, #112	@ 0x70
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
    sendStringUARTx(USART3,"AT+QICSGP=1,1,\"internet.itelcel.com\",\"webgprs\",\"webgprs2002\",1");
 80035ae:	4922      	ldr	r1, [pc, #136]	@ (8003638 <sendMessage_http_field1+0x94>)
 80035b0:	4822      	ldr	r0, [pc, #136]	@ (800363c <sendMessage_http_field1+0x98>)
 80035b2:	f7fe f9f9 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 80035b6:	4822      	ldr	r0, [pc, #136]	@ (8003640 <sendMessage_http_field1+0x9c>)
 80035b8:	f7ff ff92 	bl	80034e0 <delay>
    sendStringUARTx(USART3, "AT+QIACT=1\r\n\0");
 80035bc:	4921      	ldr	r1, [pc, #132]	@ (8003644 <sendMessage_http_field1+0xa0>)
 80035be:	481f      	ldr	r0, [pc, #124]	@ (800363c <sendMessage_http_field1+0x98>)
 80035c0:	f7fe f9f2 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 80035c4:	481e      	ldr	r0, [pc, #120]	@ (8003640 <sendMessage_http_field1+0x9c>)
 80035c6:	f7ff ff8b 	bl	80034e0 <delay>
    sendStringUARTx(USART3, "AT+QIACT?\r\n\0");
 80035ca:	491f      	ldr	r1, [pc, #124]	@ (8003648 <sendMessage_http_field1+0xa4>)
 80035cc:	481b      	ldr	r0, [pc, #108]	@ (800363c <sendMessage_http_field1+0x98>)
 80035ce:	f7fe f9eb 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 80035d2:	481b      	ldr	r0, [pc, #108]	@ (8003640 <sendMessage_http_field1+0x9c>)
 80035d4:	f7ff ff84 	bl	80034e0 <delay>
    sendStringUARTx(USART3, "AT+QHTTPCFG=\"contextid\",1\r\n\0");
 80035d8:	491c      	ldr	r1, [pc, #112]	@ (800364c <sendMessage_http_field1+0xa8>)
 80035da:	4818      	ldr	r0, [pc, #96]	@ (800363c <sendMessage_http_field1+0x98>)
 80035dc:	f7fe f9e4 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 80035e0:	4817      	ldr	r0, [pc, #92]	@ (8003640 <sendMessage_http_field1+0x9c>)
 80035e2:	f7ff ff7d 	bl	80034e0 <delay>
    sendStringUARTx(USART3, "AT+QHTTPURL=71,30\r\n\0");
 80035e6:	491a      	ldr	r1, [pc, #104]	@ (8003650 <sendMessage_http_field1+0xac>)
 80035e8:	4814      	ldr	r0, [pc, #80]	@ (800363c <sendMessage_http_field1+0x98>)
 80035ea:	f7fe f9dd 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 80035ee:	4814      	ldr	r0, [pc, #80]	@ (8003640 <sendMessage_http_field1+0x9c>)
 80035f0:	f7ff ff76 	bl	80034e0 <delay>
    char url[100];  // Asegúrate de que el tamaño sea adecuado
    snprintf(url, sizeof(url), "https://api.thingspeak.com/update?api_key=D2SHDYLUTSW1PFRW&field1=%d\r\n\0", fieldValue);
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	f107 000c 	add.w	r0, r7, #12
 80035fa:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <sendMessage_http_field1+0xb0>)
 80035fc:	2164      	movs	r1, #100	@ 0x64
 80035fe:	f000 f9f1 	bl	80039e4 <sniprintf>
    sendStringUARTx(USART3, url);
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	4619      	mov	r1, r3
 8003608:	480c      	ldr	r0, [pc, #48]	@ (800363c <sendMessage_http_field1+0x98>)
 800360a:	f7fe f9cd 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 800360e:	480c      	ldr	r0, [pc, #48]	@ (8003640 <sendMessage_http_field1+0x9c>)
 8003610:	f7ff ff66 	bl	80034e0 <delay>
    sendStringUARTx(USART3, "AT+QHTTPGET=15\r\n\0");
 8003614:	4910      	ldr	r1, [pc, #64]	@ (8003658 <sendMessage_http_field1+0xb4>)
 8003616:	4809      	ldr	r0, [pc, #36]	@ (800363c <sendMessage_http_field1+0x98>)
 8003618:	f7fe f9c6 	bl	80019a8 <sendStringUARTx>
    delay(200000);
 800361c:	4808      	ldr	r0, [pc, #32]	@ (8003640 <sendMessage_http_field1+0x9c>)
 800361e:	f7ff ff5f 	bl	80034e0 <delay>
    sendStringUARTx(USART3, "AT+QHTTPGET=15\r\n\0");
 8003622:	490d      	ldr	r1, [pc, #52]	@ (8003658 <sendMessage_http_field1+0xb4>)
 8003624:	4805      	ldr	r0, [pc, #20]	@ (800363c <sendMessage_http_field1+0x98>)
 8003626:	f7fe f9bf 	bl	80019a8 <sendStringUARTx>
   delay(200000);
 800362a:	4805      	ldr	r0, [pc, #20]	@ (8003640 <sendMessage_http_field1+0x9c>)
 800362c:	f7ff ff58 	bl	80034e0 <delay>
}
 8003630:	bf00      	nop
 8003632:	3770      	adds	r7, #112	@ 0x70
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	08004448 	.word	0x08004448
 800363c:	40004800 	.word	0x40004800
 8003640:	00030d40 	.word	0x00030d40
 8003644:	08004488 	.word	0x08004488
 8003648:	08004498 	.word	0x08004498
 800364c:	080044a8 	.word	0x080044a8
 8003650:	080044c8 	.word	0x080044c8
 8003654:	080044e0 	.word	0x080044e0
 8003658:	08004528 	.word	0x08004528

0800365c <sendMessage_http_field4>:


/* *****************************************************************************
 * Función para enviar datos a través de HTTP con el valor del campo 4
 * *****************************************************************************/
void sendMessage_http_field4(uint16_t fieldValue) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b09c      	sub	sp, #112	@ 0x70
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	80fb      	strh	r3, [r7, #6]
    sendStringUARTx(USART3, "AT+QICSGP=1,1,\"internet.itelcel.com\",\"webgprs\",\"webgprs2002\",1");
 8003666:	4922      	ldr	r1, [pc, #136]	@ (80036f0 <sendMessage_http_field4+0x94>)
 8003668:	4822      	ldr	r0, [pc, #136]	@ (80036f4 <sendMessage_http_field4+0x98>)
 800366a:	f7fe f99d 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 800366e:	4822      	ldr	r0, [pc, #136]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 8003670:	f7ff ff36 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+QIACT=1\r\n\0");
 8003674:	4921      	ldr	r1, [pc, #132]	@ (80036fc <sendMessage_http_field4+0xa0>)
 8003676:	481f      	ldr	r0, [pc, #124]	@ (80036f4 <sendMessage_http_field4+0x98>)
 8003678:	f7fe f996 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 800367c:	481e      	ldr	r0, [pc, #120]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 800367e:	f7ff ff2f 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+QIACT?\r\n\0");
 8003682:	491f      	ldr	r1, [pc, #124]	@ (8003700 <sendMessage_http_field4+0xa4>)
 8003684:	481b      	ldr	r0, [pc, #108]	@ (80036f4 <sendMessage_http_field4+0x98>)
 8003686:	f7fe f98f 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 800368a:	481b      	ldr	r0, [pc, #108]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 800368c:	f7ff ff28 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+QHTTPCFG=\"contextid\",1\r\n\0");
 8003690:	491c      	ldr	r1, [pc, #112]	@ (8003704 <sendMessage_http_field4+0xa8>)
 8003692:	4818      	ldr	r0, [pc, #96]	@ (80036f4 <sendMessage_http_field4+0x98>)
 8003694:	f7fe f988 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 8003698:	4817      	ldr	r0, [pc, #92]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 800369a:	f7ff ff21 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+QHTTPURL=71,30\r\n\0");
 800369e:	491a      	ldr	r1, [pc, #104]	@ (8003708 <sendMessage_http_field4+0xac>)
 80036a0:	4814      	ldr	r0, [pc, #80]	@ (80036f4 <sendMessage_http_field4+0x98>)
 80036a2:	f7fe f981 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 80036a6:	4814      	ldr	r0, [pc, #80]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 80036a8:	f7ff ff1a 	bl	80034e0 <delay>

    char url[100];
    snprintf(url, sizeof(url), "https://api.thingspeak.com/update?api_key=D2SHDYLUTSW1PFRW&field4=%d\r\n\0", fieldValue);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	f107 000c 	add.w	r0, r7, #12
 80036b2:	4a16      	ldr	r2, [pc, #88]	@ (800370c <sendMessage_http_field4+0xb0>)
 80036b4:	2164      	movs	r1, #100	@ 0x64
 80036b6:	f000 f995 	bl	80039e4 <sniprintf>
    sendStringUARTx(USART3, url);
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	4619      	mov	r1, r3
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <sendMessage_http_field4+0x98>)
 80036c2:	f7fe f971 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 80036c6:	480c      	ldr	r0, [pc, #48]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 80036c8:	f7ff ff0a 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+QHTTPGET=30\r\n\0");
 80036cc:	4910      	ldr	r1, [pc, #64]	@ (8003710 <sendMessage_http_field4+0xb4>)
 80036ce:	4809      	ldr	r0, [pc, #36]	@ (80036f4 <sendMessage_http_field4+0x98>)
 80036d0:	f7fe f96a 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 80036d4:	4808      	ldr	r0, [pc, #32]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 80036d6:	f7ff ff03 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+QHTTPGET=30\r\n\0");
 80036da:	490d      	ldr	r1, [pc, #52]	@ (8003710 <sendMessage_http_field4+0xb4>)
 80036dc:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <sendMessage_http_field4+0x98>)
 80036de:	f7fe f963 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 80036e2:	4805      	ldr	r0, [pc, #20]	@ (80036f8 <sendMessage_http_field4+0x9c>)
 80036e4:	f7ff fefc 	bl	80034e0 <delay>
}
 80036e8:	bf00      	nop
 80036ea:	3770      	adds	r7, #112	@ 0x70
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	08004448 	.word	0x08004448
 80036f4:	40004800 	.word	0x40004800
 80036f8:	000186a0 	.word	0x000186a0
 80036fc:	08004488 	.word	0x08004488
 8003700:	08004498 	.word	0x08004498
 8003704:	080044a8 	.word	0x080044a8
 8003708:	080044c8 	.word	0x080044c8
 800370c:	080045e0 	.word	0x080045e0
 8003710:	08004584 	.word	0x08004584

08003714 <sendMessage_Cell>:


/* *****************************************************************************
 * Función para enviar datos a través de HTTP con el valor del campo 4
 * *****************************************************************************/
void sendMessage_Cell(int number) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b09c      	sub	sp, #112	@ 0x70
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    char message[100]; // Buffer para el mensaje
    sprintf(message, "Pruebas 27/11/24 GSM/STM32L452RE %d\r\n", number);
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4916      	ldr	r1, [pc, #88]	@ (800377c <sendMessage_Cell+0x68>)
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f991 	bl	8003a4c <siprintf>

    sendStringUARTx(USART3, "AT+CMGF=1\r\n\0");
 800372a:	4915      	ldr	r1, [pc, #84]	@ (8003780 <sendMessage_Cell+0x6c>)
 800372c:	4815      	ldr	r0, [pc, #84]	@ (8003784 <sendMessage_Cell+0x70>)
 800372e:	f7fe f93b 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 8003732:	4815      	ldr	r0, [pc, #84]	@ (8003788 <sendMessage_Cell+0x74>)
 8003734:	f7ff fed4 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+CSCS=\"GSM\"\r\n\0");
 8003738:	4914      	ldr	r1, [pc, #80]	@ (800378c <sendMessage_Cell+0x78>)
 800373a:	4812      	ldr	r0, [pc, #72]	@ (8003784 <sendMessage_Cell+0x70>)
 800373c:	f7fe f934 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 8003740:	4811      	ldr	r0, [pc, #68]	@ (8003788 <sendMessage_Cell+0x74>)
 8003742:	f7ff fecd 	bl	80034e0 <delay>

    sendStringUARTx(USART3, "AT+CMGS=\"5617951874\"\r\n\0");
 8003746:	4912      	ldr	r1, [pc, #72]	@ (8003790 <sendMessage_Cell+0x7c>)
 8003748:	480e      	ldr	r0, [pc, #56]	@ (8003784 <sendMessage_Cell+0x70>)
 800374a:	f7fe f92d 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 800374e:	480e      	ldr	r0, [pc, #56]	@ (8003788 <sendMessage_Cell+0x74>)
 8003750:	f7ff fec6 	bl	80034e0 <delay>

    sendStringUARTx(USART3, message); // Envía el mensaje con el número
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	4619      	mov	r1, r3
 800375a:	480a      	ldr	r0, [pc, #40]	@ (8003784 <sendMessage_Cell+0x70>)
 800375c:	f7fe f924 	bl	80019a8 <sendStringUARTx>
    delay(100000);
 8003760:	4809      	ldr	r0, [pc, #36]	@ (8003788 <sendMessage_Cell+0x74>)
 8003762:	f7ff febd 	bl	80034e0 <delay>

    sendByteUARTx(USART3, 0x1A); // Carácter Ctrl+Z para finalizar el mensaje SMS
 8003766:	211a      	movs	r1, #26
 8003768:	4806      	ldr	r0, [pc, #24]	@ (8003784 <sendMessage_Cell+0x70>)
 800376a:	f7fe f93a 	bl	80019e2 <sendByteUARTx>
    delay(100000);
 800376e:	4806      	ldr	r0, [pc, #24]	@ (8003788 <sendMessage_Cell+0x74>)
 8003770:	f7ff feb6 	bl	80034e0 <delay>
}
 8003774:	bf00      	nop
 8003776:	3770      	adds	r7, #112	@ 0x70
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08004628 	.word	0x08004628
 8003780:	08004650 	.word	0x08004650
 8003784:	40004800 	.word	0x40004800
 8003788:	000186a0 	.word	0x000186a0
 800378c:	08004660 	.word	0x08004660
 8003790:	08004674 	.word	0x08004674

08003794 <Obdii_Message>:


/* *****************************************************************************
 * Función para enviar un mensaje OBD-II con un PID específico
 * *****************************************************************************/
void Obdii_Message(uint32_t Obdii_pid) {
 8003794:	b5b0      	push	{r4, r5, r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
    CAN_MailboxConfig(CAN1, false, 0x7DF, false, 0x0); // Configuración del buzón CAN
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	f240 72df 	movw	r2, #2015	@ 0x7df
 80037a6:	2100      	movs	r1, #0
 80037a8:	480b      	ldr	r0, [pc, #44]	@ (80037d8 <Obdii_Message+0x44>)
 80037aa:	f7fd fb04 	bl	8000db6 <CAN_MailboxConfig>
    CAN_SendData(CAN1, 8, Obdii_pid, 0x0);            // Enviar mensaje CAN
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	461c      	mov	r4, r3
 80037b4:	4615      	mov	r5, r2
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4622      	mov	r2, r4
 80037bc:	462b      	mov	r3, r5
 80037be:	2108      	movs	r1, #8
 80037c0:	4805      	ldr	r0, [pc, #20]	@ (80037d8 <Obdii_Message+0x44>)
 80037c2:	f7fd fb4f 	bl	8000e64 <CAN_SendData>
    CAN_RequestTransmission(CAN1, 0x0);               // Solicitar transmisión CAN
 80037c6:	2100      	movs	r1, #0
 80037c8:	4803      	ldr	r0, [pc, #12]	@ (80037d8 <Obdii_Message+0x44>)
 80037ca:	f7fd fbac 	bl	8000f26 <CAN_RequestTransmission>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bdb0      	pop	{r4, r5, r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40006400 	.word	0x40006400

080037dc <SSD1306_Refresh>:
    ByteC = (receivedData0_H & 0x0000FF00) >> 8;
    ByteD = (receivedData0_H  & 0x00FF0000) >> 16;
    Combustible = (ByteA * 100) / 255;
}

void SSD1306_Refresh (void){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
char buffer[10]; // Espacio para almacenar la representación en cadena
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 80037e2:	23b3      	movs	r3, #179	@ 0xb3
 80037e4:	2200      	movs	r2, #0
 80037e6:	213c      	movs	r1, #60	@ 0x3c
 80037e8:	4834      	ldr	r0, [pc, #208]	@ (80038bc <SSD1306_Refresh+0xe0>)
 80037ea:	f7fd ffad 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(80);
 80037ee:	2050      	movs	r0, #80	@ 0x50
 80037f0:	f7ff faca 	bl	8002d88 <SSD1306_PosCom>
SSD1306_WriteString("            ");
 80037f4:	4832      	ldr	r0, [pc, #200]	@ (80038c0 <SSD1306_Refresh+0xe4>)
 80037f6:	f7fe f9c7 	bl	8001b88 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 80037fa:	23b3      	movs	r3, #179	@ 0xb3
 80037fc:	2200      	movs	r2, #0
 80037fe:	213c      	movs	r1, #60	@ 0x3c
 8003800:	482e      	ldr	r0, [pc, #184]	@ (80038bc <SSD1306_Refresh+0xe0>)
 8003802:	f7fd ffa1 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(80);
 8003806:	2050      	movs	r0, #80	@ 0x50
 8003808:	f7ff fabe 	bl	8002d88 <SSD1306_PosCom>
sprintf(buffer, "%d", Vel_Km);
 800380c:	4b2d      	ldr	r3, [pc, #180]	@ (80038c4 <SSD1306_Refresh+0xe8>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	492d      	ldr	r1, [pc, #180]	@ (80038c8 <SSD1306_Refresh+0xec>)
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f919 	bl	8003a4c <siprintf>
SSD1306_WriteString(buffer); // Escribe la cadena en la pantalla OLED
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe f9b3 	bl	8001b88 <SSD1306_WriteString>
SSD1306_WriteString(" KM");
 8003822:	482a      	ldr	r0, [pc, #168]	@ (80038cc <SSD1306_Refresh+0xf0>)
 8003824:	f7fe f9b0 	bl	8001b88 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8003828:	23b5      	movs	r3, #181	@ 0xb5
 800382a:	2200      	movs	r2, #0
 800382c:	213c      	movs	r1, #60	@ 0x3c
 800382e:	4823      	ldr	r0, [pc, #140]	@ (80038bc <SSD1306_Refresh+0xe0>)
 8003830:	f7fd ff8a 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(50);
 8003834:	2032      	movs	r0, #50	@ 0x32
 8003836:	f7ff faa7 	bl	8002d88 <SSD1306_PosCom>
SSD1306_WriteString("               ");
 800383a:	4825      	ldr	r0, [pc, #148]	@ (80038d0 <SSD1306_Refresh+0xf4>)
 800383c:	f7fe f9a4 	bl	8001b88 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8003840:	23b5      	movs	r3, #181	@ 0xb5
 8003842:	2200      	movs	r2, #0
 8003844:	213c      	movs	r1, #60	@ 0x3c
 8003846:	481d      	ldr	r0, [pc, #116]	@ (80038bc <SSD1306_Refresh+0xe0>)
 8003848:	f7fd ff7e 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(50);
 800384c:	2032      	movs	r0, #50	@ 0x32
 800384e:	f7ff fa9b 	bl	8002d88 <SSD1306_PosCom>
sprintf(buffer, "%d", RPM_motor);
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <SSD1306_Refresh+0xf8>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	1d3b      	adds	r3, r7, #4
 8003858:	491b      	ldr	r1, [pc, #108]	@ (80038c8 <SSD1306_Refresh+0xec>)
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f8f6 	bl	8003a4c <siprintf>
SSD1306_WriteString(buffer); // Escribe la cadena en la pantalla OLED
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe f990 	bl	8001b88 <SSD1306_WriteString>
SSD1306_WriteString(" RPM");
 8003868:	481b      	ldr	r0, [pc, #108]	@ (80038d8 <SSD1306_Refresh+0xfc>)
 800386a:	f7fe f98d 	bl	8001b88 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 800386e:	23b7      	movs	r3, #183	@ 0xb7
 8003870:	2200      	movs	r2, #0
 8003872:	213c      	movs	r1, #60	@ 0x3c
 8003874:	4811      	ldr	r0, [pc, #68]	@ (80038bc <SSD1306_Refresh+0xe0>)
 8003876:	f7fd ff67 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(70);
 800387a:	2046      	movs	r0, #70	@ 0x46
 800387c:	f7ff fa84 	bl	8002d88 <SSD1306_PosCom>
SSD1306_WriteString("              ");
 8003880:	4816      	ldr	r0, [pc, #88]	@ (80038dc <SSD1306_Refresh+0x100>)
 8003882:	f7fe f981 	bl	8001b88 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 8003886:	23b7      	movs	r3, #183	@ 0xb7
 8003888:	2200      	movs	r2, #0
 800388a:	213c      	movs	r1, #60	@ 0x3c
 800388c:	480b      	ldr	r0, [pc, #44]	@ (80038bc <SSD1306_Refresh+0xe0>)
 800388e:	f7fd ff5b 	bl	8001748 <I2C_Tx_2Bytes>
SSD1306_PosCom(70);
 8003892:	2046      	movs	r0, #70	@ 0x46
 8003894:	f7ff fa78 	bl	8002d88 <SSD1306_PosCom>
sprintf(buffer, "%d", Combustible);
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <SSD1306_Refresh+0x104>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	490a      	ldr	r1, [pc, #40]	@ (80038c8 <SSD1306_Refresh+0xec>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f8d3 	bl	8003a4c <siprintf>
SSD1306_WriteString(buffer); // Escribe la cadena en la pantalla OLED
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe f96d 	bl	8001b88 <SSD1306_WriteString>
SSD1306_WriteString("  T");
 80038ae:	480d      	ldr	r0, [pc, #52]	@ (80038e4 <SSD1306_Refresh+0x108>)
 80038b0:	f7fe f96a 	bl	8001b88 <SSD1306_WriteString>
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40005c00 	.word	0x40005c00
 80038c0:	0800468c 	.word	0x0800468c
 80038c4:	200001ac 	.word	0x200001ac
 80038c8:	0800469c 	.word	0x0800469c
 80038cc:	080046a0 	.word	0x080046a0
 80038d0:	080046a4 	.word	0x080046a4
 80038d4:	200001b0 	.word	0x200001b0
 80038d8:	080046b4 	.word	0x080046b4
 80038dc:	080046bc 	.word	0x080046bc
 80038e0:	200001b4 	.word	0x200001b4
 80038e4:	080046cc 	.word	0x080046cc

080038e8 <Send_Telemetry>:


void Send_Telemetry (void){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
    sendMessage_http_field4(Combustible);
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <Send_Telemetry+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff feb2 	bl	800365c <sendMessage_http_field4>
    sendMessage_http_field3(Temp_liquido);
    delay(1000000);
    sendMessage_http_field4(Combustible);
    delay(1000000);
    */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200001b4 	.word	0x200001b4

08003900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <_sbrk+0x5c>)
 800390a:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <_sbrk+0x60>)
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003914:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800391c:	4b11      	ldr	r3, [pc, #68]	@ (8003964 <_sbrk+0x64>)
 800391e:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <_sbrk+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003930:	f000 f8ac 	bl	8003a8c <__errno>
 8003934:	4603      	mov	r3, r0
 8003936:	220c      	movs	r2, #12
 8003938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	e009      	b.n	8003954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003940:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003946:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <_sbrk+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <_sbrk+0x64>)
 8003950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20028000 	.word	0x20028000
 8003960:	00000400 	.word	0x00000400
 8003964:	200001c4 	.word	0x200001c4
 8003968:	20000310 	.word	0x20000310

0800396c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <SystemInit+0x20>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	4a05      	ldr	r2, [pc, #20]	@ (800398c <SystemInit+0x20>)
 8003978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800397c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003990:	480d      	ldr	r0, [pc, #52]	@ (80039c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003994:	f7ff ffea 	bl	800396c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003998:	480c      	ldr	r0, [pc, #48]	@ (80039cc <LoopForever+0x6>)
  ldr r1, =_edata
 800399a:	490d      	ldr	r1, [pc, #52]	@ (80039d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <LoopForever+0xe>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a0:	e002      	b.n	80039a8 <LoopCopyDataInit>

080039a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a6:	3304      	adds	r3, #4

080039a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039ac:	d3f9      	bcc.n	80039a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ae:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039b0:	4c0a      	ldr	r4, [pc, #40]	@ (80039dc <LoopForever+0x16>)
  movs r3, #0
 80039b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b4:	e001      	b.n	80039ba <LoopFillZerobss>

080039b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b8:	3204      	adds	r2, #4

080039ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039bc:	d3fb      	bcc.n	80039b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039be:	f000 f86b 	bl	8003a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039c2:	f7ff fa4d 	bl	8002e60 <main>

080039c6 <LoopForever>:

LoopForever:
  b LoopForever
 80039c6:	e7fe      	b.n	80039c6 <LoopForever>
  ldr   r0, =_estack
 80039c8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80039cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d0:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80039d4:	08004714 	.word	0x08004714
  ldr r2, =_sbss
 80039d8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80039dc:	20000310 	.word	0x20000310

080039e0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039e0:	e7fe      	b.n	80039e0 <ADC1_IRQHandler>
	...

080039e4 <sniprintf>:
 80039e4:	b40c      	push	{r2, r3}
 80039e6:	b530      	push	{r4, r5, lr}
 80039e8:	4b17      	ldr	r3, [pc, #92]	@ (8003a48 <sniprintf+0x64>)
 80039ea:	1e0c      	subs	r4, r1, #0
 80039ec:	681d      	ldr	r5, [r3, #0]
 80039ee:	b09d      	sub	sp, #116	@ 0x74
 80039f0:	da08      	bge.n	8003a04 <sniprintf+0x20>
 80039f2:	238b      	movs	r3, #139	@ 0x8b
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	b01d      	add	sp, #116	@ 0x74
 80039fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a00:	b002      	add	sp, #8
 8003a02:	4770      	bx	lr
 8003a04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a0c:	bf14      	ite	ne
 8003a0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a12:	4623      	moveq	r3, r4
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	9307      	str	r3, [sp, #28]
 8003a18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a1c:	9002      	str	r0, [sp, #8]
 8003a1e:	9006      	str	r0, [sp, #24]
 8003a20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a26:	ab21      	add	r3, sp, #132	@ 0x84
 8003a28:	a902      	add	r1, sp, #8
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	f000 f9ad 	bl	8003d8c <_svfiprintf_r>
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	bfbc      	itt	lt
 8003a36:	238b      	movlt	r3, #139	@ 0x8b
 8003a38:	602b      	strlt	r3, [r5, #0]
 8003a3a:	2c00      	cmp	r4, #0
 8003a3c:	d0dd      	beq.n	80039fa <sniprintf+0x16>
 8003a3e:	9b02      	ldr	r3, [sp, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e7d9      	b.n	80039fa <sniprintf+0x16>
 8003a46:	bf00      	nop
 8003a48:	20000000 	.word	0x20000000

08003a4c <siprintf>:
 8003a4c:	b40e      	push	{r1, r2, r3}
 8003a4e:	b500      	push	{lr}
 8003a50:	b09c      	sub	sp, #112	@ 0x70
 8003a52:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a54:	9002      	str	r0, [sp, #8]
 8003a56:	9006      	str	r0, [sp, #24]
 8003a58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a5c:	4809      	ldr	r0, [pc, #36]	@ (8003a84 <siprintf+0x38>)
 8003a5e:	9107      	str	r1, [sp, #28]
 8003a60:	9104      	str	r1, [sp, #16]
 8003a62:	4909      	ldr	r1, [pc, #36]	@ (8003a88 <siprintf+0x3c>)
 8003a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a68:	9105      	str	r1, [sp, #20]
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	a902      	add	r1, sp, #8
 8003a70:	f000 f98c 	bl	8003d8c <_svfiprintf_r>
 8003a74:	9b02      	ldr	r3, [sp, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	b01c      	add	sp, #112	@ 0x70
 8003a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a80:	b003      	add	sp, #12
 8003a82:	4770      	bx	lr
 8003a84:	20000000 	.word	0x20000000
 8003a88:	ffff0208 	.word	0xffff0208

08003a8c <__errno>:
 8003a8c:	4b01      	ldr	r3, [pc, #4]	@ (8003a94 <__errno+0x8>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000

08003a98 <__libc_init_array>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad0 <__libc_init_array+0x38>)
 8003a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ad4 <__libc_init_array+0x3c>)
 8003a9e:	1b64      	subs	r4, r4, r5
 8003aa0:	10a4      	asrs	r4, r4, #2
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	42a6      	cmp	r6, r4
 8003aa6:	d109      	bne.n	8003abc <__libc_init_array+0x24>
 8003aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8003ad8 <__libc_init_array+0x40>)
 8003aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8003adc <__libc_init_array+0x44>)
 8003aac:	f000 fc66 	bl	800437c <_init>
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	2600      	movs	r6, #0
 8003ab6:	42a6      	cmp	r6, r4
 8003ab8:	d105      	bne.n	8003ac6 <__libc_init_array+0x2e>
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac0:	4798      	blx	r3
 8003ac2:	3601      	adds	r6, #1
 8003ac4:	e7ee      	b.n	8003aa4 <__libc_init_array+0xc>
 8003ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aca:	4798      	blx	r3
 8003acc:	3601      	adds	r6, #1
 8003ace:	e7f2      	b.n	8003ab6 <__libc_init_array+0x1e>
 8003ad0:	0800470c 	.word	0x0800470c
 8003ad4:	0800470c 	.word	0x0800470c
 8003ad8:	0800470c 	.word	0x0800470c
 8003adc:	08004710 	.word	0x08004710

08003ae0 <__retarget_lock_acquire_recursive>:
 8003ae0:	4770      	bx	lr

08003ae2 <__retarget_lock_release_recursive>:
 8003ae2:	4770      	bx	lr

08003ae4 <_free_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	d041      	beq.n	8003b70 <_free_r+0x8c>
 8003aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af0:	1f0c      	subs	r4, r1, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bfb8      	it	lt
 8003af6:	18e4      	addlt	r4, r4, r3
 8003af8:	f000 f8e0 	bl	8003cbc <__malloc_lock>
 8003afc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b74 <_free_r+0x90>)
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	b933      	cbnz	r3, 8003b10 <_free_r+0x2c>
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	6014      	str	r4, [r2, #0]
 8003b06:	4628      	mov	r0, r5
 8003b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b0c:	f000 b8dc 	b.w	8003cc8 <__malloc_unlock>
 8003b10:	42a3      	cmp	r3, r4
 8003b12:	d908      	bls.n	8003b26 <_free_r+0x42>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	1821      	adds	r1, r4, r0
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	bf01      	itttt	eq
 8003b1c:	6819      	ldreq	r1, [r3, #0]
 8003b1e:	685b      	ldreq	r3, [r3, #4]
 8003b20:	1809      	addeq	r1, r1, r0
 8003b22:	6021      	streq	r1, [r4, #0]
 8003b24:	e7ed      	b.n	8003b02 <_free_r+0x1e>
 8003b26:	461a      	mov	r2, r3
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b10b      	cbz	r3, 8003b30 <_free_r+0x4c>
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	d9fa      	bls.n	8003b26 <_free_r+0x42>
 8003b30:	6811      	ldr	r1, [r2, #0]
 8003b32:	1850      	adds	r0, r2, r1
 8003b34:	42a0      	cmp	r0, r4
 8003b36:	d10b      	bne.n	8003b50 <_free_r+0x6c>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	4401      	add	r1, r0
 8003b3c:	1850      	adds	r0, r2, r1
 8003b3e:	4283      	cmp	r3, r0
 8003b40:	6011      	str	r1, [r2, #0]
 8003b42:	d1e0      	bne.n	8003b06 <_free_r+0x22>
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	6053      	str	r3, [r2, #4]
 8003b4a:	4408      	add	r0, r1
 8003b4c:	6010      	str	r0, [r2, #0]
 8003b4e:	e7da      	b.n	8003b06 <_free_r+0x22>
 8003b50:	d902      	bls.n	8003b58 <_free_r+0x74>
 8003b52:	230c      	movs	r3, #12
 8003b54:	602b      	str	r3, [r5, #0]
 8003b56:	e7d6      	b.n	8003b06 <_free_r+0x22>
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	1821      	adds	r1, r4, r0
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	bf04      	itt	eq
 8003b60:	6819      	ldreq	r1, [r3, #0]
 8003b62:	685b      	ldreq	r3, [r3, #4]
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	bf04      	itt	eq
 8003b68:	1809      	addeq	r1, r1, r0
 8003b6a:	6021      	streq	r1, [r4, #0]
 8003b6c:	6054      	str	r4, [r2, #4]
 8003b6e:	e7ca      	b.n	8003b06 <_free_r+0x22>
 8003b70:	bd38      	pop	{r3, r4, r5, pc}
 8003b72:	bf00      	nop
 8003b74:	2000030c 	.word	0x2000030c

08003b78 <sbrk_aligned>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4e0f      	ldr	r6, [pc, #60]	@ (8003bb8 <sbrk_aligned+0x40>)
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	6831      	ldr	r1, [r6, #0]
 8003b80:	4605      	mov	r5, r0
 8003b82:	b911      	cbnz	r1, 8003b8a <sbrk_aligned+0x12>
 8003b84:	f000 fba6 	bl	80042d4 <_sbrk_r>
 8003b88:	6030      	str	r0, [r6, #0]
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f000 fba1 	bl	80042d4 <_sbrk_r>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	d103      	bne.n	8003b9e <sbrk_aligned+0x26>
 8003b96:	f04f 34ff 	mov.w	r4, #4294967295
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	bd70      	pop	{r4, r5, r6, pc}
 8003b9e:	1cc4      	adds	r4, r0, #3
 8003ba0:	f024 0403 	bic.w	r4, r4, #3
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d0f8      	beq.n	8003b9a <sbrk_aligned+0x22>
 8003ba8:	1a21      	subs	r1, r4, r0
 8003baa:	4628      	mov	r0, r5
 8003bac:	f000 fb92 	bl	80042d4 <_sbrk_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d1f2      	bne.n	8003b9a <sbrk_aligned+0x22>
 8003bb4:	e7ef      	b.n	8003b96 <sbrk_aligned+0x1e>
 8003bb6:	bf00      	nop
 8003bb8:	20000308 	.word	0x20000308

08003bbc <_malloc_r>:
 8003bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc0:	1ccd      	adds	r5, r1, #3
 8003bc2:	f025 0503 	bic.w	r5, r5, #3
 8003bc6:	3508      	adds	r5, #8
 8003bc8:	2d0c      	cmp	r5, #12
 8003bca:	bf38      	it	cc
 8003bcc:	250c      	movcc	r5, #12
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	db01      	blt.n	8003bd8 <_malloc_r+0x1c>
 8003bd4:	42a9      	cmp	r1, r5
 8003bd6:	d904      	bls.n	8003be2 <_malloc_r+0x26>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	6033      	str	r3, [r6, #0]
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cb8 <_malloc_r+0xfc>
 8003be6:	f000 f869 	bl	8003cbc <__malloc_lock>
 8003bea:	f8d8 3000 	ldr.w	r3, [r8]
 8003bee:	461c      	mov	r4, r3
 8003bf0:	bb44      	cbnz	r4, 8003c44 <_malloc_r+0x88>
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f7ff ffbf 	bl	8003b78 <sbrk_aligned>
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	d158      	bne.n	8003cb2 <_malloc_r+0xf6>
 8003c00:	f8d8 4000 	ldr.w	r4, [r8]
 8003c04:	4627      	mov	r7, r4
 8003c06:	2f00      	cmp	r7, #0
 8003c08:	d143      	bne.n	8003c92 <_malloc_r+0xd6>
 8003c0a:	2c00      	cmp	r4, #0
 8003c0c:	d04b      	beq.n	8003ca6 <_malloc_r+0xea>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	4639      	mov	r1, r7
 8003c12:	4630      	mov	r0, r6
 8003c14:	eb04 0903 	add.w	r9, r4, r3
 8003c18:	f000 fb5c 	bl	80042d4 <_sbrk_r>
 8003c1c:	4581      	cmp	r9, r0
 8003c1e:	d142      	bne.n	8003ca6 <_malloc_r+0xea>
 8003c20:	6821      	ldr	r1, [r4, #0]
 8003c22:	1a6d      	subs	r5, r5, r1
 8003c24:	4629      	mov	r1, r5
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7ff ffa6 	bl	8003b78 <sbrk_aligned>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d03a      	beq.n	8003ca6 <_malloc_r+0xea>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	442b      	add	r3, r5
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	f8d8 3000 	ldr.w	r3, [r8]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	bb62      	cbnz	r2, 8003c98 <_malloc_r+0xdc>
 8003c3e:	f8c8 7000 	str.w	r7, [r8]
 8003c42:	e00f      	b.n	8003c64 <_malloc_r+0xa8>
 8003c44:	6822      	ldr	r2, [r4, #0]
 8003c46:	1b52      	subs	r2, r2, r5
 8003c48:	d420      	bmi.n	8003c8c <_malloc_r+0xd0>
 8003c4a:	2a0b      	cmp	r2, #11
 8003c4c:	d917      	bls.n	8003c7e <_malloc_r+0xc2>
 8003c4e:	1961      	adds	r1, r4, r5
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	6025      	str	r5, [r4, #0]
 8003c54:	bf18      	it	ne
 8003c56:	6059      	strne	r1, [r3, #4]
 8003c58:	6863      	ldr	r3, [r4, #4]
 8003c5a:	bf08      	it	eq
 8003c5c:	f8c8 1000 	streq.w	r1, [r8]
 8003c60:	5162      	str	r2, [r4, r5]
 8003c62:	604b      	str	r3, [r1, #4]
 8003c64:	4630      	mov	r0, r6
 8003c66:	f000 f82f 	bl	8003cc8 <__malloc_unlock>
 8003c6a:	f104 000b 	add.w	r0, r4, #11
 8003c6e:	1d23      	adds	r3, r4, #4
 8003c70:	f020 0007 	bic.w	r0, r0, #7
 8003c74:	1ac2      	subs	r2, r0, r3
 8003c76:	bf1c      	itt	ne
 8003c78:	1a1b      	subne	r3, r3, r0
 8003c7a:	50a3      	strne	r3, [r4, r2]
 8003c7c:	e7af      	b.n	8003bde <_malloc_r+0x22>
 8003c7e:	6862      	ldr	r2, [r4, #4]
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	bf0c      	ite	eq
 8003c84:	f8c8 2000 	streq.w	r2, [r8]
 8003c88:	605a      	strne	r2, [r3, #4]
 8003c8a:	e7eb      	b.n	8003c64 <_malloc_r+0xa8>
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	6864      	ldr	r4, [r4, #4]
 8003c90:	e7ae      	b.n	8003bf0 <_malloc_r+0x34>
 8003c92:	463c      	mov	r4, r7
 8003c94:	687f      	ldr	r7, [r7, #4]
 8003c96:	e7b6      	b.n	8003c06 <_malloc_r+0x4a>
 8003c98:	461a      	mov	r2, r3
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	d1fb      	bne.n	8003c98 <_malloc_r+0xdc>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6053      	str	r3, [r2, #4]
 8003ca4:	e7de      	b.n	8003c64 <_malloc_r+0xa8>
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	6033      	str	r3, [r6, #0]
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 f80c 	bl	8003cc8 <__malloc_unlock>
 8003cb0:	e794      	b.n	8003bdc <_malloc_r+0x20>
 8003cb2:	6005      	str	r5, [r0, #0]
 8003cb4:	e7d6      	b.n	8003c64 <_malloc_r+0xa8>
 8003cb6:	bf00      	nop
 8003cb8:	2000030c 	.word	0x2000030c

08003cbc <__malloc_lock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	@ (8003cc4 <__malloc_lock+0x8>)
 8003cbe:	f7ff bf0f 	b.w	8003ae0 <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	20000304 	.word	0x20000304

08003cc8 <__malloc_unlock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	@ (8003cd0 <__malloc_unlock+0x8>)
 8003cca:	f7ff bf0a 	b.w	8003ae2 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	20000304 	.word	0x20000304

08003cd4 <__ssputs_r>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	688e      	ldr	r6, [r1, #8]
 8003cda:	461f      	mov	r7, r3
 8003cdc:	42be      	cmp	r6, r7
 8003cde:	680b      	ldr	r3, [r1, #0]
 8003ce0:	4682      	mov	sl, r0
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4690      	mov	r8, r2
 8003ce6:	d82d      	bhi.n	8003d44 <__ssputs_r+0x70>
 8003ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cf0:	d026      	beq.n	8003d40 <__ssputs_r+0x6c>
 8003cf2:	6965      	ldr	r5, [r4, #20]
 8003cf4:	6909      	ldr	r1, [r1, #16]
 8003cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cfa:	eba3 0901 	sub.w	r9, r3, r1
 8003cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d02:	1c7b      	adds	r3, r7, #1
 8003d04:	444b      	add	r3, r9
 8003d06:	106d      	asrs	r5, r5, #1
 8003d08:	429d      	cmp	r5, r3
 8003d0a:	bf38      	it	cc
 8003d0c:	461d      	movcc	r5, r3
 8003d0e:	0553      	lsls	r3, r2, #21
 8003d10:	d527      	bpl.n	8003d62 <__ssputs_r+0x8e>
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7ff ff52 	bl	8003bbc <_malloc_r>
 8003d18:	4606      	mov	r6, r0
 8003d1a:	b360      	cbz	r0, 8003d76 <__ssputs_r+0xa2>
 8003d1c:	6921      	ldr	r1, [r4, #16]
 8003d1e:	464a      	mov	r2, r9
 8003d20:	f000 fae8 	bl	80042f4 <memcpy>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2e:	81a3      	strh	r3, [r4, #12]
 8003d30:	6126      	str	r6, [r4, #16]
 8003d32:	6165      	str	r5, [r4, #20]
 8003d34:	444e      	add	r6, r9
 8003d36:	eba5 0509 	sub.w	r5, r5, r9
 8003d3a:	6026      	str	r6, [r4, #0]
 8003d3c:	60a5      	str	r5, [r4, #8]
 8003d3e:	463e      	mov	r6, r7
 8003d40:	42be      	cmp	r6, r7
 8003d42:	d900      	bls.n	8003d46 <__ssputs_r+0x72>
 8003d44:	463e      	mov	r6, r7
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	4632      	mov	r2, r6
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	f000 faa8 	bl	80042a0 <memmove>
 8003d50:	68a3      	ldr	r3, [r4, #8]
 8003d52:	1b9b      	subs	r3, r3, r6
 8003d54:	60a3      	str	r3, [r4, #8]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	4433      	add	r3, r6
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d62:	462a      	mov	r2, r5
 8003d64:	f000 fad4 	bl	8004310 <_realloc_r>
 8003d68:	4606      	mov	r6, r0
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d1e0      	bne.n	8003d30 <__ssputs_r+0x5c>
 8003d6e:	6921      	ldr	r1, [r4, #16]
 8003d70:	4650      	mov	r0, sl
 8003d72:	f7ff feb7 	bl	8003ae4 <_free_r>
 8003d76:	230c      	movs	r3, #12
 8003d78:	f8ca 3000 	str.w	r3, [sl]
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d82:	81a3      	strh	r3, [r4, #12]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	e7e9      	b.n	8003d5e <__ssputs_r+0x8a>
	...

08003d8c <_svfiprintf_r>:
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	4698      	mov	r8, r3
 8003d92:	898b      	ldrh	r3, [r1, #12]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	b09d      	sub	sp, #116	@ 0x74
 8003d98:	4607      	mov	r7, r0
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	d510      	bpl.n	8003dc2 <_svfiprintf_r+0x36>
 8003da0:	690b      	ldr	r3, [r1, #16]
 8003da2:	b973      	cbnz	r3, 8003dc2 <_svfiprintf_r+0x36>
 8003da4:	2140      	movs	r1, #64	@ 0x40
 8003da6:	f7ff ff09 	bl	8003bbc <_malloc_r>
 8003daa:	6028      	str	r0, [r5, #0]
 8003dac:	6128      	str	r0, [r5, #16]
 8003dae:	b930      	cbnz	r0, 8003dbe <_svfiprintf_r+0x32>
 8003db0:	230c      	movs	r3, #12
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	b01d      	add	sp, #116	@ 0x74
 8003dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbe:	2340      	movs	r3, #64	@ 0x40
 8003dc0:	616b      	str	r3, [r5, #20]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd0:	2330      	movs	r3, #48	@ 0x30
 8003dd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f70 <_svfiprintf_r+0x1e4>
 8003dd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dda:	f04f 0901 	mov.w	r9, #1
 8003dde:	4623      	mov	r3, r4
 8003de0:	469a      	mov	sl, r3
 8003de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de6:	b10a      	cbz	r2, 8003dec <_svfiprintf_r+0x60>
 8003de8:	2a25      	cmp	r2, #37	@ 0x25
 8003dea:	d1f9      	bne.n	8003de0 <_svfiprintf_r+0x54>
 8003dec:	ebba 0b04 	subs.w	fp, sl, r4
 8003df0:	d00b      	beq.n	8003e0a <_svfiprintf_r+0x7e>
 8003df2:	465b      	mov	r3, fp
 8003df4:	4622      	mov	r2, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f7ff ff6b 	bl	8003cd4 <__ssputs_r>
 8003dfe:	3001      	adds	r0, #1
 8003e00:	f000 80a7 	beq.w	8003f52 <_svfiprintf_r+0x1c6>
 8003e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e06:	445a      	add	r2, fp
 8003e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 809f 	beq.w	8003f52 <_svfiprintf_r+0x1c6>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e1e:	f10a 0a01 	add.w	sl, sl, #1
 8003e22:	9304      	str	r3, [sp, #16]
 8003e24:	9307      	str	r3, [sp, #28]
 8003e26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e2c:	4654      	mov	r4, sl
 8003e2e:	2205      	movs	r2, #5
 8003e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e34:	484e      	ldr	r0, [pc, #312]	@ (8003f70 <_svfiprintf_r+0x1e4>)
 8003e36:	f7fc f9d3 	bl	80001e0 <memchr>
 8003e3a:	9a04      	ldr	r2, [sp, #16]
 8003e3c:	b9d8      	cbnz	r0, 8003e76 <_svfiprintf_r+0xea>
 8003e3e:	06d0      	lsls	r0, r2, #27
 8003e40:	bf44      	itt	mi
 8003e42:	2320      	movmi	r3, #32
 8003e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e48:	0711      	lsls	r1, r2, #28
 8003e4a:	bf44      	itt	mi
 8003e4c:	232b      	movmi	r3, #43	@ 0x2b
 8003e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e52:	f89a 3000 	ldrb.w	r3, [sl]
 8003e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e58:	d015      	beq.n	8003e86 <_svfiprintf_r+0xfa>
 8003e5a:	9a07      	ldr	r2, [sp, #28]
 8003e5c:	4654      	mov	r4, sl
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f04f 0c0a 	mov.w	ip, #10
 8003e64:	4621      	mov	r1, r4
 8003e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e6a:	3b30      	subs	r3, #48	@ 0x30
 8003e6c:	2b09      	cmp	r3, #9
 8003e6e:	d94b      	bls.n	8003f08 <_svfiprintf_r+0x17c>
 8003e70:	b1b0      	cbz	r0, 8003ea0 <_svfiprintf_r+0x114>
 8003e72:	9207      	str	r2, [sp, #28]
 8003e74:	e014      	b.n	8003ea0 <_svfiprintf_r+0x114>
 8003e76:	eba0 0308 	sub.w	r3, r0, r8
 8003e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	9304      	str	r3, [sp, #16]
 8003e82:	46a2      	mov	sl, r4
 8003e84:	e7d2      	b.n	8003e2c <_svfiprintf_r+0xa0>
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	1d19      	adds	r1, r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	9103      	str	r1, [sp, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfbb      	ittet	lt
 8003e92:	425b      	neglt	r3, r3
 8003e94:	f042 0202 	orrlt.w	r2, r2, #2
 8003e98:	9307      	strge	r3, [sp, #28]
 8003e9a:	9307      	strlt	r3, [sp, #28]
 8003e9c:	bfb8      	it	lt
 8003e9e:	9204      	strlt	r2, [sp, #16]
 8003ea0:	7823      	ldrb	r3, [r4, #0]
 8003ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ea4:	d10a      	bne.n	8003ebc <_svfiprintf_r+0x130>
 8003ea6:	7863      	ldrb	r3, [r4, #1]
 8003ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eaa:	d132      	bne.n	8003f12 <_svfiprintf_r+0x186>
 8003eac:	9b03      	ldr	r3, [sp, #12]
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	9203      	str	r2, [sp, #12]
 8003eb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eb8:	3402      	adds	r4, #2
 8003eba:	9305      	str	r3, [sp, #20]
 8003ebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f80 <_svfiprintf_r+0x1f4>
 8003ec0:	7821      	ldrb	r1, [r4, #0]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	f7fc f98b 	bl	80001e0 <memchr>
 8003eca:	b138      	cbz	r0, 8003edc <_svfiprintf_r+0x150>
 8003ecc:	9b04      	ldr	r3, [sp, #16]
 8003ece:	eba0 000a 	sub.w	r0, r0, sl
 8003ed2:	2240      	movs	r2, #64	@ 0x40
 8003ed4:	4082      	lsls	r2, r0
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	3401      	adds	r4, #1
 8003eda:	9304      	str	r3, [sp, #16]
 8003edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee0:	4824      	ldr	r0, [pc, #144]	@ (8003f74 <_svfiprintf_r+0x1e8>)
 8003ee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ee6:	2206      	movs	r2, #6
 8003ee8:	f7fc f97a 	bl	80001e0 <memchr>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d036      	beq.n	8003f5e <_svfiprintf_r+0x1d2>
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <_svfiprintf_r+0x1ec>)
 8003ef2:	bb1b      	cbnz	r3, 8003f3c <_svfiprintf_r+0x1b0>
 8003ef4:	9b03      	ldr	r3, [sp, #12]
 8003ef6:	3307      	adds	r3, #7
 8003ef8:	f023 0307 	bic.w	r3, r3, #7
 8003efc:	3308      	adds	r3, #8
 8003efe:	9303      	str	r3, [sp, #12]
 8003f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f02:	4433      	add	r3, r6
 8003f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f06:	e76a      	b.n	8003dde <_svfiprintf_r+0x52>
 8003f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	2001      	movs	r0, #1
 8003f10:	e7a8      	b.n	8003e64 <_svfiprintf_r+0xd8>
 8003f12:	2300      	movs	r3, #0
 8003f14:	3401      	adds	r4, #1
 8003f16:	9305      	str	r3, [sp, #20]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0c0a 	mov.w	ip, #10
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f24:	3a30      	subs	r2, #48	@ 0x30
 8003f26:	2a09      	cmp	r2, #9
 8003f28:	d903      	bls.n	8003f32 <_svfiprintf_r+0x1a6>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0c6      	beq.n	8003ebc <_svfiprintf_r+0x130>
 8003f2e:	9105      	str	r1, [sp, #20]
 8003f30:	e7c4      	b.n	8003ebc <_svfiprintf_r+0x130>
 8003f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f36:	4604      	mov	r4, r0
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e7f0      	b.n	8003f1e <_svfiprintf_r+0x192>
 8003f3c:	ab03      	add	r3, sp, #12
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	462a      	mov	r2, r5
 8003f42:	4b0e      	ldr	r3, [pc, #56]	@ (8003f7c <_svfiprintf_r+0x1f0>)
 8003f44:	a904      	add	r1, sp, #16
 8003f46:	4638      	mov	r0, r7
 8003f48:	f3af 8000 	nop.w
 8003f4c:	1c42      	adds	r2, r0, #1
 8003f4e:	4606      	mov	r6, r0
 8003f50:	d1d6      	bne.n	8003f00 <_svfiprintf_r+0x174>
 8003f52:	89ab      	ldrh	r3, [r5, #12]
 8003f54:	065b      	lsls	r3, r3, #25
 8003f56:	f53f af2d 	bmi.w	8003db4 <_svfiprintf_r+0x28>
 8003f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f5c:	e72c      	b.n	8003db8 <_svfiprintf_r+0x2c>
 8003f5e:	ab03      	add	r3, sp, #12
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	462a      	mov	r2, r5
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <_svfiprintf_r+0x1f0>)
 8003f66:	a904      	add	r1, sp, #16
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f000 f879 	bl	8004060 <_printf_i>
 8003f6e:	e7ed      	b.n	8003f4c <_svfiprintf_r+0x1c0>
 8003f70:	080046d0 	.word	0x080046d0
 8003f74:	080046da 	.word	0x080046da
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	08003cd5 	.word	0x08003cd5
 8003f80:	080046d6 	.word	0x080046d6

08003f84 <_printf_common>:
 8003f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	4616      	mov	r6, r2
 8003f8a:	4698      	mov	r8, r3
 8003f8c:	688a      	ldr	r2, [r1, #8]
 8003f8e:	690b      	ldr	r3, [r1, #16]
 8003f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f94:	4293      	cmp	r3, r2
 8003f96:	bfb8      	it	lt
 8003f98:	4613      	movlt	r3, r2
 8003f9a:	6033      	str	r3, [r6, #0]
 8003f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	b10a      	cbz	r2, 8003faa <_printf_common+0x26>
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	6033      	str	r3, [r6, #0]
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	0699      	lsls	r1, r3, #26
 8003fae:	bf42      	ittt	mi
 8003fb0:	6833      	ldrmi	r3, [r6, #0]
 8003fb2:	3302      	addmi	r3, #2
 8003fb4:	6033      	strmi	r3, [r6, #0]
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	f015 0506 	ands.w	r5, r5, #6
 8003fbc:	d106      	bne.n	8003fcc <_printf_common+0x48>
 8003fbe:	f104 0a19 	add.w	sl, r4, #25
 8003fc2:	68e3      	ldr	r3, [r4, #12]
 8003fc4:	6832      	ldr	r2, [r6, #0]
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	42ab      	cmp	r3, r5
 8003fca:	dc26      	bgt.n	800401a <_printf_common+0x96>
 8003fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fd0:	6822      	ldr	r2, [r4, #0]
 8003fd2:	3b00      	subs	r3, #0
 8003fd4:	bf18      	it	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	0692      	lsls	r2, r2, #26
 8003fda:	d42b      	bmi.n	8004034 <_printf_common+0xb0>
 8003fdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	47c8      	blx	r9
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d01e      	beq.n	8004028 <_printf_common+0xa4>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	6922      	ldr	r2, [r4, #16]
 8003fee:	f003 0306 	and.w	r3, r3, #6
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	bf02      	ittt	eq
 8003ff6:	68e5      	ldreq	r5, [r4, #12]
 8003ff8:	6833      	ldreq	r3, [r6, #0]
 8003ffa:	1aed      	subeq	r5, r5, r3
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	bf0c      	ite	eq
 8004000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004004:	2500      	movne	r5, #0
 8004006:	4293      	cmp	r3, r2
 8004008:	bfc4      	itt	gt
 800400a:	1a9b      	subgt	r3, r3, r2
 800400c:	18ed      	addgt	r5, r5, r3
 800400e:	2600      	movs	r6, #0
 8004010:	341a      	adds	r4, #26
 8004012:	42b5      	cmp	r5, r6
 8004014:	d11a      	bne.n	800404c <_printf_common+0xc8>
 8004016:	2000      	movs	r0, #0
 8004018:	e008      	b.n	800402c <_printf_common+0xa8>
 800401a:	2301      	movs	r3, #1
 800401c:	4652      	mov	r2, sl
 800401e:	4641      	mov	r1, r8
 8004020:	4638      	mov	r0, r7
 8004022:	47c8      	blx	r9
 8004024:	3001      	adds	r0, #1
 8004026:	d103      	bne.n	8004030 <_printf_common+0xac>
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004030:	3501      	adds	r5, #1
 8004032:	e7c6      	b.n	8003fc2 <_printf_common+0x3e>
 8004034:	18e1      	adds	r1, r4, r3
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	2030      	movs	r0, #48	@ 0x30
 800403a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800403e:	4422      	add	r2, r4
 8004040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004048:	3302      	adds	r3, #2
 800404a:	e7c7      	b.n	8003fdc <_printf_common+0x58>
 800404c:	2301      	movs	r3, #1
 800404e:	4622      	mov	r2, r4
 8004050:	4641      	mov	r1, r8
 8004052:	4638      	mov	r0, r7
 8004054:	47c8      	blx	r9
 8004056:	3001      	adds	r0, #1
 8004058:	d0e6      	beq.n	8004028 <_printf_common+0xa4>
 800405a:	3601      	adds	r6, #1
 800405c:	e7d9      	b.n	8004012 <_printf_common+0x8e>
	...

08004060 <_printf_i>:
 8004060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	7e0f      	ldrb	r7, [r1, #24]
 8004066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004068:	2f78      	cmp	r7, #120	@ 0x78
 800406a:	4691      	mov	r9, r2
 800406c:	4680      	mov	r8, r0
 800406e:	460c      	mov	r4, r1
 8004070:	469a      	mov	sl, r3
 8004072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004076:	d807      	bhi.n	8004088 <_printf_i+0x28>
 8004078:	2f62      	cmp	r7, #98	@ 0x62
 800407a:	d80a      	bhi.n	8004092 <_printf_i+0x32>
 800407c:	2f00      	cmp	r7, #0
 800407e:	f000 80d2 	beq.w	8004226 <_printf_i+0x1c6>
 8004082:	2f58      	cmp	r7, #88	@ 0x58
 8004084:	f000 80b9 	beq.w	80041fa <_printf_i+0x19a>
 8004088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800408c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004090:	e03a      	b.n	8004108 <_printf_i+0xa8>
 8004092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004096:	2b15      	cmp	r3, #21
 8004098:	d8f6      	bhi.n	8004088 <_printf_i+0x28>
 800409a:	a101      	add	r1, pc, #4	@ (adr r1, 80040a0 <_printf_i+0x40>)
 800409c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	0800410d 	.word	0x0800410d
 80040a8:	08004089 	.word	0x08004089
 80040ac:	08004089 	.word	0x08004089
 80040b0:	08004089 	.word	0x08004089
 80040b4:	08004089 	.word	0x08004089
 80040b8:	0800410d 	.word	0x0800410d
 80040bc:	08004089 	.word	0x08004089
 80040c0:	08004089 	.word	0x08004089
 80040c4:	08004089 	.word	0x08004089
 80040c8:	08004089 	.word	0x08004089
 80040cc:	0800420d 	.word	0x0800420d
 80040d0:	08004137 	.word	0x08004137
 80040d4:	080041c7 	.word	0x080041c7
 80040d8:	08004089 	.word	0x08004089
 80040dc:	08004089 	.word	0x08004089
 80040e0:	0800422f 	.word	0x0800422f
 80040e4:	08004089 	.word	0x08004089
 80040e8:	08004137 	.word	0x08004137
 80040ec:	08004089 	.word	0x08004089
 80040f0:	08004089 	.word	0x08004089
 80040f4:	080041cf 	.word	0x080041cf
 80040f8:	6833      	ldr	r3, [r6, #0]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6032      	str	r2, [r6, #0]
 8004100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004108:	2301      	movs	r3, #1
 800410a:	e09d      	b.n	8004248 <_printf_i+0x1e8>
 800410c:	6833      	ldr	r3, [r6, #0]
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	1d19      	adds	r1, r3, #4
 8004112:	6031      	str	r1, [r6, #0]
 8004114:	0606      	lsls	r6, r0, #24
 8004116:	d501      	bpl.n	800411c <_printf_i+0xbc>
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	e003      	b.n	8004124 <_printf_i+0xc4>
 800411c:	0645      	lsls	r5, r0, #25
 800411e:	d5fb      	bpl.n	8004118 <_printf_i+0xb8>
 8004120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004124:	2d00      	cmp	r5, #0
 8004126:	da03      	bge.n	8004130 <_printf_i+0xd0>
 8004128:	232d      	movs	r3, #45	@ 0x2d
 800412a:	426d      	negs	r5, r5
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004130:	4859      	ldr	r0, [pc, #356]	@ (8004298 <_printf_i+0x238>)
 8004132:	230a      	movs	r3, #10
 8004134:	e011      	b.n	800415a <_printf_i+0xfa>
 8004136:	6821      	ldr	r1, [r4, #0]
 8004138:	6833      	ldr	r3, [r6, #0]
 800413a:	0608      	lsls	r0, r1, #24
 800413c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004140:	d402      	bmi.n	8004148 <_printf_i+0xe8>
 8004142:	0649      	lsls	r1, r1, #25
 8004144:	bf48      	it	mi
 8004146:	b2ad      	uxthmi	r5, r5
 8004148:	2f6f      	cmp	r7, #111	@ 0x6f
 800414a:	4853      	ldr	r0, [pc, #332]	@ (8004298 <_printf_i+0x238>)
 800414c:	6033      	str	r3, [r6, #0]
 800414e:	bf14      	ite	ne
 8004150:	230a      	movne	r3, #10
 8004152:	2308      	moveq	r3, #8
 8004154:	2100      	movs	r1, #0
 8004156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800415a:	6866      	ldr	r6, [r4, #4]
 800415c:	60a6      	str	r6, [r4, #8]
 800415e:	2e00      	cmp	r6, #0
 8004160:	bfa2      	ittt	ge
 8004162:	6821      	ldrge	r1, [r4, #0]
 8004164:	f021 0104 	bicge.w	r1, r1, #4
 8004168:	6021      	strge	r1, [r4, #0]
 800416a:	b90d      	cbnz	r5, 8004170 <_printf_i+0x110>
 800416c:	2e00      	cmp	r6, #0
 800416e:	d04b      	beq.n	8004208 <_printf_i+0x1a8>
 8004170:	4616      	mov	r6, r2
 8004172:	fbb5 f1f3 	udiv	r1, r5, r3
 8004176:	fb03 5711 	mls	r7, r3, r1, r5
 800417a:	5dc7      	ldrb	r7, [r0, r7]
 800417c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004180:	462f      	mov	r7, r5
 8004182:	42bb      	cmp	r3, r7
 8004184:	460d      	mov	r5, r1
 8004186:	d9f4      	bls.n	8004172 <_printf_i+0x112>
 8004188:	2b08      	cmp	r3, #8
 800418a:	d10b      	bne.n	80041a4 <_printf_i+0x144>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	07df      	lsls	r7, r3, #31
 8004190:	d508      	bpl.n	80041a4 <_printf_i+0x144>
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	6861      	ldr	r1, [r4, #4]
 8004196:	4299      	cmp	r1, r3
 8004198:	bfde      	ittt	le
 800419a:	2330      	movle	r3, #48	@ 0x30
 800419c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041a4:	1b92      	subs	r2, r2, r6
 80041a6:	6122      	str	r2, [r4, #16]
 80041a8:	f8cd a000 	str.w	sl, [sp]
 80041ac:	464b      	mov	r3, r9
 80041ae:	aa03      	add	r2, sp, #12
 80041b0:	4621      	mov	r1, r4
 80041b2:	4640      	mov	r0, r8
 80041b4:	f7ff fee6 	bl	8003f84 <_printf_common>
 80041b8:	3001      	adds	r0, #1
 80041ba:	d14a      	bne.n	8004252 <_printf_i+0x1f2>
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	b004      	add	sp, #16
 80041c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	f043 0320 	orr.w	r3, r3, #32
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	4833      	ldr	r0, [pc, #204]	@ (800429c <_printf_i+0x23c>)
 80041d0:	2778      	movs	r7, #120	@ 0x78
 80041d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	6831      	ldr	r1, [r6, #0]
 80041da:	061f      	lsls	r7, r3, #24
 80041dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80041e0:	d402      	bmi.n	80041e8 <_printf_i+0x188>
 80041e2:	065f      	lsls	r7, r3, #25
 80041e4:	bf48      	it	mi
 80041e6:	b2ad      	uxthmi	r5, r5
 80041e8:	6031      	str	r1, [r6, #0]
 80041ea:	07d9      	lsls	r1, r3, #31
 80041ec:	bf44      	itt	mi
 80041ee:	f043 0320 	orrmi.w	r3, r3, #32
 80041f2:	6023      	strmi	r3, [r4, #0]
 80041f4:	b11d      	cbz	r5, 80041fe <_printf_i+0x19e>
 80041f6:	2310      	movs	r3, #16
 80041f8:	e7ac      	b.n	8004154 <_printf_i+0xf4>
 80041fa:	4827      	ldr	r0, [pc, #156]	@ (8004298 <_printf_i+0x238>)
 80041fc:	e7e9      	b.n	80041d2 <_printf_i+0x172>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f023 0320 	bic.w	r3, r3, #32
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	e7f6      	b.n	80041f6 <_printf_i+0x196>
 8004208:	4616      	mov	r6, r2
 800420a:	e7bd      	b.n	8004188 <_printf_i+0x128>
 800420c:	6833      	ldr	r3, [r6, #0]
 800420e:	6825      	ldr	r5, [r4, #0]
 8004210:	6961      	ldr	r1, [r4, #20]
 8004212:	1d18      	adds	r0, r3, #4
 8004214:	6030      	str	r0, [r6, #0]
 8004216:	062e      	lsls	r6, r5, #24
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	d501      	bpl.n	8004220 <_printf_i+0x1c0>
 800421c:	6019      	str	r1, [r3, #0]
 800421e:	e002      	b.n	8004226 <_printf_i+0x1c6>
 8004220:	0668      	lsls	r0, r5, #25
 8004222:	d5fb      	bpl.n	800421c <_printf_i+0x1bc>
 8004224:	8019      	strh	r1, [r3, #0]
 8004226:	2300      	movs	r3, #0
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	4616      	mov	r6, r2
 800422c:	e7bc      	b.n	80041a8 <_printf_i+0x148>
 800422e:	6833      	ldr	r3, [r6, #0]
 8004230:	1d1a      	adds	r2, r3, #4
 8004232:	6032      	str	r2, [r6, #0]
 8004234:	681e      	ldr	r6, [r3, #0]
 8004236:	6862      	ldr	r2, [r4, #4]
 8004238:	2100      	movs	r1, #0
 800423a:	4630      	mov	r0, r6
 800423c:	f7fb ffd0 	bl	80001e0 <memchr>
 8004240:	b108      	cbz	r0, 8004246 <_printf_i+0x1e6>
 8004242:	1b80      	subs	r0, r0, r6
 8004244:	6060      	str	r0, [r4, #4]
 8004246:	6863      	ldr	r3, [r4, #4]
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	2300      	movs	r3, #0
 800424c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004250:	e7aa      	b.n	80041a8 <_printf_i+0x148>
 8004252:	6923      	ldr	r3, [r4, #16]
 8004254:	4632      	mov	r2, r6
 8004256:	4649      	mov	r1, r9
 8004258:	4640      	mov	r0, r8
 800425a:	47d0      	blx	sl
 800425c:	3001      	adds	r0, #1
 800425e:	d0ad      	beq.n	80041bc <_printf_i+0x15c>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	079b      	lsls	r3, r3, #30
 8004264:	d413      	bmi.n	800428e <_printf_i+0x22e>
 8004266:	68e0      	ldr	r0, [r4, #12]
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	4298      	cmp	r0, r3
 800426c:	bfb8      	it	lt
 800426e:	4618      	movlt	r0, r3
 8004270:	e7a6      	b.n	80041c0 <_printf_i+0x160>
 8004272:	2301      	movs	r3, #1
 8004274:	4632      	mov	r2, r6
 8004276:	4649      	mov	r1, r9
 8004278:	4640      	mov	r0, r8
 800427a:	47d0      	blx	sl
 800427c:	3001      	adds	r0, #1
 800427e:	d09d      	beq.n	80041bc <_printf_i+0x15c>
 8004280:	3501      	adds	r5, #1
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	9903      	ldr	r1, [sp, #12]
 8004286:	1a5b      	subs	r3, r3, r1
 8004288:	42ab      	cmp	r3, r5
 800428a:	dcf2      	bgt.n	8004272 <_printf_i+0x212>
 800428c:	e7eb      	b.n	8004266 <_printf_i+0x206>
 800428e:	2500      	movs	r5, #0
 8004290:	f104 0619 	add.w	r6, r4, #25
 8004294:	e7f5      	b.n	8004282 <_printf_i+0x222>
 8004296:	bf00      	nop
 8004298:	080046e1 	.word	0x080046e1
 800429c:	080046f2 	.word	0x080046f2

080042a0 <memmove>:
 80042a0:	4288      	cmp	r0, r1
 80042a2:	b510      	push	{r4, lr}
 80042a4:	eb01 0402 	add.w	r4, r1, r2
 80042a8:	d902      	bls.n	80042b0 <memmove+0x10>
 80042aa:	4284      	cmp	r4, r0
 80042ac:	4623      	mov	r3, r4
 80042ae:	d807      	bhi.n	80042c0 <memmove+0x20>
 80042b0:	1e43      	subs	r3, r0, #1
 80042b2:	42a1      	cmp	r1, r4
 80042b4:	d008      	beq.n	80042c8 <memmove+0x28>
 80042b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042be:	e7f8      	b.n	80042b2 <memmove+0x12>
 80042c0:	4402      	add	r2, r0
 80042c2:	4601      	mov	r1, r0
 80042c4:	428a      	cmp	r2, r1
 80042c6:	d100      	bne.n	80042ca <memmove+0x2a>
 80042c8:	bd10      	pop	{r4, pc}
 80042ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042d2:	e7f7      	b.n	80042c4 <memmove+0x24>

080042d4 <_sbrk_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4d06      	ldr	r5, [pc, #24]	@ (80042f0 <_sbrk_r+0x1c>)
 80042d8:	2300      	movs	r3, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	f7ff fb0e 	bl	8003900 <_sbrk>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_sbrk_r+0x1a>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_sbrk_r+0x1a>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000300 	.word	0x20000300

080042f4 <memcpy>:
 80042f4:	440a      	add	r2, r1
 80042f6:	4291      	cmp	r1, r2
 80042f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042fc:	d100      	bne.n	8004300 <memcpy+0xc>
 80042fe:	4770      	bx	lr
 8004300:	b510      	push	{r4, lr}
 8004302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800430a:	4291      	cmp	r1, r2
 800430c:	d1f9      	bne.n	8004302 <memcpy+0xe>
 800430e:	bd10      	pop	{r4, pc}

08004310 <_realloc_r>:
 8004310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004314:	4680      	mov	r8, r0
 8004316:	4615      	mov	r5, r2
 8004318:	460c      	mov	r4, r1
 800431a:	b921      	cbnz	r1, 8004326 <_realloc_r+0x16>
 800431c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	4611      	mov	r1, r2
 8004322:	f7ff bc4b 	b.w	8003bbc <_malloc_r>
 8004326:	b92a      	cbnz	r2, 8004334 <_realloc_r+0x24>
 8004328:	f7ff fbdc 	bl	8003ae4 <_free_r>
 800432c:	2400      	movs	r4, #0
 800432e:	4620      	mov	r0, r4
 8004330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004334:	f000 f81a 	bl	800436c <_malloc_usable_size_r>
 8004338:	4285      	cmp	r5, r0
 800433a:	4606      	mov	r6, r0
 800433c:	d802      	bhi.n	8004344 <_realloc_r+0x34>
 800433e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004342:	d8f4      	bhi.n	800432e <_realloc_r+0x1e>
 8004344:	4629      	mov	r1, r5
 8004346:	4640      	mov	r0, r8
 8004348:	f7ff fc38 	bl	8003bbc <_malloc_r>
 800434c:	4607      	mov	r7, r0
 800434e:	2800      	cmp	r0, #0
 8004350:	d0ec      	beq.n	800432c <_realloc_r+0x1c>
 8004352:	42b5      	cmp	r5, r6
 8004354:	462a      	mov	r2, r5
 8004356:	4621      	mov	r1, r4
 8004358:	bf28      	it	cs
 800435a:	4632      	movcs	r2, r6
 800435c:	f7ff ffca 	bl	80042f4 <memcpy>
 8004360:	4621      	mov	r1, r4
 8004362:	4640      	mov	r0, r8
 8004364:	f7ff fbbe 	bl	8003ae4 <_free_r>
 8004368:	463c      	mov	r4, r7
 800436a:	e7e0      	b.n	800432e <_realloc_r+0x1e>

0800436c <_malloc_usable_size_r>:
 800436c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004370:	1f18      	subs	r0, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfbc      	itt	lt
 8004376:	580b      	ldrlt	r3, [r1, r0]
 8004378:	18c0      	addlt	r0, r0, r3
 800437a:	4770      	bx	lr

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
