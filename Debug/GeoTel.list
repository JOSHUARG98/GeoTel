
GeoTel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  080035d8  080035d8  000045d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003978  08003978  00005050  2**0
                  CONTENTS
  4 .ARM          00000008  08003978  08003978  00004978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003980  08003980  00005050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003984  08003984  00004984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08003988  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00005050  2**0
                  CONTENTS
 10 .bss          000003c8  20000050  20000050  00005050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  00005050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000039a8  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c18  00000000  00000000  00008a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000448  00000000  00000000  00009640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000330  00000000  00000000  00009a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001941b  00000000  00000000  00009db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003ecb  00000000  00000000  000231d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b30c  00000000  00000000  0002709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b23aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013cc  00000000  00000000  000b23f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  000b37bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080035c0 	.word	0x080035c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	080035c0 	.word	0x080035c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <RCC_En_CANx>:
#include <stdint.h>
#include<stdbool.h>

#include "CANx.h"

void RCC_En_CANx(CAN_TypeDef *port){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
		if(port == CAN1){
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a07      	ldr	r2, [pc, #28]	@ (80002a8 <RCC_En_CANx+0x28>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d105      	bne.n	800029c <RCC_En_CANx+0x1c>
			SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_CAN1EN);
 8000290:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <RCC_En_CANx+0x2c>)
 8000292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000294:	4a05      	ldr	r2, [pc, #20]	@ (80002ac <RCC_En_CANx+0x2c>)
 8000296:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800029a:	6593      	str	r3, [r2, #88]	@ 0x58
		}
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40006400 	.word	0x40006400
 80002ac:	40021000 	.word	0x40021000

080002b0 <CANx_Init>:

void CANx_Init(CAN_TypeDef *port){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	SET_BIT(port->MCR, CAN_MCR_RESET);//Reset FORZAMOS a entrar a modo sleep
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	601a      	str	r2, [r3, #0]
	while(port->MCR & CAN_MCR_RESET) {}; //Esperamos a que el bit RESET se limpie
 80002c4:	bf00      	nop
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1f9      	bne.n	80002c6 <CANx_Init+0x16>
	SET_BIT(port->MCR, CAN_MCR_INRQ);//Solicitamos entrar a modo inicializacion
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 0201 	orr.w	r2, r3, #1
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	601a      	str	r2, [r3, #0]
	while((port->MSR & CAN_MSR_INAK)==0){};//Esperamos a que el bit INAK sea set
 80002de:	bf00      	nop
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0f9      	beq.n	80002e0 <CANx_Init+0x30>
	CLEAR_BIT(port->MCR, CAN_MCR_SLEEP);//Solicitamos Apagagar modo sleep
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f023 0202 	bic.w	r2, r3, #2
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
	while(port->MSR & CAN_MSR_SLAK) {}; //Esperamos a que el bit SLAK se limpie ****ENTRAMOS A MODO INICIALIZACION TRAS ackmowledge de sleep off
 80002f8:	bf00      	nop
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d1f9      	bne.n	80002fa <CANx_Init+0x4a>

	CLEAR_BIT(port->MCR, CAN_MCR_TXFP);// Inicializas el arbitraje, es decir la prioridad de cada mensaje es por identificador
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f023 0204 	bic.w	r2, r3, #4
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_RFLM);//La FIFO no se bloquea al haber estado de OVERRUN
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f023 0208 	bic.w	r2, r3, #8
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
	SET_BIT(port->MCR, CAN_MCR_NART);//Activamos la retransmisión automática.
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 0210 	orr.w	r2, r3, #16
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
	//Modificar, si no se desea retransmitir NART=1.
	CLEAR_BIT(port->MCR, CAN_MCR_AWUM);//AQUI SALIMOS DE MODO SLEEP POR SOFTWARE, EN UN FUTURO CONSIDERAR CAMBIARLOS A MODO HARDWARE PARA MODOS DE BAJO CONSUMO (CARRO PRENDIDO?)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f023 0220 	bic.w	r2, r3, #32
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_ABOM);//SALIDA DE BUSS OFF POR SOFTWARE
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_TTCM);//Desactivamos funcion solo disponible para RTOS
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_RESET);//
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(port->MCR, CAN_MCR_DBF);//Activa funcionamiento en modo debug
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	601a      	str	r2, [r3, #0]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <CANx_BitTiming_500Kz>:

void CANx_BitTiming_500Kz (CAN_TypeDef *port){
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]

	//SET_BIT(port->BTR , (CAN_BTR_LBKM)); //Descomentar si se quieren hacer pruebas en modo loopback
	//SET_BIT(port->Register->BTR , (CAN_SILENT));
	CLEAR_BIT(port->BTR , (CAN_BTR_BRP));//limpia  BRP
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000382:	f023 0303 	bic.w	r3, r3, #3
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	61d3      	str	r3, [r2, #28]
	CLEAR_BIT(port->BTR , (CAN_BTR_TS1));//limpia TS1
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(port->BTR , (CAN_BTR_TS2));//limpia TS2
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	61da      	str	r2, [r3, #28]

	SET_BIT(port->BTR , ((0x1UL)<<CAN_BTR_BRP_Pos));//fija Baud rate
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f043 0201 	orr.w	r2, r3, #1
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	61da      	str	r2, [r3, #28]
	SET_BIT(port->BTR , ((11U)<<CAN_BTR_TS1_Pos));//configura tS1
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f443 2230 	orr.w	r2, r3, #720896	@ 0xb0000
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	61da      	str	r2, [r3, #28]
	SET_BIT(port->BTR , ((0x2UL)<<CAN_BTR_TS2_Pos));//configura tS2
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	61da      	str	r2, [r3, #28]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <CAN_FilterInit>:


void CAN_FilterInit (CAN_TypeDef *port, bool Mode, bool Scale, bool Fifo, uint8_t BitIndex){
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	4608      	mov	r0, r1
 80003dc:	4611      	mov	r1, r2
 80003de:	461a      	mov	r2, r3
 80003e0:	4603      	mov	r3, r0
 80003e2:	70fb      	strb	r3, [r7, #3]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70bb      	strb	r3, [r7, #2]
 80003e8:	4613      	mov	r3, r2
 80003ea:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT(port->FA1R, (1 << BitIndex)); //Desactivo el filtro del Bit index
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80003f2:	7c3a      	ldrb	r2, [r7, #16]
 80003f4:	2101      	movs	r1, #1
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	401a      	ands	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	SET_BIT(port->MSR,CAN_FMR_FINIT);//modo inicialización en los filtros
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	f043 0201 	orr.w	r2, r3, #1
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]

    // Configuramos el bit correspondiente utilizando BitIndex para configurar modo lista o mascara
    if (Mode) {
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00b      	beq.n	800042e <CAN_FilterInit+0x5c>
    	SET_BIT(port->FM1R, (1 << BitIndex)); // Si Mode es verdadero, establecemos el bit en BitIndex
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800041c:	7c3a      	ldrb	r2, [r7, #16]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	431a      	orrs	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800042c:	e00b      	b.n	8000446 <CAN_FilterInit+0x74>
    } else {
    	CLEAR_BIT(port->FM1R, (1 << BitIndex)); // Si Mode es falso, limpiamos el bit en BitIndex
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8000434:	7c3a      	ldrb	r2, [r7, #16]
 8000436:	2101      	movs	r1, #1
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

 // Configuramos el bit correspondiente utilizando BitIndex para configurar la escala
    if (Scale) {
 8000446:	78bb      	ldrb	r3, [r7, #2]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d00b      	beq.n	8000464 <CAN_FilterInit+0x92>
        SET_BIT(port->FS1R, (1 << BitIndex)); // Si Mode es verdadero, establecemos el bit en BitIndex
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000452:	7c3a      	ldrb	r2, [r7, #16]
 8000454:	2101      	movs	r1, #1
 8000456:	fa01 f202 	lsl.w	r2, r1, r2
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8000462:	e00b      	b.n	800047c <CAN_FilterInit+0xaa>
    } else {
        CLEAR_BIT(port->FS1R, (1 << BitIndex));// Si Mode es falso, limpiamos el bit en BitIndex
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800046a:	7c3a      	ldrb	r2, [r7, #16]
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	43d2      	mvns	r2, r2
 8000474:	401a      	ands	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
    }

    // Configuramos el bit correspondiente utilizando BitIndex para asignar a FIFO0 o FIFO1
     if (Fifo) {
 800047c:	787b      	ldrb	r3, [r7, #1]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d00b      	beq.n	800049a <CAN_FilterInit+0xc8>
         SET_BIT(port->FFA1R, (1 << BitIndex));// Si Mode es verdadero, establecemos el bit en BitIndex
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000488:	7c3a      	ldrb	r2, [r7, #16]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	431a      	orrs	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000498:	e00b      	b.n	80004b2 <CAN_FilterInit+0xe0>
     } else {
         CLEAR_BIT(port->FFA1R, (1 << BitIndex));// Si Mode es falso, limpiamos el bit en BitIndex FFA1R
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80004a0:	7c3a      	ldrb	r2, [r7, #16]
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	401a      	ands	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
     }

     SET_BIT(port->FA1R, (1 << BitIndex)); //Acitva el filtro del Bit index
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80004b8:	7c3a      	ldrb	r2, [r7, #16]
 80004ba:	2101      	movs	r1, #1
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	431a      	orrs	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
   //  CLEAR_BIT(port->FMR,CAN_FMR_FINIT);//fin de modo inicialización
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <CAN_SetFilterValue>:

void CAN_SetFilterValue(CAN_TypeDef *port, uint32_t ID, uint32_t Mask, uint8_t BitIndex){
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	70fb      	strb	r3, [r7, #3]

    SET_BIT(port->FMR, CAN_FMR_FINIT); // Activamos el modo de inicialización de filtros
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80004e8:	f043 0201 	orr.w	r2, r3, #1
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(port->FA1R, (1 << BitIndex));// Desactivamos temporalmente el filtro correspondiente
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80004f8:	78fa      	ldrb	r2, [r7, #3]
 80004fa:	2101      	movs	r1, #1
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	43d2      	mvns	r2, r2
 8000502:	401a      	ands	r2, r3
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    // Configuramos los registros de filtro y máscara

    port->sFilterRegister[BitIndex].FR1 &= ~(0xFFFFFFFF);  // Limpia bits antes de escribir
 800050a:	78fa      	ldrb	r2, [r7, #3]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3248      	adds	r2, #72	@ 0x48
 8000510:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000514:	78fa      	ldrb	r2, [r7, #3]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3248      	adds	r2, #72	@ 0x48
 800051a:	2100      	movs	r1, #0
 800051c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    port->sFilterRegister[BitIndex].FR2 &= ~(0xFFFFFFFF);  // Limpia bits antes de escribir
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	3348      	adds	r3, #72	@ 0x48
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4413      	add	r3, r2
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	3348      	adds	r3, #72	@ 0x48
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	4413      	add	r3, r2
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]

    port->sFilterRegister[BitIndex].FR1 = (ID & 0x7FF) << 21;  // Ajustar ID en bits 21 al 31
 800053a:	78fa      	ldrb	r2, [r7, #3]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	0559      	lsls	r1, r3, #21
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3248      	adds	r2, #72	@ 0x48
 8000544:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    port->sFilterRegister[BitIndex].FR2 = (Mask & 0x7FF) << 21; // Ajustar Mask en bits 21 al 31
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	0552      	lsls	r2, r2, #21
 800054e:	68f9      	ldr	r1, [r7, #12]
 8000550:	3348      	adds	r3, #72	@ 0x48
 8000552:	00db      	lsls	r3, r3, #3
 8000554:	440b      	add	r3, r1
 8000556:	605a      	str	r2, [r3, #4]

    // Reactivamos el filtro y salimos del modo de inicialización
    SET_BIT(port->FA1R, (1 << BitIndex));
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800055e:	78fa      	ldrb	r2, [r7, #3]
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	431a      	orrs	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
  //  CLEAR_BIT(port->FMR, CAN_FMR_FINIT);
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <CAN_MailboxConfig>:

void CAN_MailboxConfig(CAN_TypeDef *port, bool ExtendedID, uint32_t ID, bool Remote, uint8_t mailboxIndex){
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	461a      	mov	r2, r3
 8000586:	460b      	mov	r3, r1
 8000588:	72fb      	strb	r3, [r7, #11]
 800058a:	4613      	mov	r3, r2
 800058c:	72bb      	strb	r3, [r7, #10]

	port->sTxMailBox[mailboxIndex].TIR &= ~(0xFFFFFFFF); //Limplia el registro TIR del milebox correspondiente
 800058e:	7e3b      	ldrb	r3, [r7, #24]
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	3318      	adds	r3, #24
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	4413      	add	r3, r2
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	7e3b      	ldrb	r3, [r7, #24]
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	3318      	adds	r3, #24
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	4413      	add	r3, r2
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]

    if (mailboxIndex > 2) {//Si se usa la funcion con un index superior a 2 sale de la funcion ya que solo tenemos 3 mailbox
 80005a8:	7e3b      	ldrb	r3, [r7, #24]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d836      	bhi.n	800061c <CAN_MailboxConfig+0xa2>
        return;
    }
    // Configuramos el bit correspondiente utilizando isExtendedID para configurar IDE y cargar el identificador
    if (ExtendedID) {
 80005ae:	7afb      	ldrb	r3, [r7, #11]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00a      	beq.n	80005ca <CAN_MailboxConfig+0x50>
        port->sTxMailBox[mailboxIndex].TIR = (ID << 3) | (1 << 2); // ID extendida: ID en bits 31:3, IDE en bit 2
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	00da      	lsls	r2, r3, #3
 80005b8:	7e3b      	ldrb	r3, [r7, #24]
 80005ba:	f042 0204 	orr.w	r2, r2, #4
 80005be:	68f9      	ldr	r1, [r7, #12]
 80005c0:	3318      	adds	r3, #24
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	440b      	add	r3, r1
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e007      	b.n	80005da <CAN_MailboxConfig+0x60>
    } else {
        port->sTxMailBox[mailboxIndex].TIR = (ID << 21); // ID estándar: ID en bits 31:21, IDE desactivado
 80005ca:	7e3b      	ldrb	r3, [r7, #24]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	0552      	lsls	r2, r2, #21
 80005d0:	68f9      	ldr	r1, [r7, #12]
 80005d2:	3318      	adds	r3, #24
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	440b      	add	r3, r1
 80005d8:	601a      	str	r2, [r3, #0]
    }

    // Configuramos RTR para indicar si es trama de datos o remota
    if (Remote) {
 80005da:	7abb      	ldrb	r3, [r7, #10]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00e      	beq.n	80005fe <CAN_MailboxConfig+0x84>
        SET_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_RTR); // Activa bit RTR para trama remota
 80005e0:	7e3b      	ldrb	r3, [r7, #24]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	3318      	adds	r3, #24
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	4413      	add	r3, r2
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	7e3b      	ldrb	r3, [r7, #24]
 80005ee:	f042 0202 	orr.w	r2, r2, #2
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	3318      	adds	r3, #24
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	440b      	add	r3, r1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e00f      	b.n	800061e <CAN_MailboxConfig+0xa4>
    } else {
        CLEAR_BIT(port->sTxMailBox[mailboxIndex].TIR, CAN_TI0R_RTR); // Desactiva bit RTR para trama de datos
 80005fe:	7e3b      	ldrb	r3, [r7, #24]
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	3318      	adds	r3, #24
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	7e3b      	ldrb	r3, [r7, #24]
 800060c:	f022 0202 	bic.w	r2, r2, #2
 8000610:	68f9      	ldr	r1, [r7, #12]
 8000612:	3318      	adds	r3, #24
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	440b      	add	r3, r1
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e000      	b.n	800061e <CAN_MailboxConfig+0xa4>
        return;
 800061c:	bf00      	nop
    }
}
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <CAN_SendData>:


void CAN_SendData(CAN_TypeDef *port, uint8_t DLC, uint64_t data, uint8_t mailboxIndex) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	e9c7 2300 	strd	r2, r3, [r7]
 8000634:	460b      	mov	r3, r1
 8000636:	72fb      	strb	r3, [r7, #11]

	port->sTxMailBox[mailboxIndex].TDTR &= ~(0xFFFFFFFF); //Limpia valores de TDTR
 8000638:	7e3b      	ldrb	r3, [r7, #24]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	3318      	adds	r3, #24
 800063e:	011b      	lsls	r3, r3, #4
 8000640:	4413      	add	r3, r2
 8000642:	3304      	adds	r3, #4
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	7e3b      	ldrb	r3, [r7, #24]
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	3318      	adds	r3, #24
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	4413      	add	r3, r2
 8000650:	3304      	adds	r3, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
	port->sTxMailBox[mailboxIndex].TDLR &= ~(0xFFFFFFFF); //Limpia valores de TDLR
 8000656:	7e3b      	ldrb	r3, [r7, #24]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	4413      	add	r3, r2
 800065e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	7e3b      	ldrb	r3, [r7, #24]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4413      	add	r3, r2
 800066c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	port->sTxMailBox[mailboxIndex].TDHR &= ~(0xFFFFFFFF); //Limpia calores de TDHR
 8000674:	7e3b      	ldrb	r3, [r7, #24]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	4413      	add	r3, r2
 800067c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	7e3b      	ldrb	r3, [r7, #24]
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	4413      	add	r3, r2
 800068a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
    if (mailboxIndex > 2) {
 8000692:	7e3b      	ldrb	r3, [r7, #24]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d822      	bhi.n	80006de <CAN_SendData+0xb6>
        return;
    }
    port->sTxMailBox[mailboxIndex].TDTR = DLC & 0xF;
 8000698:	7afa      	ldrb	r2, [r7, #11]
 800069a:	7e3b      	ldrb	r3, [r7, #24]
 800069c:	f002 020f 	and.w	r2, r2, #15
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	3318      	adds	r3, #24
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	440b      	add	r3, r1
 80006a8:	3304      	adds	r3, #4
 80006aa:	601a      	str	r2, [r3, #0]
    port->sTxMailBox[mailboxIndex].TDLR = data & 0xFFFFFFFF;
 80006ac:	7e3b      	ldrb	r3, [r7, #24]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	68f9      	ldr	r1, [r7, #12]
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	440b      	add	r3, r1
 80006b6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80006ba:	601a      	str	r2, [r3, #0]
    port->sTxMailBox[mailboxIndex].TDHR = (data >> 32) & 0xFFFFFFFF;
 80006bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	000a      	movs	r2, r1
 80006ca:	2300      	movs	r3, #0
 80006cc:	7e39      	ldrb	r1, [r7, #24]
 80006ce:	4610      	mov	r0, r2
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	010b      	lsls	r3, r1, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80006da:	6018      	str	r0, [r3, #0]
 80006dc:	e000      	b.n	80006e0 <CAN_SendData+0xb8>
        return;
 80006de:	bf00      	nop
}
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <CANx_EnFIFO1Ints>:

    return flag;
}


void CANx_EnFIFO1Ints(CAN_TypeDef * port){
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	SET_BIT(port->IER, CAN_IER_FMPIE1|CAN_IER_FFIE1|CAN_IER_FOVIE1);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f043 0270 	orr.w	r2, r3, #112	@ 0x70
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	615a      	str	r2, [r3, #20]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <CANx_EnFIFO0Ints>:

void CANx_EnFIFO0Ints(CAN_TypeDef * port){
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	SET_BIT(port->IER, CAN_IER_FMPIE0|CAN_IER_FFIE0|CAN_IER_FOVIE0);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f043 020e 	orr.w	r2, r3, #14
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <CANx_GetLEC>:



uint8_t CANx_GetLEC(CAN_TypeDef * port){
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	uint8_t lec = (port->ESR & CAN_ESR_LEC_Msk) >> CAN_ESR_LEC_Pos; // Leer y desplazar campo LEC
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	73fb      	strb	r3, [r7, #15]
	return lec;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <CAN1_Rx0_FIFOx>:


void CAN1_Rx0_FIFOx(CAN_TypeDef *port, CAN_FIFOMailBox_TypeDef *fifo) {
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
    if (port->RF0R & CAN_RF0R_FMP0) { // Nuevo mensaje en FIFO
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	f003 0303 	and.w	r3, r3, #3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d027      	beq.n	80007b4 <CAN1_Rx0_FIFOx+0x66>
        // Verificar el Last Error Code (LEC)
        if (CANx_GetLEC(port) == CAN_LEC_NO_ERROR) { // No hubo errores en la recepción
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ffe0 	bl	800072a <CANx_GetLEC>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d11a      	bne.n	80007a6 <CAN1_Rx0_FIFOx+0x58>
            // Copiar los datos del FIFO a la estructura fifo
            fifo->RIR = port->sFIFOMailBox[0].RIR;      // Identificador del mensaje
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	601a      	str	r2, [r3, #0]
            fifo->RDTR = port->sFIFOMailBox[0].RDTR;    // Código de longitud de datos y FMI
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	605a      	str	r2, [r3, #4]
            fifo->RDLR = port->sFIFOMailBox[0].RDLR;    // Datos (Low)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	609a      	str	r2, [r3, #8]
            fifo->RDHR = port->sFIFOMailBox[0].RDHR;    // Datos (High)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	60da      	str	r2, [r3, #12]
            // Manejo del error: descartar el mensaje y liberar el FIFO
            SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
            return; // Salir de la función sin llenar la estructura
        }
        // Liberar el FIFO para el siguiente mensaje
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f043 0220 	orr.w	r2, r3, #32
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	e04d      	b.n	8000842 <CAN1_Rx0_FIFOx+0xf4>
            SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f043 0220 	orr.w	r2, r3, #32
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60da      	str	r2, [r3, #12]
            return; // Salir de la función sin llenar la estructura
 80007b2:	e046      	b.n	8000842 <CAN1_Rx0_FIFOx+0xf4>

    } else if (port->RF0R & CAN_RF0R_FULL0) { // FIFO lleno
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d01a      	beq.n	80007f6 <CAN1_Rx0_FIFOx+0xa8>
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[0].RIR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[0].RDTR;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[0].RDLR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[0].RDHR;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO para evitar la pérdida de datos
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	f043 0220 	orr.w	r2, r3, #32
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	e025      	b.n	8000842 <CAN1_Rx0_FIFOx+0xf4>

    } else if (port->RF0R & CAN_RF0R_FOVR0) { // Sobrecarga en el FIFO
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d01f      	beq.n	8000842 <CAN1_Rx0_FIFOx+0xf4>
        // Manejar el estado de sobrecarga y limpiar el bit de sobrecarga
        CLEAR_BIT(port->RF0R, CAN_RF0R_FOVR0);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f023 0210 	bic.w	r2, r3, #16
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60da      	str	r2, [r3, #12]
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[0].RIR;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[0].RDTR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[0].RDLR;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[0].RDHR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO
        SET_BIT(port->RF0R, CAN_RF0R_RFOM0);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f043 0220 	orr.w	r2, r3, #32
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	60da      	str	r2, [r3, #12]
    }
}
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <CAN1_Rx1_FIFOx>:


void CAN1_Rx1_FIFOx(CAN_TypeDef *port, CAN_FIFOMailBox_TypeDef *fifo) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    if (port->RF1R & CAN_RF1R_FMP1) { // Nuevo mensaje en FIFO
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d027      	beq.n	80008ae <CAN1_Rx1_FIFOx+0x66>
        // Verificar el Last Error Code (LEC)
        if (CANx_GetLEC(port) == CAN_LEC_NO_ERROR) { // No hubo errores en la recepción
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff63 	bl	800072a <CANx_GetLEC>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d11a      	bne.n	80008a0 <CAN1_Rx1_FIFOx+0x58>
            // Copiar los datos del FIFO a la estructura fifo
            fifo->RIR = port->sFIFOMailBox[1].RIR;      // Identificador del mensaje
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	601a      	str	r2, [r3, #0]
            fifo->RDTR = port->sFIFOMailBox[1].RDTR;    // Código de longitud de datos y FMI
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	605a      	str	r2, [r3, #4]
            fifo->RDLR = port->sFIFOMailBox[1].RDLR;    // Datos (Low)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	609a      	str	r2, [r3, #8]
            fifo->RDHR = port->sFIFOMailBox[1].RDHR;    // Datos (High)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	60da      	str	r2, [r3, #12]
            // Manejo del error: descartar el mensaje y liberar el FIFO
            SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
            return; // Salir de la función sin llenar la estructura
        }
        // Liberar el FIFO para el siguiente mensaje
        SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	f043 0220 	orr.w	r2, r3, #32
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	e04d      	b.n	800093c <CAN1_Rx1_FIFOx+0xf4>
            SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	f043 0220 	orr.w	r2, r3, #32
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	611a      	str	r2, [r3, #16]
            return; // Salir de la función sin llenar la estructura
 80008ac:	e046      	b.n	800093c <CAN1_Rx1_FIFOx+0xf4>

    } else if (port->RF1R & CAN_RF1R_FULL1) { // FIFO lleno
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d01a      	beq.n	80008f0 <CAN1_Rx1_FIFOx+0xa8>
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[1].RIR;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[1].RDTR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[1].RDLR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[1].RDHR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO para evitar la pérdida de datos
        SET_BIT(port->RF1R, CAN_RF1R_RFOM1);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	f043 0220 	orr.w	r2, r3, #32
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	e025      	b.n	800093c <CAN1_Rx1_FIFOx+0xf4>

    } else if (port->RF1R & CAN_RF1R_FOVR1) { // Sobrecarga en el FIFO
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	f003 0310 	and.w	r3, r3, #16
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d01f      	beq.n	800093c <CAN1_Rx1_FIFOx+0xf4>
        // Manejar el estado de sobrecarga y limpiar el bit de sobrecarga
        CLEAR_BIT(port->RF1R, CAN_RF1R_FOVR1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	f023 0210 	bic.w	r2, r3, #16
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	611a      	str	r2, [r3, #16]
        // Copiar los datos del FIFO a la estructura fifo
        fifo->RIR = port->sFIFOMailBox[1].RIR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	601a      	str	r2, [r3, #0]
        fifo->RDTR = port->sFIFOMailBox[1].RDTR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	605a      	str	r2, [r3, #4]
        fifo->RDLR = port->sFIFOMailBox[1].RDLR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	609a      	str	r2, [r3, #8]
        fifo->RDHR = port->sFIFOMailBox[1].RDHR;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	60da      	str	r2, [r3, #12]
        // Liberar el FIFO
        SET_BIT(port->RF0R, CAN_RF1R_RFOM1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	f043 0220 	orr.w	r2, r3, #32
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60da      	str	r2, [r3, #12]
    }
}
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <GPIOx_InitAF>:
#define GPIO_OTYPER_OD                   1UL //Very High Speed

//Inicializa en la función alterna los puertos

                              /*Puerto	-	OTYPER	-	OSPEEDR		-	AFR		-	PUR*/
void GPIOx_InitAF(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t OTYPER_, uint8_t OSPEEDR_, uint8_t AFR_, bool PUR){ //L45
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	461a      	mov	r2, r3
 8000950:	4603      	mov	r3, r0
 8000952:	70fb      	strb	r3, [r7, #3]
 8000954:	460b      	mov	r3, r1
 8000956:	70bb      	strb	r3, [r7, #2]
 8000958:	4613      	mov	r3, r2
 800095a:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT(Port_->MODER,(3 << (Pin_ * 2)));//Alternate Function on Pin x=1,...,15 /L45
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	78fa      	ldrb	r2, [r7, #3]
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	2103      	movs	r1, #3
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	43d2      	mvns	r2, r2
 800096c:	401a      	ands	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
	SET_BIT(Port_->MODER,(GPIO_MODER_AF << (Pin_ * 2)));//Alternate Function on Pin x=1,...,15 /L45
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2102      	movs	r1, #2
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
	SET_BIT(Port_->OTYPER,((OTYPER_ & 1) << (Pin_)));//Opend Drain or push pull
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	78ba      	ldrb	r2, [r7, #2]
 800098c:	f002 0101 	and.w	r1, r2, #1
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	431a      	orrs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	605a      	str	r2, [r3, #4]
	SET_BIT(Port_->OSPEEDR,(OSPEEDR_ << (Pin_ * 2)));//High Speed
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	7879      	ldrb	r1, [r7, #1]
 80009a2:	78fa      	ldrb	r2, [r7, #3]
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]
	if(Pin_ > 7){
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d90b      	bls.n	80009ce <GPIOx_InitAF+0x8c>
		SET_BIT(Port_->AFR[1],(AFR_ <<((Pin_ - 8) * 4)));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ba:	7c39      	ldrb	r1, [r7, #16]
 80009bc:	78fa      	ldrb	r2, [r7, #3]
 80009be:	3a08      	subs	r2, #8
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80009cc:	e009      	b.n	80009e2 <GPIOx_InitAF+0xa0>
	}
	else{
		SET_BIT(Port_->AFR[0],(AFR_ << (Pin_ * 4)));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a1b      	ldr	r3, [r3, #32]
 80009d2:	7c39      	ldrb	r1, [r7, #16]
 80009d4:	78fa      	ldrb	r2, [r7, #3]
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	621a      	str	r2, [r3, #32]
	}
	//Veificar IDR? Debe estar en 1 los puertos
	if(PUR){
 80009e2:	7d3b      	ldrb	r3, [r7, #20]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00a      	beq.n	80009fe <GPIOx_InitAF+0xbc>
		SET_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0_0 << (Pin_ * 2)));//Resistencias Pull UP
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	60da      	str	r2, [r3, #12]
	}
	else{
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
	}

}
 80009fc:	e00a      	b.n	8000a14 <GPIOx_InitAF+0xd2>
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2103      	movs	r1, #3
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	401a      	ands	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	60da      	str	r2, [r3, #12]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <GPIOx_InitIO>:

void GPIOx_InitIO(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t IO, bool PUR){ //l45
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4608      	mov	r0, r1
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4603      	mov	r3, r0
 8000a30:	70fb      	strb	r3, [r7, #3]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70bb      	strb	r3, [r7, #2]
 8000a36:	4613      	mov	r3, r2
 8000a38:	707b      	strb	r3, [r7, #1]
	if(IO == GPIO_MODER_OUTPUT){
 8000a3a:	78bb      	ldrb	r3, [r7, #2]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d115      	bne.n	8000a6c <GPIOx_InitIO+0x4c>
		CLEAR_BIT(Port_->MODER,(3 << (Pin_ * 2)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	78fa      	ldrb	r2, [r7, #3]
 8000a46:	0052      	lsls	r2, r2, #1
 8000a48:	2103      	movs	r1, #3
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	401a      	ands	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
		SET_BIT(Port_->MODER,(GPIO_MODER_OUTPUT << (Pin_ * 2))); // Salida
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e00f      	b.n	8000a8c <GPIOx_InitIO+0x6c>
	}
	else{
		Port_->IDR &= 0;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
		CLEAR_BIT(Port_->MODER,(0x3 << (Pin_ * 2))); // Entrada
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	78fa      	ldrb	r2, [r7, #3]
 8000a7c:	0052      	lsls	r2, r2, #1
 8000a7e:	2103      	movs	r1, #3
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	43d2      	mvns	r2, r2
 8000a86:	401a      	ands	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
	}
	if(PUR){
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00a      	beq.n	8000aa8 <GPIOx_InitIO+0x88>
		SET_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0_0 << (Pin_ * 2)));//Resistencias Pull UP
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60da      	str	r2, [r3, #12]
	}
	else{
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
	}
}
 8000aa6:	e00a      	b.n	8000abe <GPIOx_InitIO+0x9e>
		CLEAR_BIT(Port_->PUPDR,(GPIO_PUPDR_PUPD0) << (Pin_ * 2));//Desactiva
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	401a      	ands	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60da      	str	r2, [r3, #12]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
	...

08000acc <RCC_EnPort>:

void RCC_EnPort(GPIO_TypeDef *port){//L45
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	if(port == GPIOA){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ada:	d106      	bne.n	8000aea <RCC_EnPort+0x1e>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOAEN);
 8000adc:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <RCC_EnPort+0x98>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	4a20      	ldr	r2, [pc, #128]	@ (8000b64 <RCC_EnPort+0x98>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOEEN);
	}
	else if(port == GPIOH){
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOHEN);
	}
}
 8000ae8:	e035      	b.n	8000b56 <RCC_EnPort+0x8a>
	else if(port == GPIOB){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a1e      	ldr	r2, [pc, #120]	@ (8000b68 <RCC_EnPort+0x9c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <RCC_EnPort+0x34>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOBEN);
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <RCC_EnPort+0x98>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <RCC_EnPort+0x98>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000afe:	e02a      	b.n	8000b56 <RCC_EnPort+0x8a>
	else if(port == GPIOC){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <RCC_EnPort+0xa0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <RCC_EnPort+0x4a>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOCEN);
 8000b08:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	4a15      	ldr	r2, [pc, #84]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b14:	e01f      	b.n	8000b56 <RCC_EnPort+0x8a>
	else if(port == GPIOD){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <RCC_EnPort+0xa4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <RCC_EnPort+0x60>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIODEN);
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b2a:	e014      	b.n	8000b56 <RCC_EnPort+0x8a>
	else if(port == GPIOE){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a11      	ldr	r2, [pc, #68]	@ (8000b74 <RCC_EnPort+0xa8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d106      	bne.n	8000b42 <RCC_EnPort+0x76>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOEEN);
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b40:	e009      	b.n	8000b56 <RCC_EnPort+0x8a>
	else if(port == GPIOH){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <RCC_EnPort+0xac>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d105      	bne.n	8000b56 <RCC_EnPort+0x8a>
		SET_BIT(RCC->AHB2ENR,RCC_AHB2ENR_GPIOHEN);
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <RCC_EnPort+0x98>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	48000c00 	.word	0x48000c00
 8000b74:	48001000 	.word	0x48001000
 8000b78:	48001c00 	.word	0x48001c00

08000b7c <SystCLK_SetMSI>:

void SystCLK_SetMSI(uint8_t MSI_clkSel){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	while((RCC->CR && RCC_CR_MSION) == 0);
 8000b86:	bf00      	nop
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0fb      	beq.n	8000b88 <SystCLK_SetMSI+0xc>
	SET_BIT(RCC->CR,RCC_CR_MSIRGSEL);
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC->CR,RCC_CR_MSIRANGE);
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ba6:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC->CR,MSI_clkSel);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4904      	ldr	r1, [pc, #16]	@ (8000bc0 <SystCLK_SetMSI+0x44>)
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	600b      	str	r3, [r1, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <I2C_delay>:
#include<stdbool.h>



void I2C_delay(uint32_t T)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	while(T--);
 8000bcc:	bf00      	nop
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	1e5a      	subs	r2, r3, #1
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1fa      	bne.n	8000bce <I2C_delay+0xa>
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <RCC_En_I2C>:


void RCC_En_I2C(I2C_TypeDef *port){
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if(port == I2C1){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <RCC_En_I2C+0x3c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d105      	bne.n	8000c04 <RCC_En_I2C+0x1c>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_I2C1EN);
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <RCC_En_I2C+0x40>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <RCC_En_I2C+0x40>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c02:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == I2C3){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <RCC_En_I2C+0x44>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d105      	bne.n	8000c18 <RCC_En_I2C+0x30>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_I2C3EN);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <RCC_En_I2C+0x40>)
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c10:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <RCC_En_I2C+0x40>)
 8000c12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c16:	6593      	str	r3, [r2, #88]	@ 0x58
	}
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40005400 	.word	0x40005400
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40005c00 	.word	0x40005c00

08000c30 <I2C_Init>:




void I2C_Init(I2C_TypeDef *Port){
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(Port->CR1,I2C_CR1_PE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 0201 	bic.w	r2, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
	//CONFIGURA I2C EN Fast-mode (FM)
	SET_BIT(Port->TIMINGR,(1 << (28))); //Configura el preescalador PRESC[3:0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x9 << (0))); //Configura el SCLL del registro TIMINGR
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	f043 0209 	orr.w	r2, r3, #9
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x3 << (8))); //Configura el SCLH del registro TIMINGR
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x2 << (16))); //Configura el SDADEL del registro TIMINGR
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]
	SET_BIT(Port->TIMINGR,(0x3 << (20))); //Configura el SCLDEL del registro TIMINGR
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	f443 1240 	orr.w	r2, r3, #3145728	@ 0x300000
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	611a      	str	r2, [r3, #16]
	//SET_BIT(Port->I2C_CR1,I2C_CR1_TXDMAEN); //Habilitar modo DMA para las transmisiones
	//SET_BIT(Port->I2C_CR1,I2C_CR1_RXDMAEN); //Habilitar modo DMA para las transmisiones
	SET_BIT(Port->CR1,I2C_CR1_ANFOFF); //Habilitar modo DMA para las transmisiones
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	601a      	str	r2, [r3, #0]
    SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f043 0201 	orr.w	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <I2C_Tx_2Bytes>:
	SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
	ACEL_XOUT = ACCEL_XOUT_H <<8 |ACCEL_XOUT_L;
	return ACEL_XOUT;
}

void I2C_Tx_2Bytes (I2C_TypeDef *Port, uint8_t Adress, uint8_t Byte_0, uint8_t Byte_1){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	70fb      	strb	r3, [r7, #3]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	70bb      	strb	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	707b      	strb	r3, [r7, #1]
CLEAR_BIT(Port->CR2,I2C_CR2_ADD10); //Limpiar el bit ADD10 para utilizar direccion de esclavo de 7 bits
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2,0xFF); // Carga la dirección del esclavo
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2,(Adress << (1))); // Carga la dirección del esclavo
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2, I2C_CR2_RD_WRN); //Escritura
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2,(0x02 << (16)));  //Numero de BYTES
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	605a      	str	r2, [r3, #4]
CLEAR_BIT(Port->CR2, I2C_CR2_AUTOEND);  //Habilitar condición de stop automatica
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	605a      	str	r2, [r3, #4]
SET_BIT(Port->CR2, I2C_CR2_START); //Comienza transmisión
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	605a      	str	r2, [r3, #4]
while((Port->ISR&I2C_ISR_TXIS)==0){};
 8000d14:	bf00      	nop
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <I2C_Tx_2Bytes+0x72>
Port->TXDR = Byte_0;
 8000d22:	78ba      	ldrb	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
I2C_delay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f7ff ff4b 	bl	8000bc4 <I2C_delay>
while((Port->ISR&I2C_ISR_TXIS)==0){};
 8000d2e:	bf00      	nop
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f9      	beq.n	8000d30 <I2C_Tx_2Bytes+0x8c>
Port->TXDR = Byte_1;
 8000d3c:	787a      	ldrb	r2, [r7, #1]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	@ 0x28
I2C_delay(100);
 8000d42:	2064      	movs	r0, #100	@ 0x64
 8000d44:	f7ff ff3e 	bl	8000bc4 <I2C_delay>
SET_BIT(Port->CR2, I2C_CR2_STOP); //Condicion de stop
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	605a      	str	r2, [r3, #4]
SET_BIT(Port->ICR, I2C_ICR_STOPCF); //Limpia bandaera de deteccion de condicion de stop
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f043 0220 	orr.w	r2, r3, #32
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	61da      	str	r2, [r3, #28]
CLEAR_BIT(Port->CR1,I2C_CR1_PE); //Deshabilita bit PE del registro CR1 para desactivar el periferico
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 0201 	bic.w	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	601a      	str	r2, [r3, #0]
SET_BIT(Port->CR1,I2C_CR1_PE); //Habilita bit PE del registro CR1 para activar el periferico
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	601a      	str	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <NVIC_Enable>:
#include "stm32l4xx.h"
#include <stdint.h>
#include<stdbool.h>
#include "NVIC.h"

void NVIC_Enable(uint32_t irq_num, uint8_t priority) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
    if (irq_num >= 84) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b53      	cmp	r3, #83	@ 0x53
 8000d90:	d81a      	bhi.n	8000dc8 <NVIC_Enable+0x48>
        // El número de interrupción es inválido, dado que el microcontrolador solo tiene 84 interrupciones
        return;
    }

    // Calcular el índice del registro ISER y el bit correspondiente
    uint32_t iser_index = irq_num / 32;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	095b      	lsrs	r3, r3, #5
 8000d96:	60fb      	str	r3, [r7, #12]
    uint32_t iser_bit = irq_num % 32;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	60bb      	str	r3, [r7, #8]

    // Activar la interrupción correspondiente en NVIC_ISER
    NVIC->ISER[iser_index] = (1 << iser_bit);
 8000da0:	2201      	movs	r2, #1
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <NVIC_Enable+0x54>)
 8000daa:	4619      	mov	r1, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Configurar la prioridad en el registro NVIC_IPR
    NVIC->IP[irq_num] = (priority & 0xF) << 4; // La prioridad usa 4 bits más significativos
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <NVIC_Enable+0x54>)
 8000db8:	b2d9      	uxtb	r1, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e000      	b.n	8000dca <NVIC_Enable+0x4a>
        return;
 8000dc8:	bf00      	nop

    // La función no limpia en ICER, pero si quieres limpiar el bit usa:
    // NVIC->ICER[iser_index] = (1 << iser_bit); // Esto es opcional si necesitas desactivar
}
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <RCC_En_USARTx>:
int limsup=0;
int liminf=0;



void RCC_En_USARTx(USART_TypeDef *port){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if(port == USART2){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <RCC_En_USARTx+0x50>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d105      	bne.n	8000df4 <RCC_En_USARTx+0x1c>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_USART2EN);
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <RCC_En_USARTx+0x54>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <RCC_En_USARTx+0x54>)
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df2:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == USART3){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <RCC_En_USARTx+0x58>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d105      	bne.n	8000e08 <RCC_En_USARTx+0x30>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_USART3EN);
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <RCC_En_USARTx+0x54>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <RCC_En_USARTx+0x54>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e06:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	if(port == UART4){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <RCC_En_USARTx+0x5c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d105      	bne.n	8000e1c <RCC_En_USARTx+0x44>
		SET_BIT(RCC->APB1ENR1,RCC_APB1ENR1_UART4EN );
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <RCC_En_USARTx+0x54>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e14:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <RCC_En_USARTx+0x54>)
 8000e16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e1a:	6593      	str	r3, [r2, #88]	@ 0x58
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40004800 	.word	0x40004800
 8000e34:	40004c00 	.word	0x40004c00

08000e38 <USARTx_CONF>:


void USARTx_CONF(USART_TypeDef *USARTx_, uint16_t USARTx_BRR_MSI, uint8_t USARTx_Pos_IRQn, uint8_t USARTx_Prio_IRQn){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	4608      	mov	r0, r1
 8000e42:	4611      	mov	r1, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	707b      	strb	r3, [r7, #1]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	703b      	strb	r3, [r7, #0]

	A = buffer;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <USARTx_CONF+0x88>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec4 <USARTx_CONF+0x8c>)
 8000e56:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(USARTx_->CR1, 0xFF);	//LIMPIAMOS Y DESHABILITAMOS CONFIGURACIÓN DE USART3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
	SET_BIT(USARTx_->BRR, USARTx_BRR_MSI);	//SE CONFIGURA UN BAUD RATE
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]

	SET_BIT(USARTx_->CR1, 0x0C);	//HABILITAMOS TX Y RX
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f043 020c 	orr.w	r2, r3, #12
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	601a      	str	r2, [r3, #0]
	/*#####CONFIGURACIÓN PARA INDICADORES DE BANDERAS EN USART3 CON CR1#####*/
	SET_BIT(USARTx_->CR1, 0x020);	//ENMASCARAMOS BANDERA INDICADORA EN LA RECEPCIÓN DE DATOS, BIT 5
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f043 0220 	orr.w	r2, r3, #32
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	601a      	str	r2, [r3, #0]

	/*#####ÚLTIMA CONFIGURACIÓN PARA USART3#####*/
	SET_BIT(USARTx_->CR1, 0x01);	//HABILITAMOS LA CONEXIÓN EN USART3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	601a      	str	r2, [r3, #0]

	switch(USARTx_Pos_IRQn){
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b27      	cmp	r3, #39	@ 0x27
 8000e98:	d002      	beq.n	8000ea0 <USARTx_CONF+0x68>
 8000e9a:	2b34      	cmp	r3, #52	@ 0x34
 8000e9c:	d006      	beq.n	8000eac <USARTx_CONF+0x74>
		break;
	case UART4_IRQn:
		NVIC_Enable(UART4_IRQn, USARTx_Prio_IRQn);//ACTIVA INTERRUPCIÓN UART4
		break;
	default:
		break;
 8000e9e:	e00b      	b.n	8000eb8 <USARTx_CONF+0x80>
		NVIC_Enable(USART3_IRQn, USARTx_Prio_IRQn);//ACTIVA INTERRUPCIÓN USART3
 8000ea0:	783b      	ldrb	r3, [r7, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2027      	movs	r0, #39	@ 0x27
 8000ea6:	f7ff ff6b 	bl	8000d80 <NVIC_Enable>
		break;
 8000eaa:	e005      	b.n	8000eb8 <USARTx_CONF+0x80>
		NVIC_Enable(UART4_IRQn, USARTx_Prio_IRQn);//ACTIVA INTERRUPCIÓN UART4
 8000eac:	783b      	ldrb	r3, [r7, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	2034      	movs	r0, #52	@ 0x34
 8000eb2:	f7ff ff65 	bl	8000d80 <NVIC_Enable>
		break;
 8000eb6:	bf00      	nop
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000168 	.word	0x20000168
 8000ec4:	2000016c 	.word	0x2000016c

08000ec8 <USART3_IRQHandler>:

// Función de interrupción por UART
void USART3_IRQHandler(void){
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
	CLEAR_BIT(USART3->RQR, 0x08);
	//UART4->TDR = *A++;
	 * */

	    // Leer el dato recibido desde el registro RDR
	    uint8_t receivedData = USART3->RDR;
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <USART3_IRQHandler+0x6c>)
 8000ed0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	717b      	strb	r3, [r7, #5]

	    // Guardar el dato en el arreglo
	    if (writeIndex < BUFFER_SIZE) {
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <USART3_IRQHandler+0x70>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2bf9      	cmp	r3, #249	@ 0xf9
 8000ede:	d80b      	bhi.n	8000ef8 <USART3_IRQHandler+0x30>
	        rxBuffer[writeIndex++] = receivedData;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <USART3_IRQHandler+0x70>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	b291      	uxth	r1, r2
 8000eea:	4a13      	ldr	r2, [pc, #76]	@ (8000f38 <USART3_IRQHandler+0x70>)
 8000eec:	8011      	strh	r1, [r2, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <USART3_IRQHandler+0x74>)
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	5453      	strb	r3, [r2, r1]
 8000ef6:	e00f      	b.n	8000f18 <USART3_IRQHandler+0x50>
	    } else {
	        // Si el buffer está lleno, limpiar el buffer
	        for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	80fb      	strh	r3, [r7, #6]
 8000efc:	e006      	b.n	8000f0c <USART3_IRQHandler+0x44>
	            rxBuffer[i] = 0; // Limpia cada posición del buffer
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <USART3_IRQHandler+0x74>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	54d1      	strb	r1, [r2, r3]
	        for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f10:	d9f5      	bls.n	8000efe <USART3_IRQHandler+0x36>
	        }

	        // Reiniciar el índice y guardar el dato recibido en la primera posición
	        writeIndex = 0;
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <USART3_IRQHandler+0x70>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	801a      	strh	r2, [r3, #0]
	       // rxBuffer[writeIndex++] = receivedData;
	    }

	    // Limpiar la bandera para salir de la interrupción
	    CLEAR_BIT(USART3->RQR, 0x08);
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <USART3_IRQHandler+0x6c>)
 8000f1a:	8b1b      	ldrh	r3, [r3, #24]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <USART3_IRQHandler+0x6c>)
 8000f20:	f023 0308 	bic.w	r3, r3, #8
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	8313      	strh	r3, [r2, #24]

}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40004800 	.word	0x40004800
 8000f38:	20000166 	.word	0x20000166
 8000f3c:	2000006c 	.word	0x2000006c

08000f40 <sendStringUARTx>:

// Función que envía un dato por UART
void sendStringUARTx(USART_TypeDef *USARTx_, register const char *msg){
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1

    while(*msg)
 8000f4a:	e00c      	b.n	8000f66 <sendStringUARTx+0x26>
    {
    	USARTx_->TDR = *msg++;
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	1c53      	adds	r3, r2, #1
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	4611      	mov	r1, r2
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	8511      	strh	r1, [r2, #40]	@ 0x28
    	while(!(USARTx_->ISR & 0x080));
 8000f58:	bf00      	nop
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	69d2      	ldr	r2, [r2, #28]
 8000f5e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	d0f9      	beq.n	8000f5a <sendStringUARTx+0x1a>
    while(*msg)
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d1ef      	bne.n	8000f4c <sendStringUARTx+0xc>
    }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <sendByteUARTx>:
// Función que envía una cadena por UART

// Función que envía un solo byte (8 bits) por UART
void sendByteUARTx(USART_TypeDef *USARTx_, uint8_t data) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
    // Cargar el byte en el registro de transmisión (TDR)
    USARTx_->TDR = data;
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Esperar a que la transmisión esté completa (espera hasta que el bit TXE esté listo)
    while (!(USARTx_->ISR & 0x080));
 8000f8e:	bf00      	nop
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f9      	beq.n	8000f90 <sendByteUARTx+0x16>
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <GPS_PET>:

// Función que envía un mensaje por UART según el caso seleccionado
void GPS_PET(uint8_t caseN) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
    switch(caseN) {
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d002      	beq.n	8000fc2 <GPS_PET+0x16>
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d057      	beq.n	8001070 <GPS_PET+0xc4>
	            rxBuffer[k] = 0; // Limpia cada posición del buffer
	        }

	        break;
        default:
            break;
 8000fc0:	e06a      	b.n	8001098 <GPS_PET+0xec>
        	writeIndex = 0;
 8000fc2:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <GPS_PET+0xf4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
	        delay(1000000);
 8000fc8:	4836      	ldr	r0, [pc, #216]	@ (80010a4 <GPS_PET+0xf8>)
 8000fca:	f001 fcc7 	bl	800295c <delay>
	        sendStringUARTx(USART3, "AT+QGPSLOC? \r\n\0");
 8000fce:	4936      	ldr	r1, [pc, #216]	@ (80010a8 <GPS_PET+0xfc>)
 8000fd0:	4836      	ldr	r0, [pc, #216]	@ (80010ac <GPS_PET+0x100>)
 8000fd2:	f7ff ffb5 	bl	8000f40 <sendStringUARTx>
	        for (uint16_t j = 100; j < 200; j++) {
 8000fd6:	2364      	movs	r3, #100	@ 0x64
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	e006      	b.n	8000fea <GPS_PET+0x3e>
	            rxBuffer[j] = 0; // Limpia cada posición del buffer
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	4a34      	ldr	r2, [pc, #208]	@ (80010b0 <GPS_PET+0x104>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	54d1      	strb	r1, [r2, r3]
	        for (uint16_t j = 100; j < 200; j++) {
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	81fb      	strh	r3, [r7, #14]
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	2bc7      	cmp	r3, #199	@ 0xc7
 8000fee:	d9f5      	bls.n	8000fdc <GPS_PET+0x30>
	        delay(1000000);
 8000ff0:	482c      	ldr	r0, [pc, #176]	@ (80010a4 <GPS_PET+0xf8>)
 8000ff2:	f001 fcb3 	bl	800295c <delay>
	        ind=0;
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <GPS_PET+0x108>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
	        for(Q=36;Q<=45;Q++){
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <GPS_PET+0x10c>)
 8000ffe:	2224      	movs	r2, #36	@ 0x24
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e012      	b.n	800102a <GPS_PET+0x7e>
	            north[ind]=rxBuffer[Q];
 8001004:	4b2c      	ldr	r3, [pc, #176]	@ (80010b8 <GPS_PET+0x10c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <GPS_PET+0x108>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4928      	ldr	r1, [pc, #160]	@ (80010b0 <GPS_PET+0x104>)
 800100e:	5c8a      	ldrb	r2, [r1, r2]
 8001010:	b2d1      	uxtb	r1, r2
 8001012:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <GPS_PET+0x110>)
 8001014:	54d1      	strb	r1, [r2, r3]
	            ind++;
 8001016:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <GPS_PET+0x108>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a25      	ldr	r2, [pc, #148]	@ (80010b4 <GPS_PET+0x108>)
 800101e:	6013      	str	r3, [r2, #0]
	        for(Q=36;Q<=45;Q++){
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <GPS_PET+0x10c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a24      	ldr	r2, [pc, #144]	@ (80010b8 <GPS_PET+0x10c>)
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <GPS_PET+0x10c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001030:	dde8      	ble.n	8001004 <GPS_PET+0x58>
	        ind=0;
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <GPS_PET+0x108>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
            for(Q=47;Q<=56;Q++){
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <GPS_PET+0x10c>)
 800103a:	222f      	movs	r2, #47	@ 0x2f
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e012      	b.n	8001066 <GPS_PET+0xba>
                west[ind]=rxBuffer[Q];
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <GPS_PET+0x10c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <GPS_PET+0x108>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4919      	ldr	r1, [pc, #100]	@ (80010b0 <GPS_PET+0x104>)
 800104a:	5c8a      	ldrb	r2, [r1, r2]
 800104c:	b2d1      	uxtb	r1, r2
 800104e:	4a1c      	ldr	r2, [pc, #112]	@ (80010c0 <GPS_PET+0x114>)
 8001050:	54d1      	strb	r1, [r2, r3]
                ind++;
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <GPS_PET+0x108>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <GPS_PET+0x108>)
 800105a:	6013      	str	r3, [r2, #0]
            for(Q=47;Q<=56;Q++){
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <GPS_PET+0x10c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a15      	ldr	r2, [pc, #84]	@ (80010b8 <GPS_PET+0x10c>)
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <GPS_PET+0x10c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b38      	cmp	r3, #56	@ 0x38
 800106c:	dde8      	ble.n	8001040 <GPS_PET+0x94>
            break;
 800106e:	e013      	b.n	8001098 <GPS_PET+0xec>
        	writeIndex = 100;
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <GPS_PET+0xf4>)
 8001072:	2264      	movs	r2, #100	@ 0x64
 8001074:	801a      	strh	r2, [r3, #0]
	        delay(1000000);
 8001076:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <GPS_PET+0xf8>)
 8001078:	f001 fc70 	bl	800295c <delay>
	        for (uint16_t k = 0; k < 100; k++) {
 800107c:	2300      	movs	r3, #0
 800107e:	81bb      	strh	r3, [r7, #12]
 8001080:	e006      	b.n	8001090 <GPS_PET+0xe4>
	            rxBuffer[k] = 0; // Limpia cada posición del buffer
 8001082:	89bb      	ldrh	r3, [r7, #12]
 8001084:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <GPS_PET+0x104>)
 8001086:	2100      	movs	r1, #0
 8001088:	54d1      	strb	r1, [r2, r3]
	        for (uint16_t k = 0; k < 100; k++) {
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	81bb      	strh	r3, [r7, #12]
 8001090:	89bb      	ldrh	r3, [r7, #12]
 8001092:	2b63      	cmp	r3, #99	@ 0x63
 8001094:	d9f5      	bls.n	8001082 <GPS_PET+0xd6>
	        break;
 8001096:	bf00      	nop
    }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000166 	.word	0x20000166
 80010a4:	000f4240 	.word	0x000f4240
 80010a8:	080035d8 	.word	0x080035d8
 80010ac:	40004800 	.word	0x40004800
 80010b0:	2000006c 	.word	0x2000006c
 80010b4:	20000294 	.word	0x20000294
 80010b8:	20000298 	.word	0x20000298
 80010bc:	2000026c 	.word	0x2000026c
 80010c0:	20000280 	.word	0x20000280

080010c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0c      	blt.n	80010f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	@ (80010fc <__NVIC_ClearPendingIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	3360      	adds	r3, #96	@ 0x60
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100

08001100 <SSD1306_Init>:





void SSD1306_Init(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

	// Apaga la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xAE);  // Display OFF
 8001104:	23ae      	movs	r3, #174	@ 0xae
 8001106:	2200      	movs	r2, #0
 8001108:	213c      	movs	r1, #60	@ 0x3c
 800110a:	484a      	ldr	r0, [pc, #296]	@ (8001234 <SSD1306_Init+0x134>)
 800110c:	f7ff fdca 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura la frecuencia del reloj
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xD5);  // Set display clock divide ratio/oscillator frequency
 8001110:	23d5      	movs	r3, #213	@ 0xd5
 8001112:	2200      	movs	r2, #0
 8001114:	213c      	movs	r1, #60	@ 0x3c
 8001116:	4847      	ldr	r0, [pc, #284]	@ (8001234 <SSD1306_Init+0x134>)
 8001118:	f7ff fdc4 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x80);  // Recommended oscillator frequency
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	2200      	movs	r2, #0
 8001120:	213c      	movs	r1, #60	@ 0x3c
 8001122:	4844      	ldr	r0, [pc, #272]	@ (8001234 <SSD1306_Init+0x134>)
 8001124:	f7ff fdbe 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura la multiplexación (64 multiplex para 128x64)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA8);  // Set multiplex ratio
 8001128:	23a8      	movs	r3, #168	@ 0xa8
 800112a:	2200      	movs	r2, #0
 800112c:	213c      	movs	r1, #60	@ 0x3c
 800112e:	4841      	ldr	r0, [pc, #260]	@ (8001234 <SSD1306_Init+0x134>)
 8001130:	f7ff fdb8 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x3F);  // Multiplex ratio is 64 (for 128x64 display)
 8001134:	233f      	movs	r3, #63	@ 0x3f
 8001136:	2200      	movs	r2, #0
 8001138:	213c      	movs	r1, #60	@ 0x3c
 800113a:	483e      	ldr	r0, [pc, #248]	@ (8001234 <SSD1306_Init+0x134>)
 800113c:	f7ff fdb2 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura el offset de la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xD3);  // Set display offset
 8001140:	23d3      	movs	r3, #211	@ 0xd3
 8001142:	2200      	movs	r2, #0
 8001144:	213c      	movs	r1, #60	@ 0x3c
 8001146:	483b      	ldr	r0, [pc, #236]	@ (8001234 <SSD1306_Init+0x134>)
 8001148:	f7ff fdac 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);  // No offset
 800114c:	2300      	movs	r3, #0
 800114e:	2200      	movs	r2, #0
 8001150:	213c      	movs	r1, #60	@ 0x3c
 8001152:	4838      	ldr	r0, [pc, #224]	@ (8001234 <SSD1306_Init+0x134>)
 8001154:	f7ff fda6 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Línea de inicio de la pantalla en 0
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x40);  // Set display start line at 0
 8001158:	2340      	movs	r3, #64	@ 0x40
 800115a:	2200      	movs	r2, #0
 800115c:	213c      	movs	r1, #60	@ 0x3c
 800115e:	4835      	ldr	r0, [pc, #212]	@ (8001234 <SSD1306_Init+0x134>)
 8001160:	f7ff fda0 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Habilita el regulador de la bomba de carga (Charge Pump)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x8D);  // Enable charge pump regulator
 8001164:	238d      	movs	r3, #141	@ 0x8d
 8001166:	2200      	movs	r2, #0
 8001168:	213c      	movs	r1, #60	@ 0x3c
 800116a:	4832      	ldr	r0, [pc, #200]	@ (8001234 <SSD1306_Init+0x134>)
 800116c:	f7ff fd9a 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x14);  // Enable charge pump
 8001170:	2314      	movs	r3, #20
 8001172:	2200      	movs	r2, #0
 8001174:	213c      	movs	r1, #60	@ 0x3c
 8001176:	482f      	ldr	r0, [pc, #188]	@ (8001234 <SSD1306_Init+0x134>)
 8001178:	f7ff fd94 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Establece el modo de direccionamiento de memoria
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x20);  // Set memory addressing mode
 800117c:	2320      	movs	r3, #32
 800117e:	2200      	movs	r2, #0
 8001180:	213c      	movs	r1, #60	@ 0x3c
 8001182:	482c      	ldr	r0, [pc, #176]	@ (8001234 <SSD1306_Init+0x134>)
 8001184:	f7ff fd8e 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);  // Horizontal addressing mode
 8001188:	2300      	movs	r3, #0
 800118a:	2200      	movs	r2, #0
 800118c:	213c      	movs	r1, #60	@ 0x3c
 800118e:	4829      	ldr	r0, [pc, #164]	@ (8001234 <SSD1306_Init+0x134>)
 8001190:	f7ff fd88 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Reconfigura el mapa de segmentos (columna 127 mapeada a SEG0)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA1);  // Set segment re-map (A0/A1)
 8001194:	23a1      	movs	r3, #161	@ 0xa1
 8001196:	2200      	movs	r2, #0
 8001198:	213c      	movs	r1, #60	@ 0x3c
 800119a:	4826      	ldr	r0, [pc, #152]	@ (8001234 <SSD1306_Init+0x134>)
 800119c:	f7ff fd82 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura la dirección de escaneo de salida COM
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xC8);  // Set COM output scan direction (C0/C8)
 80011a0:	23c8      	movs	r3, #200	@ 0xc8
 80011a2:	2200      	movs	r2, #0
 80011a4:	213c      	movs	r1, #60	@ 0x3c
 80011a6:	4823      	ldr	r0, [pc, #140]	@ (8001234 <SSD1306_Init+0x134>)
 80011a8:	f7ff fd7c 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura los pines COM
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xDA);  // Set COM pins hardware configuration
 80011ac:	23da      	movs	r3, #218	@ 0xda
 80011ae:	2200      	movs	r2, #0
 80011b0:	213c      	movs	r1, #60	@ 0x3c
 80011b2:	4820      	ldr	r0, [pc, #128]	@ (8001234 <SSD1306_Init+0x134>)
 80011b4:	f7ff fd76 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x12);  // Alternative COM pin config
 80011b8:	2312      	movs	r3, #18
 80011ba:	2200      	movs	r2, #0
 80011bc:	213c      	movs	r1, #60	@ 0x3c
 80011be:	481d      	ldr	r0, [pc, #116]	@ (8001234 <SSD1306_Init+0x134>)
 80011c0:	f7ff fd70 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Establece el nivel de contraste de la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x81);  // Set contrast control
 80011c4:	2381      	movs	r3, #129	@ 0x81
 80011c6:	2200      	movs	r2, #0
 80011c8:	213c      	movs	r1, #60	@ 0x3c
 80011ca:	481a      	ldr	r0, [pc, #104]	@ (8001234 <SSD1306_Init+0x134>)
 80011cc:	f7ff fd6a 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x7F);  // Contrast level (0x7F is typical)
 80011d0:	237f      	movs	r3, #127	@ 0x7f
 80011d2:	2200      	movs	r2, #0
 80011d4:	213c      	movs	r1, #60	@ 0x3c
 80011d6:	4817      	ldr	r0, [pc, #92]	@ (8001234 <SSD1306_Init+0x134>)
 80011d8:	f7ff fd64 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Deshabilita la inversa de la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);  // Disable entire display ON (resume to RAM content)
 80011dc:	23a4      	movs	r3, #164	@ 0xa4
 80011de:	2200      	movs	r2, #0
 80011e0:	213c      	movs	r1, #60	@ 0x3c
 80011e2:	4814      	ldr	r0, [pc, #80]	@ (8001234 <SSD1306_Init+0x134>)
 80011e4:	f7ff fd5e 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Establece el modo de visualización normal (sin inversión)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 80011e8:	23a6      	movs	r3, #166	@ 0xa6
 80011ea:	2200      	movs	r2, #0
 80011ec:	213c      	movs	r1, #60	@ 0x3c
 80011ee:	4811      	ldr	r0, [pc, #68]	@ (8001234 <SSD1306_Init+0x134>)
 80011f0:	f7ff fd58 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura el rango de desplazamiento (horizontal)
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xD9);  // Set pre-charge period
 80011f4:	23d9      	movs	r3, #217	@ 0xd9
 80011f6:	2200      	movs	r2, #0
 80011f8:	213c      	movs	r1, #60	@ 0x3c
 80011fa:	480e      	ldr	r0, [pc, #56]	@ (8001234 <SSD1306_Init+0x134>)
 80011fc:	f7ff fd52 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xF1);  // Pre-charge period (recommended value)
 8001200:	23f1      	movs	r3, #241	@ 0xf1
 8001202:	2200      	movs	r2, #0
 8001204:	213c      	movs	r1, #60	@ 0x3c
 8001206:	480b      	ldr	r0, [pc, #44]	@ (8001234 <SSD1306_Init+0x134>)
 8001208:	f7ff fd4c 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Configura el voltaje de desactivación del driver
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xDB);  // Set VCOMH deselect level
 800120c:	23db      	movs	r3, #219	@ 0xdb
 800120e:	2200      	movs	r2, #0
 8001210:	213c      	movs	r1, #60	@ 0x3c
 8001212:	4808      	ldr	r0, [pc, #32]	@ (8001234 <SSD1306_Init+0x134>)
 8001214:	f7ff fd46 	bl	8000ca4 <I2C_Tx_2Bytes>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x40);  // VCOMH deselect level (0x40 recommended)
 8001218:	2340      	movs	r3, #64	@ 0x40
 800121a:	2200      	movs	r2, #0
 800121c:	213c      	movs	r1, #60	@ 0x3c
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <SSD1306_Init+0x134>)
 8001220:	f7ff fd40 	bl	8000ca4 <I2C_Tx_2Bytes>

	// Enciende la pantalla
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xAF);  // Display ON
 8001224:	23af      	movs	r3, #175	@ 0xaf
 8001226:	2200      	movs	r2, #0
 8001228:	213c      	movs	r1, #60	@ 0x3c
 800122a:	4802      	ldr	r0, [pc, #8]	@ (8001234 <SSD1306_Init+0x134>)
 800122c:	f7ff fd3a 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005c00 	.word	0x40005c00

08001238 <SSD1306_WriteString>:



void SSD1306_WriteString(char *cadena){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    unsigned int i = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
    while (cadena[i] != 0) {
 8001244:	e009      	b.n	800125a <SSD1306_WriteString+0x22>
        SSD1306_WriteChar(cadena[i]); // Escribir cada carácter
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f80e 	bl	8001270 <SSD1306_WriteChar>
        i++;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
    while (cadena[i] != 0) {
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ef      	bne.n	8001246 <SSD1306_WriteString+0xe>
    }
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SSD1306_WriteChar>:



void SSD1306_WriteChar(char C){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]

    switch (C){
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	3b20      	subs	r3, #32
 800127e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001280:	f200 80f2 	bhi.w	8001468 <SSD1306_WriteChar+0x1f8>
 8001284:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <SSD1306_WriteChar+0x1c>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	08001415 	.word	0x08001415
 8001290:	0800141b 	.word	0x0800141b
 8001294:	08001469 	.word	0x08001469
 8001298:	08001469 	.word	0x08001469
 800129c:	08001469 	.word	0x08001469
 80012a0:	08001469 	.word	0x08001469
 80012a4:	08001469 	.word	0x08001469
 80012a8:	08001469 	.word	0x08001469
 80012ac:	08001469 	.word	0x08001469
 80012b0:	08001469 	.word	0x08001469
 80012b4:	08001463 	.word	0x08001463
 80012b8:	08001469 	.word	0x08001469
 80012bc:	08001469 	.word	0x08001469
 80012c0:	08001469 	.word	0x08001469
 80012c4:	08001469 	.word	0x08001469
 80012c8:	08001469 	.word	0x08001469
 80012cc:	08001457 	.word	0x08001457
 80012d0:	08001421 	.word	0x08001421
 80012d4:	08001427 	.word	0x08001427
 80012d8:	0800142d 	.word	0x0800142d
 80012dc:	08001433 	.word	0x08001433
 80012e0:	08001439 	.word	0x08001439
 80012e4:	0800143f 	.word	0x0800143f
 80012e8:	08001445 	.word	0x08001445
 80012ec:	0800144b 	.word	0x0800144b
 80012f0:	08001451 	.word	0x08001451
 80012f4:	0800145d 	.word	0x0800145d
 80012f8:	08001469 	.word	0x08001469
 80012fc:	08001469 	.word	0x08001469
 8001300:	08001469 	.word	0x08001469
 8001304:	08001469 	.word	0x08001469
 8001308:	08001469 	.word	0x08001469
 800130c:	08001469 	.word	0x08001469
 8001310:	08001379 	.word	0x08001379
 8001314:	0800137f 	.word	0x0800137f
 8001318:	08001385 	.word	0x08001385
 800131c:	0800138b 	.word	0x0800138b
 8001320:	08001391 	.word	0x08001391
 8001324:	08001397 	.word	0x08001397
 8001328:	0800139d 	.word	0x0800139d
 800132c:	080013a3 	.word	0x080013a3
 8001330:	080013a9 	.word	0x080013a9
 8001334:	080013af 	.word	0x080013af
 8001338:	080013b5 	.word	0x080013b5
 800133c:	080013bb 	.word	0x080013bb
 8001340:	080013c1 	.word	0x080013c1
 8001344:	080013c7 	.word	0x080013c7
 8001348:	080013cd 	.word	0x080013cd
 800134c:	080013d3 	.word	0x080013d3
 8001350:	080013d9 	.word	0x080013d9
 8001354:	080013df 	.word	0x080013df
 8001358:	080013e5 	.word	0x080013e5
 800135c:	080013eb 	.word	0x080013eb
 8001360:	080013f1 	.word	0x080013f1
 8001364:	080013f7 	.word	0x080013f7
 8001368:	080013fd 	.word	0x080013fd
 800136c:	08001403 	.word	0x08001403
 8001370:	08001409 	.word	0x08001409
 8001374:	0800140f 	.word	0x0800140f
    case 'A':
Letra_A();
 8001378:	f000 f87a 	bl	8001470 <Letra_A>
    break;
 800137c:	e074      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'B':
Letra_B();
 800137e:	f000 f8a7 	bl	80014d0 <Letra_B>
    break;
 8001382:	e071      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'C':
Letra_C();
 8001384:	f000 f8d4 	bl	8001530 <Letra_C>
    break;
 8001388:	e06e      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'D':
Letra_D();
 800138a:	f000 f901 	bl	8001590 <Letra_D>
    break;
 800138e:	e06b      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'E':
Letra_E();
 8001390:	f000 f92e 	bl	80015f0 <Letra_E>
    break;
 8001394:	e068      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'F':
Letra_F();
 8001396:	f000 f95b 	bl	8001650 <Letra_F>
    break;
 800139a:	e065      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'G':
Letra_G();
 800139c:	f000 f988 	bl	80016b0 <Letra_G>
    break;
 80013a0:	e062      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'H':
Letra_H();
 80013a2:	f000 f9b5 	bl	8001710 <Letra_H>
    break;
 80013a6:	e05f      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'I':
Letra_I();
 80013a8:	f000 f9e2 	bl	8001770 <Letra_I>
    break;
 80013ac:	e05c      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'J':
Letra_J();
 80013ae:	f000 fa0f 	bl	80017d0 <Letra_J>
    break;
 80013b2:	e059      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'K':
Letra_K();
 80013b4:	f000 fa3c 	bl	8001830 <Letra_K>
    break;
 80013b8:	e056      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'L':
Letra_L();
 80013ba:	f000 fa69 	bl	8001890 <Letra_L>
    break;
 80013be:	e053      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'M':
Letra_M();
 80013c0:	f000 fa96 	bl	80018f0 <Letra_M>
    break;
 80013c4:	e050      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'N':
Letra_N();
 80013c6:	f000 fac9 	bl	800195c <Letra_N>
    break;
 80013ca:	e04d      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'O':
Letra_O();
 80013cc:	f000 faf6 	bl	80019bc <Letra_O>
    break;
 80013d0:	e04a      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'P':
Letra_P();
 80013d2:	f000 fb23 	bl	8001a1c <Letra_P>
    break;
 80013d6:	e047      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'Q':
Letra_Q();
 80013d8:	f000 fb50 	bl	8001a7c <Letra_Q>
    break;
 80013dc:	e044      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'R':
Letra_R();
 80013de:	f000 fb7d 	bl	8001adc <Letra_R>
    break;
 80013e2:	e041      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'S':
Letra_S();
 80013e4:	f000 fbaa 	bl	8001b3c <Letra_S>
    break;
 80013e8:	e03e      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'T':
Letra_T();
 80013ea:	f000 fbd7 	bl	8001b9c <Letra_T>
    break;
 80013ee:	e03b      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'U':
Letra_U();
 80013f0:	f000 fc04 	bl	8001bfc <Letra_U>
    break;
 80013f4:	e038      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'V':
Letra_U();
 80013f6:	f000 fc01 	bl	8001bfc <Letra_U>
    break;
 80013fa:	e035      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
     case 'W':
Letra_W();
 80013fc:	f000 fc2e 	bl	8001c5c <Letra_W>
    break;
 8001400:	e032      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'X':
Letra_X();
 8001402:	f000 fc61 	bl	8001cc8 <Letra_X>
    break;
 8001406:	e02f      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
    case 'Y':
Letra_Y();
 8001408:	f000 fc8e 	bl	8001d28 <Letra_Y>
    break;
 800140c:	e02c      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case 'Z':
Letra_Z();
 800140e:	f000 fcbb 	bl	8001d88 <Letra_Z>
    break;
 8001412:	e029      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case ' ':
Espacio();
 8001414:	f000 fce8 	bl	8001de8 <Espacio>
    break;
 8001418:	e026      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '!':
Admiracion();
 800141a:	f000 fd03 	bl	8001e24 <Admiracion>
    break;
 800141e:	e023      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '1':
Numero_1();
 8001420:	f000 fd24 	bl	8001e6c <Numero_1>
    break;
 8001424:	e020      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '2':
Numero_2();
 8001426:	f000 fd45 	bl	8001eb4 <Numero_2>
    break;
 800142a:	e01d      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '3':
Numero_3();
 800142c:	f000 fd72 	bl	8001f14 <Numero_3>
    break;
 8001430:	e01a      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '4':
Numero_4();
 8001432:	f000 fd9f 	bl	8001f74 <Numero_4>
    break;
 8001436:	e017      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '5':
Numero_5();
 8001438:	f000 fdcc 	bl	8001fd4 <Numero_5>
    break;
 800143c:	e014      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '6':
Numero_6();
 800143e:	f000 fdf9 	bl	8002034 <Numero_6>
    break;
 8001442:	e011      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '7':
Numero_7();
 8001444:	f000 fe26 	bl	8002094 <Numero_7>
    break;
 8001448:	e00e      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '8':
Numero_8();
 800144a:	f000 fe53 	bl	80020f4 <Numero_8>
    break;
 800144e:	e00b      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '9':
Numero_9();
 8001450:	f000 fe80 	bl	8002154 <Numero_9>
    break;
 8001454:	e008      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '0':
Numero_0();
 8001456:	f000 fead 	bl	80021b4 <Numero_0>
    break;
 800145a:	e005      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case ':':
DosPuntos();
 800145c:	f000 feda 	bl	8002214 <DosPuntos>
    break;
 8001460:	e002      	b.n	8001468 <SSD1306_WriteChar+0x1f8>
        case '*':
Simbolo_Grados();
 8001462:	f000 feef 	bl	8002244 <Simbolo_Grados>
	break;
 8001466:	bf00      	nop
    }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <Letra_A>:




//LETRAS
void Letra_A(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001474:	23ff      	movs	r3, #255	@ 0xff
 8001476:	2240      	movs	r2, #64	@ 0x40
 8001478:	213c      	movs	r1, #60	@ 0x3c
 800147a:	4814      	ldr	r0, [pc, #80]	@ (80014cc <Letra_A+0x5c>)
 800147c:	f7ff fc12 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001480:	23ff      	movs	r3, #255	@ 0xff
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	213c      	movs	r1, #60	@ 0x3c
 8001486:	4811      	ldr	r0, [pc, #68]	@ (80014cc <Letra_A+0x5c>)
 8001488:	f7ff fc0c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 800148c:	2333      	movs	r3, #51	@ 0x33
 800148e:	2240      	movs	r2, #64	@ 0x40
 8001490:	213c      	movs	r1, #60	@ 0x3c
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <Letra_A+0x5c>)
 8001494:	f7ff fc06 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 8001498:	2333      	movs	r3, #51	@ 0x33
 800149a:	2240      	movs	r2, #64	@ 0x40
 800149c:	213c      	movs	r1, #60	@ 0x3c
 800149e:	480b      	ldr	r0, [pc, #44]	@ (80014cc <Letra_A+0x5c>)
 80014a0:	f7ff fc00 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80014a4:	23ff      	movs	r3, #255	@ 0xff
 80014a6:	2240      	movs	r2, #64	@ 0x40
 80014a8:	213c      	movs	r1, #60	@ 0x3c
 80014aa:	4808      	ldr	r0, [pc, #32]	@ (80014cc <Letra_A+0x5c>)
 80014ac:	f7ff fbfa 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	2240      	movs	r2, #64	@ 0x40
 80014b4:	213c      	movs	r1, #60	@ 0x3c
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <Letra_A+0x5c>)
 80014b8:	f7ff fbf4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80014bc:	2300      	movs	r3, #0
 80014be:	2240      	movs	r2, #64	@ 0x40
 80014c0:	213c      	movs	r1, #60	@ 0x3c
 80014c2:	4802      	ldr	r0, [pc, #8]	@ (80014cc <Letra_A+0x5c>)
 80014c4:	f7ff fbee 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40005c00 	.word	0x40005c00

080014d0 <Letra_B>:
void Letra_B(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80014d4:	23ff      	movs	r3, #255	@ 0xff
 80014d6:	2240      	movs	r2, #64	@ 0x40
 80014d8:	213c      	movs	r1, #60	@ 0x3c
 80014da:	4814      	ldr	r0, [pc, #80]	@ (800152c <Letra_B+0x5c>)
 80014dc:	f7ff fbe2 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80014e0:	23ff      	movs	r3, #255	@ 0xff
 80014e2:	2240      	movs	r2, #64	@ 0x40
 80014e4:	213c      	movs	r1, #60	@ 0x3c
 80014e6:	4811      	ldr	r0, [pc, #68]	@ (800152c <Letra_B+0x5c>)
 80014e8:	f7ff fbdc 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x99);
 80014ec:	2399      	movs	r3, #153	@ 0x99
 80014ee:	2240      	movs	r2, #64	@ 0x40
 80014f0:	213c      	movs	r1, #60	@ 0x3c
 80014f2:	480e      	ldr	r0, [pc, #56]	@ (800152c <Letra_B+0x5c>)
 80014f4:	f7ff fbd6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x99);
 80014f8:	2399      	movs	r3, #153	@ 0x99
 80014fa:	2240      	movs	r2, #64	@ 0x40
 80014fc:	213c      	movs	r1, #60	@ 0x3c
 80014fe:	480b      	ldr	r0, [pc, #44]	@ (800152c <Letra_B+0x5c>)
 8001500:	f7ff fbd0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001504:	23ff      	movs	r3, #255	@ 0xff
 8001506:	2240      	movs	r2, #64	@ 0x40
 8001508:	213c      	movs	r1, #60	@ 0x3c
 800150a:	4808      	ldr	r0, [pc, #32]	@ (800152c <Letra_B+0x5c>)
 800150c:	f7ff fbca 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001510:	23ff      	movs	r3, #255	@ 0xff
 8001512:	2240      	movs	r2, #64	@ 0x40
 8001514:	213c      	movs	r1, #60	@ 0x3c
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <Letra_B+0x5c>)
 8001518:	f7ff fbc4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800151c:	2300      	movs	r3, #0
 800151e:	2240      	movs	r2, #64	@ 0x40
 8001520:	213c      	movs	r1, #60	@ 0x3c
 8001522:	4802      	ldr	r0, [pc, #8]	@ (800152c <Letra_B+0x5c>)
 8001524:	f7ff fbbe 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005c00 	.word	0x40005c00

08001530 <Letra_C>:
void Letra_C(void){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001534:	23ff      	movs	r3, #255	@ 0xff
 8001536:	2240      	movs	r2, #64	@ 0x40
 8001538:	213c      	movs	r1, #60	@ 0x3c
 800153a:	4814      	ldr	r0, [pc, #80]	@ (800158c <Letra_C+0x5c>)
 800153c:	f7ff fbb2 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001540:	23ff      	movs	r3, #255	@ 0xff
 8001542:	2240      	movs	r2, #64	@ 0x40
 8001544:	213c      	movs	r1, #60	@ 0x3c
 8001546:	4811      	ldr	r0, [pc, #68]	@ (800158c <Letra_C+0x5c>)
 8001548:	f7ff fbac 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 800154c:	23c3      	movs	r3, #195	@ 0xc3
 800154e:	2240      	movs	r2, #64	@ 0x40
 8001550:	213c      	movs	r1, #60	@ 0x3c
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <Letra_C+0x5c>)
 8001554:	f7ff fba6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001558:	23c3      	movs	r3, #195	@ 0xc3
 800155a:	2240      	movs	r2, #64	@ 0x40
 800155c:	213c      	movs	r1, #60	@ 0x3c
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <Letra_C+0x5c>)
 8001560:	f7ff fba0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001564:	23c3      	movs	r3, #195	@ 0xc3
 8001566:	2240      	movs	r2, #64	@ 0x40
 8001568:	213c      	movs	r1, #60	@ 0x3c
 800156a:	4808      	ldr	r0, [pc, #32]	@ (800158c <Letra_C+0x5c>)
 800156c:	f7ff fb9a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001570:	23c3      	movs	r3, #195	@ 0xc3
 8001572:	2240      	movs	r2, #64	@ 0x40
 8001574:	213c      	movs	r1, #60	@ 0x3c
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <Letra_C+0x5c>)
 8001578:	f7ff fb94 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800157c:	2300      	movs	r3, #0
 800157e:	2240      	movs	r2, #64	@ 0x40
 8001580:	213c      	movs	r1, #60	@ 0x3c
 8001582:	4802      	ldr	r0, [pc, #8]	@ (800158c <Letra_C+0x5c>)
 8001584:	f7ff fb8e 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40005c00 	.word	0x40005c00

08001590 <Letra_D>:
void Letra_D(void){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001594:	23ff      	movs	r3, #255	@ 0xff
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	213c      	movs	r1, #60	@ 0x3c
 800159a:	4814      	ldr	r0, [pc, #80]	@ (80015ec <Letra_D+0x5c>)
 800159c:	f7ff fb82 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80015a0:	23ff      	movs	r3, #255	@ 0xff
 80015a2:	2240      	movs	r2, #64	@ 0x40
 80015a4:	213c      	movs	r1, #60	@ 0x3c
 80015a6:	4811      	ldr	r0, [pc, #68]	@ (80015ec <Letra_D+0x5c>)
 80015a8:	f7ff fb7c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80015ac:	23c3      	movs	r3, #195	@ 0xc3
 80015ae:	2240      	movs	r2, #64	@ 0x40
 80015b0:	213c      	movs	r1, #60	@ 0x3c
 80015b2:	480e      	ldr	r0, [pc, #56]	@ (80015ec <Letra_D+0x5c>)
 80015b4:	f7ff fb76 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80015b8:	23c3      	movs	r3, #195	@ 0xc3
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	213c      	movs	r1, #60	@ 0x3c
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <Letra_D+0x5c>)
 80015c0:	f7ff fb70 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80015c4:	23ff      	movs	r3, #255	@ 0xff
 80015c6:	2240      	movs	r2, #64	@ 0x40
 80015c8:	213c      	movs	r1, #60	@ 0x3c
 80015ca:	4808      	ldr	r0, [pc, #32]	@ (80015ec <Letra_D+0x5c>)
 80015cc:	f7ff fb6a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80015d0:	23ff      	movs	r3, #255	@ 0xff
 80015d2:	2240      	movs	r2, #64	@ 0x40
 80015d4:	213c      	movs	r1, #60	@ 0x3c
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <Letra_D+0x5c>)
 80015d8:	f7ff fb64 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80015dc:	2300      	movs	r3, #0
 80015de:	2240      	movs	r2, #64	@ 0x40
 80015e0:	213c      	movs	r1, #60	@ 0x3c
 80015e2:	4802      	ldr	r0, [pc, #8]	@ (80015ec <Letra_D+0x5c>)
 80015e4:	f7ff fb5e 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40005c00 	.word	0x40005c00

080015f0 <Letra_E>:

void Letra_E(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80015f4:	23ff      	movs	r3, #255	@ 0xff
 80015f6:	2240      	movs	r2, #64	@ 0x40
 80015f8:	213c      	movs	r1, #60	@ 0x3c
 80015fa:	4814      	ldr	r0, [pc, #80]	@ (800164c <Letra_E+0x5c>)
 80015fc:	f7ff fb52 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001600:	23ff      	movs	r3, #255	@ 0xff
 8001602:	2240      	movs	r2, #64	@ 0x40
 8001604:	213c      	movs	r1, #60	@ 0x3c
 8001606:	4811      	ldr	r0, [pc, #68]	@ (800164c <Letra_E+0x5c>)
 8001608:	f7ff fb4c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800160c:	23db      	movs	r3, #219	@ 0xdb
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	213c      	movs	r1, #60	@ 0x3c
 8001612:	480e      	ldr	r0, [pc, #56]	@ (800164c <Letra_E+0x5c>)
 8001614:	f7ff fb46 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001618:	23db      	movs	r3, #219	@ 0xdb
 800161a:	2240      	movs	r2, #64	@ 0x40
 800161c:	213c      	movs	r1, #60	@ 0x3c
 800161e:	480b      	ldr	r0, [pc, #44]	@ (800164c <Letra_E+0x5c>)
 8001620:	f7ff fb40 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001624:	23db      	movs	r3, #219	@ 0xdb
 8001626:	2240      	movs	r2, #64	@ 0x40
 8001628:	213c      	movs	r1, #60	@ 0x3c
 800162a:	4808      	ldr	r0, [pc, #32]	@ (800164c <Letra_E+0x5c>)
 800162c:	f7ff fb3a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001630:	23db      	movs	r3, #219	@ 0xdb
 8001632:	2240      	movs	r2, #64	@ 0x40
 8001634:	213c      	movs	r1, #60	@ 0x3c
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <Letra_E+0x5c>)
 8001638:	f7ff fb34 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800163c:	2300      	movs	r3, #0
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	213c      	movs	r1, #60	@ 0x3c
 8001642:	4802      	ldr	r0, [pc, #8]	@ (800164c <Letra_E+0x5c>)
 8001644:	f7ff fb2e 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005c00 	.word	0x40005c00

08001650 <Letra_F>:
void Letra_F(void){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001654:	23ff      	movs	r3, #255	@ 0xff
 8001656:	2240      	movs	r2, #64	@ 0x40
 8001658:	213c      	movs	r1, #60	@ 0x3c
 800165a:	4814      	ldr	r0, [pc, #80]	@ (80016ac <Letra_F+0x5c>)
 800165c:	f7ff fb22 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001660:	23ff      	movs	r3, #255	@ 0xff
 8001662:	2240      	movs	r2, #64	@ 0x40
 8001664:	213c      	movs	r1, #60	@ 0x3c
 8001666:	4811      	ldr	r0, [pc, #68]	@ (80016ac <Letra_F+0x5c>)
 8001668:	f7ff fb1c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 800166c:	2333      	movs	r3, #51	@ 0x33
 800166e:	2240      	movs	r2, #64	@ 0x40
 8001670:	213c      	movs	r1, #60	@ 0x3c
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <Letra_F+0x5c>)
 8001674:	f7ff fb16 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x33);
 8001678:	2333      	movs	r3, #51	@ 0x33
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	213c      	movs	r1, #60	@ 0x3c
 800167e:	480b      	ldr	r0, [pc, #44]	@ (80016ac <Letra_F+0x5c>)
 8001680:	f7ff fb10 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001684:	2303      	movs	r3, #3
 8001686:	2240      	movs	r2, #64	@ 0x40
 8001688:	213c      	movs	r1, #60	@ 0x3c
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <Letra_F+0x5c>)
 800168c:	f7ff fb0a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001690:	2303      	movs	r3, #3
 8001692:	2240      	movs	r2, #64	@ 0x40
 8001694:	213c      	movs	r1, #60	@ 0x3c
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <Letra_F+0x5c>)
 8001698:	f7ff fb04 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800169c:	2300      	movs	r3, #0
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	213c      	movs	r1, #60	@ 0x3c
 80016a2:	4802      	ldr	r0, [pc, #8]	@ (80016ac <Letra_F+0x5c>)
 80016a4:	f7ff fafe 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40005c00 	.word	0x40005c00

080016b0 <Letra_G>:
void Letra_G(void){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80016b4:	23ff      	movs	r3, #255	@ 0xff
 80016b6:	2240      	movs	r2, #64	@ 0x40
 80016b8:	213c      	movs	r1, #60	@ 0x3c
 80016ba:	4814      	ldr	r0, [pc, #80]	@ (800170c <Letra_G+0x5c>)
 80016bc:	f7ff faf2 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80016c0:	23ff      	movs	r3, #255	@ 0xff
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	213c      	movs	r1, #60	@ 0x3c
 80016c6:	4811      	ldr	r0, [pc, #68]	@ (800170c <Letra_G+0x5c>)
 80016c8:	f7ff faec 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 80016cc:	23db      	movs	r3, #219	@ 0xdb
 80016ce:	2240      	movs	r2, #64	@ 0x40
 80016d0:	213c      	movs	r1, #60	@ 0x3c
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <Letra_G+0x5c>)
 80016d4:	f7ff fae6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 80016d8:	23db      	movs	r3, #219	@ 0xdb
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	213c      	movs	r1, #60	@ 0x3c
 80016de:	480b      	ldr	r0, [pc, #44]	@ (800170c <Letra_G+0x5c>)
 80016e0:	f7ff fae0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF8);
 80016e4:	23f8      	movs	r3, #248	@ 0xf8
 80016e6:	2240      	movs	r2, #64	@ 0x40
 80016e8:	213c      	movs	r1, #60	@ 0x3c
 80016ea:	4808      	ldr	r0, [pc, #32]	@ (800170c <Letra_G+0x5c>)
 80016ec:	f7ff fada 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF8);
 80016f0:	23f8      	movs	r3, #248	@ 0xf8
 80016f2:	2240      	movs	r2, #64	@ 0x40
 80016f4:	213c      	movs	r1, #60	@ 0x3c
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <Letra_G+0x5c>)
 80016f8:	f7ff fad4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80016fc:	2300      	movs	r3, #0
 80016fe:	2240      	movs	r2, #64	@ 0x40
 8001700:	213c      	movs	r1, #60	@ 0x3c
 8001702:	4802      	ldr	r0, [pc, #8]	@ (800170c <Letra_G+0x5c>)
 8001704:	f7ff face 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40005c00 	.word	0x40005c00

08001710 <Letra_H>:
void Letra_H(void){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001714:	23ff      	movs	r3, #255	@ 0xff
 8001716:	2240      	movs	r2, #64	@ 0x40
 8001718:	213c      	movs	r1, #60	@ 0x3c
 800171a:	4814      	ldr	r0, [pc, #80]	@ (800176c <Letra_H+0x5c>)
 800171c:	f7ff fac2 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001720:	23ff      	movs	r3, #255	@ 0xff
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	213c      	movs	r1, #60	@ 0x3c
 8001726:	4811      	ldr	r0, [pc, #68]	@ (800176c <Letra_H+0x5c>)
 8001728:	f7ff fabc 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 800172c:	2318      	movs	r3, #24
 800172e:	2240      	movs	r2, #64	@ 0x40
 8001730:	213c      	movs	r1, #60	@ 0x3c
 8001732:	480e      	ldr	r0, [pc, #56]	@ (800176c <Letra_H+0x5c>)
 8001734:	f7ff fab6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 8001738:	2318      	movs	r3, #24
 800173a:	2240      	movs	r2, #64	@ 0x40
 800173c:	213c      	movs	r1, #60	@ 0x3c
 800173e:	480b      	ldr	r0, [pc, #44]	@ (800176c <Letra_H+0x5c>)
 8001740:	f7ff fab0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001744:	23ff      	movs	r3, #255	@ 0xff
 8001746:	2240      	movs	r2, #64	@ 0x40
 8001748:	213c      	movs	r1, #60	@ 0x3c
 800174a:	4808      	ldr	r0, [pc, #32]	@ (800176c <Letra_H+0x5c>)
 800174c:	f7ff faaa 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001750:	23ff      	movs	r3, #255	@ 0xff
 8001752:	2240      	movs	r2, #64	@ 0x40
 8001754:	213c      	movs	r1, #60	@ 0x3c
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <Letra_H+0x5c>)
 8001758:	f7ff faa4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800175c:	2300      	movs	r3, #0
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	213c      	movs	r1, #60	@ 0x3c
 8001762:	4802      	ldr	r0, [pc, #8]	@ (800176c <Letra_H+0x5c>)
 8001764:	f7ff fa9e 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40005c00 	.word	0x40005c00

08001770 <Letra_I>:
void Letra_I(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001774:	23c3      	movs	r3, #195	@ 0xc3
 8001776:	2240      	movs	r2, #64	@ 0x40
 8001778:	213c      	movs	r1, #60	@ 0x3c
 800177a:	4814      	ldr	r0, [pc, #80]	@ (80017cc <Letra_I+0x5c>)
 800177c:	f7ff fa92 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001780:	23c3      	movs	r3, #195	@ 0xc3
 8001782:	2240      	movs	r2, #64	@ 0x40
 8001784:	213c      	movs	r1, #60	@ 0x3c
 8001786:	4811      	ldr	r0, [pc, #68]	@ (80017cc <Letra_I+0x5c>)
 8001788:	f7ff fa8c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800178c:	23ff      	movs	r3, #255	@ 0xff
 800178e:	2240      	movs	r2, #64	@ 0x40
 8001790:	213c      	movs	r1, #60	@ 0x3c
 8001792:	480e      	ldr	r0, [pc, #56]	@ (80017cc <Letra_I+0x5c>)
 8001794:	f7ff fa86 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001798:	23ff      	movs	r3, #255	@ 0xff
 800179a:	2240      	movs	r2, #64	@ 0x40
 800179c:	213c      	movs	r1, #60	@ 0x3c
 800179e:	480b      	ldr	r0, [pc, #44]	@ (80017cc <Letra_I+0x5c>)
 80017a0:	f7ff fa80 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80017a4:	23c3      	movs	r3, #195	@ 0xc3
 80017a6:	2240      	movs	r2, #64	@ 0x40
 80017a8:	213c      	movs	r1, #60	@ 0x3c
 80017aa:	4808      	ldr	r0, [pc, #32]	@ (80017cc <Letra_I+0x5c>)
 80017ac:	f7ff fa7a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80017b0:	23c3      	movs	r3, #195	@ 0xc3
 80017b2:	2240      	movs	r2, #64	@ 0x40
 80017b4:	213c      	movs	r1, #60	@ 0x3c
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <Letra_I+0x5c>)
 80017b8:	f7ff fa74 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80017bc:	2300      	movs	r3, #0
 80017be:	2240      	movs	r2, #64	@ 0x40
 80017c0:	213c      	movs	r1, #60	@ 0x3c
 80017c2:	4802      	ldr	r0, [pc, #8]	@ (80017cc <Letra_I+0x5c>)
 80017c4:	f7ff fa6e 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40005c00 	.word	0x40005c00

080017d0 <Letra_J>:
void Letra_J(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80017d4:	23c3      	movs	r3, #195	@ 0xc3
 80017d6:	2240      	movs	r2, #64	@ 0x40
 80017d8:	213c      	movs	r1, #60	@ 0x3c
 80017da:	4814      	ldr	r0, [pc, #80]	@ (800182c <Letra_J+0x5c>)
 80017dc:	f7ff fa62 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80017e0:	23c3      	movs	r3, #195	@ 0xc3
 80017e2:	2240      	movs	r2, #64	@ 0x40
 80017e4:	213c      	movs	r1, #60	@ 0x3c
 80017e6:	4811      	ldr	r0, [pc, #68]	@ (800182c <Letra_J+0x5c>)
 80017e8:	f7ff fa5c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80017ec:	23ff      	movs	r3, #255	@ 0xff
 80017ee:	2240      	movs	r2, #64	@ 0x40
 80017f0:	213c      	movs	r1, #60	@ 0x3c
 80017f2:	480e      	ldr	r0, [pc, #56]	@ (800182c <Letra_J+0x5c>)
 80017f4:	f7ff fa56 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80017f8:	23ff      	movs	r3, #255	@ 0xff
 80017fa:	2240      	movs	r2, #64	@ 0x40
 80017fc:	213c      	movs	r1, #60	@ 0x3c
 80017fe:	480b      	ldr	r0, [pc, #44]	@ (800182c <Letra_J+0x5c>)
 8001800:	f7ff fa50 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001804:	2303      	movs	r3, #3
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	213c      	movs	r1, #60	@ 0x3c
 800180a:	4808      	ldr	r0, [pc, #32]	@ (800182c <Letra_J+0x5c>)
 800180c:	f7ff fa4a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001810:	2303      	movs	r3, #3
 8001812:	2240      	movs	r2, #64	@ 0x40
 8001814:	213c      	movs	r1, #60	@ 0x3c
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <Letra_J+0x5c>)
 8001818:	f7ff fa44 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800181c:	2300      	movs	r3, #0
 800181e:	2240      	movs	r2, #64	@ 0x40
 8001820:	213c      	movs	r1, #60	@ 0x3c
 8001822:	4802      	ldr	r0, [pc, #8]	@ (800182c <Letra_J+0x5c>)
 8001824:	f7ff fa3e 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40005c00 	.word	0x40005c00

08001830 <Letra_K>:
void Letra_K(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001834:	23ff      	movs	r3, #255	@ 0xff
 8001836:	2240      	movs	r2, #64	@ 0x40
 8001838:	213c      	movs	r1, #60	@ 0x3c
 800183a:	4814      	ldr	r0, [pc, #80]	@ (800188c <Letra_K+0x5c>)
 800183c:	f7ff fa32 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001840:	23ff      	movs	r3, #255	@ 0xff
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	213c      	movs	r1, #60	@ 0x3c
 8001846:	4811      	ldr	r0, [pc, #68]	@ (800188c <Letra_K+0x5c>)
 8001848:	f7ff fa2c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 800184c:	2318      	movs	r3, #24
 800184e:	2240      	movs	r2, #64	@ 0x40
 8001850:	213c      	movs	r1, #60	@ 0x3c
 8001852:	480e      	ldr	r0, [pc, #56]	@ (800188c <Letra_K+0x5c>)
 8001854:	f7ff fa26 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3C);
 8001858:	233c      	movs	r3, #60	@ 0x3c
 800185a:	2240      	movs	r2, #64	@ 0x40
 800185c:	213c      	movs	r1, #60	@ 0x3c
 800185e:	480b      	ldr	r0, [pc, #44]	@ (800188c <Letra_K+0x5c>)
 8001860:	f7ff fa20 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x66);
 8001864:	2366      	movs	r3, #102	@ 0x66
 8001866:	2240      	movs	r2, #64	@ 0x40
 8001868:	213c      	movs	r1, #60	@ 0x3c
 800186a:	4808      	ldr	r0, [pc, #32]	@ (800188c <Letra_K+0x5c>)
 800186c:	f7ff fa1a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001870:	23c3      	movs	r3, #195	@ 0xc3
 8001872:	2240      	movs	r2, #64	@ 0x40
 8001874:	213c      	movs	r1, #60	@ 0x3c
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <Letra_K+0x5c>)
 8001878:	f7ff fa14 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800187c:	2300      	movs	r3, #0
 800187e:	2240      	movs	r2, #64	@ 0x40
 8001880:	213c      	movs	r1, #60	@ 0x3c
 8001882:	4802      	ldr	r0, [pc, #8]	@ (800188c <Letra_K+0x5c>)
 8001884:	f7ff fa0e 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005c00 	.word	0x40005c00

08001890 <Letra_L>:

void Letra_L(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001894:	23ff      	movs	r3, #255	@ 0xff
 8001896:	2240      	movs	r2, #64	@ 0x40
 8001898:	213c      	movs	r1, #60	@ 0x3c
 800189a:	4814      	ldr	r0, [pc, #80]	@ (80018ec <Letra_L+0x5c>)
 800189c:	f7ff fa02 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80018a0:	23ff      	movs	r3, #255	@ 0xff
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	213c      	movs	r1, #60	@ 0x3c
 80018a6:	4811      	ldr	r0, [pc, #68]	@ (80018ec <Letra_L+0x5c>)
 80018a8:	f7ff f9fc 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80018ac:	23ff      	movs	r3, #255	@ 0xff
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	213c      	movs	r1, #60	@ 0x3c
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <Letra_L+0x5c>)
 80018b4:	f7ff f9f6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 80018b8:	23c0      	movs	r3, #192	@ 0xc0
 80018ba:	2240      	movs	r2, #64	@ 0x40
 80018bc:	213c      	movs	r1, #60	@ 0x3c
 80018be:	480b      	ldr	r0, [pc, #44]	@ (80018ec <Letra_L+0x5c>)
 80018c0:	f7ff f9f0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 80018c4:	23c0      	movs	r3, #192	@ 0xc0
 80018c6:	2240      	movs	r2, #64	@ 0x40
 80018c8:	213c      	movs	r1, #60	@ 0x3c
 80018ca:	4808      	ldr	r0, [pc, #32]	@ (80018ec <Letra_L+0x5c>)
 80018cc:	f7ff f9ea 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 80018d0:	23c0      	movs	r3, #192	@ 0xc0
 80018d2:	2240      	movs	r2, #64	@ 0x40
 80018d4:	213c      	movs	r1, #60	@ 0x3c
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <Letra_L+0x5c>)
 80018d8:	f7ff f9e4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80018dc:	2300      	movs	r3, #0
 80018de:	2240      	movs	r2, #64	@ 0x40
 80018e0:	213c      	movs	r1, #60	@ 0x3c
 80018e2:	4802      	ldr	r0, [pc, #8]	@ (80018ec <Letra_L+0x5c>)
 80018e4:	f7ff f9de 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40005c00 	.word	0x40005c00

080018f0 <Letra_M>:
void Letra_M(void){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80018f4:	23ff      	movs	r3, #255	@ 0xff
 80018f6:	2240      	movs	r2, #64	@ 0x40
 80018f8:	213c      	movs	r1, #60	@ 0x3c
 80018fa:	4817      	ldr	r0, [pc, #92]	@ (8001958 <Letra_M+0x68>)
 80018fc:	f7ff f9d2 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001900:	23ff      	movs	r3, #255	@ 0xff
 8001902:	2240      	movs	r2, #64	@ 0x40
 8001904:	213c      	movs	r1, #60	@ 0x3c
 8001906:	4814      	ldr	r0, [pc, #80]	@ (8001958 <Letra_M+0x68>)
 8001908:	f7ff f9cc 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0C);
 800190c:	230c      	movs	r3, #12
 800190e:	2240      	movs	r2, #64	@ 0x40
 8001910:	213c      	movs	r1, #60	@ 0x3c
 8001912:	4811      	ldr	r0, [pc, #68]	@ (8001958 <Letra_M+0x68>)
 8001914:	f7ff f9c6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1C);
 8001918:	231c      	movs	r3, #28
 800191a:	2240      	movs	r2, #64	@ 0x40
 800191c:	213c      	movs	r1, #60	@ 0x3c
 800191e:	480e      	ldr	r0, [pc, #56]	@ (8001958 <Letra_M+0x68>)
 8001920:	f7ff f9c0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0C);
 8001924:	230c      	movs	r3, #12
 8001926:	2240      	movs	r2, #64	@ 0x40
 8001928:	213c      	movs	r1, #60	@ 0x3c
 800192a:	480b      	ldr	r0, [pc, #44]	@ (8001958 <Letra_M+0x68>)
 800192c:	f7ff f9ba 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001930:	23ff      	movs	r3, #255	@ 0xff
 8001932:	2240      	movs	r2, #64	@ 0x40
 8001934:	213c      	movs	r1, #60	@ 0x3c
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <Letra_M+0x68>)
 8001938:	f7ff f9b4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800193c:	23ff      	movs	r3, #255	@ 0xff
 800193e:	2240      	movs	r2, #64	@ 0x40
 8001940:	213c      	movs	r1, #60	@ 0x3c
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <Letra_M+0x68>)
 8001944:	f7ff f9ae 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001948:	2300      	movs	r3, #0
 800194a:	2240      	movs	r2, #64	@ 0x40
 800194c:	213c      	movs	r1, #60	@ 0x3c
 800194e:	4802      	ldr	r0, [pc, #8]	@ (8001958 <Letra_M+0x68>)
 8001950:	f7ff f9a8 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005c00 	.word	0x40005c00

0800195c <Letra_N>:
void Letra_N(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001960:	23ff      	movs	r3, #255	@ 0xff
 8001962:	2240      	movs	r2, #64	@ 0x40
 8001964:	213c      	movs	r1, #60	@ 0x3c
 8001966:	4814      	ldr	r0, [pc, #80]	@ (80019b8 <Letra_N+0x5c>)
 8001968:	f7ff f99c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800196c:	23ff      	movs	r3, #255	@ 0xff
 800196e:	2240      	movs	r2, #64	@ 0x40
 8001970:	213c      	movs	r1, #60	@ 0x3c
 8001972:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <Letra_N+0x5c>)
 8001974:	f7ff f996 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1C);
 8001978:	231c      	movs	r3, #28
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	213c      	movs	r1, #60	@ 0x3c
 800197e:	480e      	ldr	r0, [pc, #56]	@ (80019b8 <Letra_N+0x5c>)
 8001980:	f7ff f990 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x38);
 8001984:	2338      	movs	r3, #56	@ 0x38
 8001986:	2240      	movs	r2, #64	@ 0x40
 8001988:	213c      	movs	r1, #60	@ 0x3c
 800198a:	480b      	ldr	r0, [pc, #44]	@ (80019b8 <Letra_N+0x5c>)
 800198c:	f7ff f98a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001990:	23ff      	movs	r3, #255	@ 0xff
 8001992:	2240      	movs	r2, #64	@ 0x40
 8001994:	213c      	movs	r1, #60	@ 0x3c
 8001996:	4808      	ldr	r0, [pc, #32]	@ (80019b8 <Letra_N+0x5c>)
 8001998:	f7ff f984 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 800199c:	23ff      	movs	r3, #255	@ 0xff
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	213c      	movs	r1, #60	@ 0x3c
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <Letra_N+0x5c>)
 80019a4:	f7ff f97e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80019a8:	2300      	movs	r3, #0
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	213c      	movs	r1, #60	@ 0x3c
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <Letra_N+0x5c>)
 80019b0:	f7ff f978 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005c00 	.word	0x40005c00

080019bc <Letra_O>:
void Letra_O(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0


    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80019c0:	23ff      	movs	r3, #255	@ 0xff
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	213c      	movs	r1, #60	@ 0x3c
 80019c6:	4814      	ldr	r0, [pc, #80]	@ (8001a18 <Letra_O+0x5c>)
 80019c8:	f7ff f96c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80019cc:	23ff      	movs	r3, #255	@ 0xff
 80019ce:	2240      	movs	r2, #64	@ 0x40
 80019d0:	213c      	movs	r1, #60	@ 0x3c
 80019d2:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <Letra_O+0x5c>)
 80019d4:	f7ff f966 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80019d8:	23c3      	movs	r3, #195	@ 0xc3
 80019da:	2240      	movs	r2, #64	@ 0x40
 80019dc:	213c      	movs	r1, #60	@ 0x3c
 80019de:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <Letra_O+0x5c>)
 80019e0:	f7ff f960 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80019e4:	23c3      	movs	r3, #195	@ 0xc3
 80019e6:	2240      	movs	r2, #64	@ 0x40
 80019e8:	213c      	movs	r1, #60	@ 0x3c
 80019ea:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <Letra_O+0x5c>)
 80019ec:	f7ff f95a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80019f0:	23ff      	movs	r3, #255	@ 0xff
 80019f2:	2240      	movs	r2, #64	@ 0x40
 80019f4:	213c      	movs	r1, #60	@ 0x3c
 80019f6:	4808      	ldr	r0, [pc, #32]	@ (8001a18 <Letra_O+0x5c>)
 80019f8:	f7ff f954 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80019fc:	23ff      	movs	r3, #255	@ 0xff
 80019fe:	2240      	movs	r2, #64	@ 0x40
 8001a00:	213c      	movs	r1, #60	@ 0x3c
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <Letra_O+0x5c>)
 8001a04:	f7ff f94e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2240      	movs	r2, #64	@ 0x40
 8001a0c:	213c      	movs	r1, #60	@ 0x3c
 8001a0e:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <Letra_O+0x5c>)
 8001a10:	f7ff f948 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40005c00 	.word	0x40005c00

08001a1c <Letra_P>:
void Letra_P(void){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001a20:	23ff      	movs	r3, #255	@ 0xff
 8001a22:	2240      	movs	r2, #64	@ 0x40
 8001a24:	213c      	movs	r1, #60	@ 0x3c
 8001a26:	4814      	ldr	r0, [pc, #80]	@ (8001a78 <Letra_P+0x5c>)
 8001a28:	f7ff f93c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001a2c:	23ff      	movs	r3, #255	@ 0xff
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	213c      	movs	r1, #60	@ 0x3c
 8001a32:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <Letra_P+0x5c>)
 8001a34:	f7ff f936 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1B);
 8001a38:	231b      	movs	r3, #27
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	213c      	movs	r1, #60	@ 0x3c
 8001a3e:	480e      	ldr	r0, [pc, #56]	@ (8001a78 <Letra_P+0x5c>)
 8001a40:	f7ff f930 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1B);
 8001a44:	231b      	movs	r3, #27
 8001a46:	2240      	movs	r2, #64	@ 0x40
 8001a48:	213c      	movs	r1, #60	@ 0x3c
 8001a4a:	480b      	ldr	r0, [pc, #44]	@ (8001a78 <Letra_P+0x5c>)
 8001a4c:	f7ff f92a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 8001a50:	231f      	movs	r3, #31
 8001a52:	2240      	movs	r2, #64	@ 0x40
 8001a54:	213c      	movs	r1, #60	@ 0x3c
 8001a56:	4808      	ldr	r0, [pc, #32]	@ (8001a78 <Letra_P+0x5c>)
 8001a58:	f7ff f924 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 8001a5c:	231f      	movs	r3, #31
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	213c      	movs	r1, #60	@ 0x3c
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <Letra_P+0x5c>)
 8001a64:	f7ff f91e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2240      	movs	r2, #64	@ 0x40
 8001a6c:	213c      	movs	r1, #60	@ 0x3c
 8001a6e:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <Letra_P+0x5c>)
 8001a70:	f7ff f918 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40005c00 	.word	0x40005c00

08001a7c <Letra_Q>:
void Letra_Q(void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7F);
 8001a80:	237f      	movs	r3, #127	@ 0x7f
 8001a82:	2240      	movs	r2, #64	@ 0x40
 8001a84:	213c      	movs	r1, #60	@ 0x3c
 8001a86:	4814      	ldr	r0, [pc, #80]	@ (8001ad8 <Letra_Q+0x5c>)
 8001a88:	f7ff f90c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7F);
 8001a8c:	237f      	movs	r3, #127	@ 0x7f
 8001a8e:	2240      	movs	r2, #64	@ 0x40
 8001a90:	213c      	movs	r1, #60	@ 0x3c
 8001a92:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <Letra_Q+0x5c>)
 8001a94:	f7ff f906 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x63);
 8001a98:	2363      	movs	r3, #99	@ 0x63
 8001a9a:	2240      	movs	r2, #64	@ 0x40
 8001a9c:	213c      	movs	r1, #60	@ 0x3c
 8001a9e:	480e      	ldr	r0, [pc, #56]	@ (8001ad8 <Letra_Q+0x5c>)
 8001aa0:	f7ff f900 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0X63);
 8001aa4:	2363      	movs	r3, #99	@ 0x63
 8001aa6:	2240      	movs	r2, #64	@ 0x40
 8001aa8:	213c      	movs	r1, #60	@ 0x3c
 8001aaa:	480b      	ldr	r0, [pc, #44]	@ (8001ad8 <Letra_Q+0x5c>)
 8001aac:	f7ff f8fa 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001ab0:	23ff      	movs	r3, #255	@ 0xff
 8001ab2:	2240      	movs	r2, #64	@ 0x40
 8001ab4:	213c      	movs	r1, #60	@ 0x3c
 8001ab6:	4808      	ldr	r0, [pc, #32]	@ (8001ad8 <Letra_Q+0x5c>)
 8001ab8:	f7ff f8f4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001abc:	23ff      	movs	r3, #255	@ 0xff
 8001abe:	2240      	movs	r2, #64	@ 0x40
 8001ac0:	213c      	movs	r1, #60	@ 0x3c
 8001ac2:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <Letra_Q+0x5c>)
 8001ac4:	f7ff f8ee 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	213c      	movs	r1, #60	@ 0x3c
 8001ace:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <Letra_Q+0x5c>)
 8001ad0:	f7ff f8e8 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40005c00 	.word	0x40005c00

08001adc <Letra_R>:
void Letra_R(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001ae0:	23ff      	movs	r3, #255	@ 0xff
 8001ae2:	2240      	movs	r2, #64	@ 0x40
 8001ae4:	213c      	movs	r1, #60	@ 0x3c
 8001ae6:	4814      	ldr	r0, [pc, #80]	@ (8001b38 <Letra_R+0x5c>)
 8001ae8:	f7ff f8dc 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001aec:	23ff      	movs	r3, #255	@ 0xff
 8001aee:	2240      	movs	r2, #64	@ 0x40
 8001af0:	213c      	movs	r1, #60	@ 0x3c
 8001af2:	4811      	ldr	r0, [pc, #68]	@ (8001b38 <Letra_R+0x5c>)
 8001af4:	f7ff f8d6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1B);
 8001af8:	231b      	movs	r3, #27
 8001afa:	2240      	movs	r2, #64	@ 0x40
 8001afc:	213c      	movs	r1, #60	@ 0x3c
 8001afe:	480e      	ldr	r0, [pc, #56]	@ (8001b38 <Letra_R+0x5c>)
 8001b00:	f7ff f8d0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7B);
 8001b04:	237b      	movs	r3, #123	@ 0x7b
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	213c      	movs	r1, #60	@ 0x3c
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <Letra_R+0x5c>)
 8001b0c:	f7ff f8ca 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x6F);
 8001b10:	236f      	movs	r3, #111	@ 0x6f
 8001b12:	2240      	movs	r2, #64	@ 0x40
 8001b14:	213c      	movs	r1, #60	@ 0x3c
 8001b16:	4808      	ldr	r0, [pc, #32]	@ (8001b38 <Letra_R+0x5c>)
 8001b18:	f7ff f8c4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xEF);
 8001b1c:	23ef      	movs	r3, #239	@ 0xef
 8001b1e:	2240      	movs	r2, #64	@ 0x40
 8001b20:	213c      	movs	r1, #60	@ 0x3c
 8001b22:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <Letra_R+0x5c>)
 8001b24:	f7ff f8be 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2240      	movs	r2, #64	@ 0x40
 8001b2c:	213c      	movs	r1, #60	@ 0x3c
 8001b2e:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <Letra_R+0x5c>)
 8001b30:	f7ff f8b8 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40005c00 	.word	0x40005c00

08001b3c <Letra_S>:
void Letra_S(void){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xCF);
 8001b40:	23cf      	movs	r3, #207	@ 0xcf
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	213c      	movs	r1, #60	@ 0x3c
 8001b46:	4814      	ldr	r0, [pc, #80]	@ (8001b98 <Letra_S+0x5c>)
 8001b48:	f7ff f8ac 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xCF);
 8001b4c:	23cf      	movs	r3, #207	@ 0xcf
 8001b4e:	2240      	movs	r2, #64	@ 0x40
 8001b50:	213c      	movs	r1, #60	@ 0x3c
 8001b52:	4811      	ldr	r0, [pc, #68]	@ (8001b98 <Letra_S+0x5c>)
 8001b54:	f7ff f8a6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001b58:	23db      	movs	r3, #219	@ 0xdb
 8001b5a:	2240      	movs	r2, #64	@ 0x40
 8001b5c:	213c      	movs	r1, #60	@ 0x3c
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <Letra_S+0x5c>)
 8001b60:	f7ff f8a0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001b64:	23db      	movs	r3, #219	@ 0xdb
 8001b66:	2240      	movs	r2, #64	@ 0x40
 8001b68:	213c      	movs	r1, #60	@ 0x3c
 8001b6a:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <Letra_S+0x5c>)
 8001b6c:	f7ff f89a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF3);
 8001b70:	23f3      	movs	r3, #243	@ 0xf3
 8001b72:	2240      	movs	r2, #64	@ 0x40
 8001b74:	213c      	movs	r1, #60	@ 0x3c
 8001b76:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <Letra_S+0x5c>)
 8001b78:	f7ff f894 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xF3);
 8001b7c:	23f3      	movs	r3, #243	@ 0xf3
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	213c      	movs	r1, #60	@ 0x3c
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <Letra_S+0x5c>)
 8001b84:	f7ff f88e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2240      	movs	r2, #64	@ 0x40
 8001b8c:	213c      	movs	r1, #60	@ 0x3c
 8001b8e:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <Letra_S+0x5c>)
 8001b90:	f7ff f888 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40005c00 	.word	0x40005c00

08001b9c <Letra_T>:
void Letra_T(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	2240      	movs	r2, #64	@ 0x40
 8001ba4:	213c      	movs	r1, #60	@ 0x3c
 8001ba6:	4814      	ldr	r0, [pc, #80]	@ (8001bf8 <Letra_T+0x5c>)
 8001ba8:	f7ff f87c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001bac:	2303      	movs	r3, #3
 8001bae:	2240      	movs	r2, #64	@ 0x40
 8001bb0:	213c      	movs	r1, #60	@ 0x3c
 8001bb2:	4811      	ldr	r0, [pc, #68]	@ (8001bf8 <Letra_T+0x5c>)
 8001bb4:	f7ff f876 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001bb8:	23ff      	movs	r3, #255	@ 0xff
 8001bba:	2240      	movs	r2, #64	@ 0x40
 8001bbc:	213c      	movs	r1, #60	@ 0x3c
 8001bbe:	480e      	ldr	r0, [pc, #56]	@ (8001bf8 <Letra_T+0x5c>)
 8001bc0:	f7ff f870 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001bc4:	23ff      	movs	r3, #255	@ 0xff
 8001bc6:	2240      	movs	r2, #64	@ 0x40
 8001bc8:	213c      	movs	r1, #60	@ 0x3c
 8001bca:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <Letra_T+0x5c>)
 8001bcc:	f7ff f86a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	2240      	movs	r2, #64	@ 0x40
 8001bd4:	213c      	movs	r1, #60	@ 0x3c
 8001bd6:	4808      	ldr	r0, [pc, #32]	@ (8001bf8 <Letra_T+0x5c>)
 8001bd8:	f7ff f864 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001bdc:	2303      	movs	r3, #3
 8001bde:	2240      	movs	r2, #64	@ 0x40
 8001be0:	213c      	movs	r1, #60	@ 0x3c
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <Letra_T+0x5c>)
 8001be4:	f7ff f85e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001be8:	2300      	movs	r3, #0
 8001bea:	2240      	movs	r2, #64	@ 0x40
 8001bec:	213c      	movs	r1, #60	@ 0x3c
 8001bee:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <Letra_T+0x5c>)
 8001bf0:	f7ff f858 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005c00 	.word	0x40005c00

08001bfc <Letra_U>:
void Letra_U(void){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c00:	23ff      	movs	r3, #255	@ 0xff
 8001c02:	2240      	movs	r2, #64	@ 0x40
 8001c04:	213c      	movs	r1, #60	@ 0x3c
 8001c06:	4814      	ldr	r0, [pc, #80]	@ (8001c58 <Letra_U+0x5c>)
 8001c08:	f7ff f84c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c0c:	23ff      	movs	r3, #255	@ 0xff
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	213c      	movs	r1, #60	@ 0x3c
 8001c12:	4811      	ldr	r0, [pc, #68]	@ (8001c58 <Letra_U+0x5c>)
 8001c14:	f7ff f846 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	213c      	movs	r1, #60	@ 0x3c
 8001c1e:	480e      	ldr	r0, [pc, #56]	@ (8001c58 <Letra_U+0x5c>)
 8001c20:	f7ff f840 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC0);
 8001c24:	23c0      	movs	r3, #192	@ 0xc0
 8001c26:	2240      	movs	r2, #64	@ 0x40
 8001c28:	213c      	movs	r1, #60	@ 0x3c
 8001c2a:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <Letra_U+0x5c>)
 8001c2c:	f7ff f83a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c30:	23ff      	movs	r3, #255	@ 0xff
 8001c32:	2240      	movs	r2, #64	@ 0x40
 8001c34:	213c      	movs	r1, #60	@ 0x3c
 8001c36:	4808      	ldr	r0, [pc, #32]	@ (8001c58 <Letra_U+0x5c>)
 8001c38:	f7ff f834 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c3c:	23ff      	movs	r3, #255	@ 0xff
 8001c3e:	2240      	movs	r2, #64	@ 0x40
 8001c40:	213c      	movs	r1, #60	@ 0x3c
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <Letra_U+0x5c>)
 8001c44:	f7ff f82e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2240      	movs	r2, #64	@ 0x40
 8001c4c:	213c      	movs	r1, #60	@ 0x3c
 8001c4e:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <Letra_U+0x5c>)
 8001c50:	f7ff f828 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40005c00 	.word	0x40005c00

08001c5c <Letra_W>:
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x7F);
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);

}
void Letra_W(void){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c60:	23ff      	movs	r3, #255	@ 0xff
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	213c      	movs	r1, #60	@ 0x3c
 8001c66:	4817      	ldr	r0, [pc, #92]	@ (8001cc4 <Letra_W+0x68>)
 8001c68:	f7ff f81c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c6c:	23ff      	movs	r3, #255	@ 0xff
 8001c6e:	2240      	movs	r2, #64	@ 0x40
 8001c70:	213c      	movs	r1, #60	@ 0x3c
 8001c72:	4814      	ldr	r0, [pc, #80]	@ (8001cc4 <Letra_W+0x68>)
 8001c74:	f7ff f816 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x70);
 8001c78:	2370      	movs	r3, #112	@ 0x70
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	213c      	movs	r1, #60	@ 0x3c
 8001c7e:	4811      	ldr	r0, [pc, #68]	@ (8001cc4 <Letra_W+0x68>)
 8001c80:	f7ff f810 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x38);
 8001c84:	2338      	movs	r3, #56	@ 0x38
 8001c86:	2240      	movs	r2, #64	@ 0x40
 8001c88:	213c      	movs	r1, #60	@ 0x3c
 8001c8a:	480e      	ldr	r0, [pc, #56]	@ (8001cc4 <Letra_W+0x68>)
 8001c8c:	f7ff f80a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x70);
 8001c90:	2370      	movs	r3, #112	@ 0x70
 8001c92:	2240      	movs	r2, #64	@ 0x40
 8001c94:	213c      	movs	r1, #60	@ 0x3c
 8001c96:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <Letra_W+0x68>)
 8001c98:	f7ff f804 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001c9c:	23ff      	movs	r3, #255	@ 0xff
 8001c9e:	2240      	movs	r2, #64	@ 0x40
 8001ca0:	213c      	movs	r1, #60	@ 0x3c
 8001ca2:	4808      	ldr	r0, [pc, #32]	@ (8001cc4 <Letra_W+0x68>)
 8001ca4:	f7fe fffe 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001ca8:	23ff      	movs	r3, #255	@ 0xff
 8001caa:	2240      	movs	r2, #64	@ 0x40
 8001cac:	213c      	movs	r1, #60	@ 0x3c
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <Letra_W+0x68>)
 8001cb0:	f7fe fff8 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	2240      	movs	r2, #64	@ 0x40
 8001cb8:	213c      	movs	r1, #60	@ 0x3c
 8001cba:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <Letra_W+0x68>)
 8001cbc:	f7fe fff2 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40005c00 	.word	0x40005c00

08001cc8 <Letra_X>:
void Letra_X(void){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001ccc:	23c3      	movs	r3, #195	@ 0xc3
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	213c      	movs	r1, #60	@ 0x3c
 8001cd2:	4814      	ldr	r0, [pc, #80]	@ (8001d24 <Letra_X+0x5c>)
 8001cd4:	f7fe ffe6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE7);
 8001cd8:	23e7      	movs	r3, #231	@ 0xe7
 8001cda:	2240      	movs	r2, #64	@ 0x40
 8001cdc:	213c      	movs	r1, #60	@ 0x3c
 8001cde:	4811      	ldr	r0, [pc, #68]	@ (8001d24 <Letra_X+0x5c>)
 8001ce0:	f7fe ffe0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3C);
 8001ce4:	233c      	movs	r3, #60	@ 0x3c
 8001ce6:	2240      	movs	r2, #64	@ 0x40
 8001ce8:	213c      	movs	r1, #60	@ 0x3c
 8001cea:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <Letra_X+0x5c>)
 8001cec:	f7fe ffda 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3C);
 8001cf0:	233c      	movs	r3, #60	@ 0x3c
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	213c      	movs	r1, #60	@ 0x3c
 8001cf6:	480b      	ldr	r0, [pc, #44]	@ (8001d24 <Letra_X+0x5c>)
 8001cf8:	f7fe ffd4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE7);
 8001cfc:	23e7      	movs	r3, #231	@ 0xe7
 8001cfe:	2240      	movs	r2, #64	@ 0x40
 8001d00:	213c      	movs	r1, #60	@ 0x3c
 8001d02:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <Letra_X+0x5c>)
 8001d04:	f7fe ffce 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001d08:	23c3      	movs	r3, #195	@ 0xc3
 8001d0a:	2240      	movs	r2, #64	@ 0x40
 8001d0c:	213c      	movs	r1, #60	@ 0x3c
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <Letra_X+0x5c>)
 8001d10:	f7fe ffc8 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001d14:	2300      	movs	r3, #0
 8001d16:	2240      	movs	r2, #64	@ 0x40
 8001d18:	213c      	movs	r1, #60	@ 0x3c
 8001d1a:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <Letra_X+0x5c>)
 8001d1c:	f7fe ffc2 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40005c00 	.word	0x40005c00

08001d28 <Letra_Y>:
void Letra_Y(void){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	213c      	movs	r1, #60	@ 0x3c
 8001d32:	4814      	ldr	r0, [pc, #80]	@ (8001d84 <Letra_Y+0x5c>)
 8001d34:	f7fe ffb6 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0F);
 8001d38:	230f      	movs	r3, #15
 8001d3a:	2240      	movs	r2, #64	@ 0x40
 8001d3c:	213c      	movs	r1, #60	@ 0x3c
 8001d3e:	4811      	ldr	r0, [pc, #68]	@ (8001d84 <Letra_Y+0x5c>)
 8001d40:	f7fe ffb0 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFC);
 8001d44:	23fc      	movs	r3, #252	@ 0xfc
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	213c      	movs	r1, #60	@ 0x3c
 8001d4a:	480e      	ldr	r0, [pc, #56]	@ (8001d84 <Letra_Y+0x5c>)
 8001d4c:	f7fe ffaa 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFC);
 8001d50:	23fc      	movs	r3, #252	@ 0xfc
 8001d52:	2240      	movs	r2, #64	@ 0x40
 8001d54:	213c      	movs	r1, #60	@ 0x3c
 8001d56:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <Letra_Y+0x5c>)
 8001d58:	f7fe ffa4 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0F);
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	2240      	movs	r2, #64	@ 0x40
 8001d60:	213c      	movs	r1, #60	@ 0x3c
 8001d62:	4808      	ldr	r0, [pc, #32]	@ (8001d84 <Letra_Y+0x5c>)
 8001d64:	f7fe ff9e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x03);
 8001d68:	2303      	movs	r3, #3
 8001d6a:	2240      	movs	r2, #64	@ 0x40
 8001d6c:	213c      	movs	r1, #60	@ 0x3c
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <Letra_Y+0x5c>)
 8001d70:	f7fe ff98 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001d74:	2300      	movs	r3, #0
 8001d76:	2240      	movs	r2, #64	@ 0x40
 8001d78:	213c      	movs	r1, #60	@ 0x3c
 8001d7a:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <Letra_Y+0x5c>)
 8001d7c:	f7fe ff92 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40005c00 	.word	0x40005c00

08001d88 <Letra_Z>:

void Letra_Z(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001d8c:	23c3      	movs	r3, #195	@ 0xc3
 8001d8e:	2240      	movs	r2, #64	@ 0x40
 8001d90:	213c      	movs	r1, #60	@ 0x3c
 8001d92:	4814      	ldr	r0, [pc, #80]	@ (8001de4 <Letra_Z+0x5c>)
 8001d94:	f7fe ff86 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE3);
 8001d98:	23e3      	movs	r3, #227	@ 0xe3
 8001d9a:	2240      	movs	r2, #64	@ 0x40
 8001d9c:	213c      	movs	r1, #60	@ 0x3c
 8001d9e:	4811      	ldr	r0, [pc, #68]	@ (8001de4 <Letra_Z+0x5c>)
 8001da0:	f7fe ff80 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8001da4:	23fb      	movs	r3, #251	@ 0xfb
 8001da6:	2240      	movs	r2, #64	@ 0x40
 8001da8:	213c      	movs	r1, #60	@ 0x3c
 8001daa:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <Letra_Z+0x5c>)
 8001dac:	f7fe ff7a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xD7);
 8001db0:	23d7      	movs	r3, #215	@ 0xd7
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	213c      	movs	r1, #60	@ 0x3c
 8001db6:	480b      	ldr	r0, [pc, #44]	@ (8001de4 <Letra_Z+0x5c>)
 8001db8:	f7fe ff74 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC7);
 8001dbc:	23c7      	movs	r3, #199	@ 0xc7
 8001dbe:	2240      	movs	r2, #64	@ 0x40
 8001dc0:	213c      	movs	r1, #60	@ 0x3c
 8001dc2:	4808      	ldr	r0, [pc, #32]	@ (8001de4 <Letra_Z+0x5c>)
 8001dc4:	f7fe ff6e 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8001dc8:	23c3      	movs	r3, #195	@ 0xc3
 8001dca:	2240      	movs	r2, #64	@ 0x40
 8001dcc:	213c      	movs	r1, #60	@ 0x3c
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <Letra_Z+0x5c>)
 8001dd0:	f7fe ff68 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2240      	movs	r2, #64	@ 0x40
 8001dd8:	213c      	movs	r1, #60	@ 0x3c
 8001dda:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <Letra_Z+0x5c>)
 8001ddc:	f7fe ff62 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40005c00 	.word	0x40005c00

08001de8 <Espacio>:

void Espacio (void){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001dec:	2300      	movs	r3, #0
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	213c      	movs	r1, #60	@ 0x3c
 8001df2:	480b      	ldr	r0, [pc, #44]	@ (8001e20 <Espacio+0x38>)
 8001df4:	f7fe ff56 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2240      	movs	r2, #64	@ 0x40
 8001dfc:	213c      	movs	r1, #60	@ 0x3c
 8001dfe:	4808      	ldr	r0, [pc, #32]	@ (8001e20 <Espacio+0x38>)
 8001e00:	f7fe ff50 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001e04:	2300      	movs	r3, #0
 8001e06:	2240      	movs	r2, #64	@ 0x40
 8001e08:	213c      	movs	r1, #60	@ 0x3c
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <Espacio+0x38>)
 8001e0c:	f7fe ff4a 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001e10:	2300      	movs	r3, #0
 8001e12:	2240      	movs	r2, #64	@ 0x40
 8001e14:	213c      	movs	r1, #60	@ 0x3c
 8001e16:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <Espacio+0x38>)
 8001e18:	f7fe ff44 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40005c00 	.word	0x40005c00

08001e24 <Admiracion>:

void Admiracion(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8001e28:	23fb      	movs	r3, #251	@ 0xfb
 8001e2a:	2240      	movs	r2, #64	@ 0x40
 8001e2c:	213c      	movs	r1, #60	@ 0x3c
 8001e2e:	480e      	ldr	r0, [pc, #56]	@ (8001e68 <Admiracion+0x44>)
 8001e30:	f7fe ff38 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8001e34:	23fb      	movs	r3, #251	@ 0xfb
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	213c      	movs	r1, #60	@ 0x3c
 8001e3a:	480b      	ldr	r0, [pc, #44]	@ (8001e68 <Admiracion+0x44>)
 8001e3c:	f7fe ff32 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8001e40:	23fb      	movs	r3, #251	@ 0xfb
 8001e42:	2240      	movs	r2, #64	@ 0x40
 8001e44:	213c      	movs	r1, #60	@ 0x3c
 8001e46:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <Admiracion+0x44>)
 8001e48:	f7fe ff2c 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2240      	movs	r2, #64	@ 0x40
 8001e50:	213c      	movs	r1, #60	@ 0x3c
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <Admiracion+0x44>)
 8001e54:	f7fe ff26 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	213c      	movs	r1, #60	@ 0x3c
 8001e5e:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <Admiracion+0x44>)
 8001e60:	f7fe ff20 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005c00 	.word	0x40005c00

08001e6c <Numero_1>:


/*Declaracion de numeros decimales pantalla oled*/

void Numero_1(void){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x01);
 8001e70:	2301      	movs	r3, #1
 8001e72:	2240      	movs	r2, #64	@ 0x40
 8001e74:	213c      	movs	r1, #60	@ 0x3c
 8001e76:	480e      	ldr	r0, [pc, #56]	@ (8001eb0 <Numero_1+0x44>)
 8001e78:	f7fe ff14 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x01);
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	213c      	movs	r1, #60	@ 0x3c
 8001e82:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <Numero_1+0x44>)
 8001e84:	f7fe ff0e 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e88:	23ff      	movs	r3, #255	@ 0xff
 8001e8a:	2240      	movs	r2, #64	@ 0x40
 8001e8c:	213c      	movs	r1, #60	@ 0x3c
 8001e8e:	4808      	ldr	r0, [pc, #32]	@ (8001eb0 <Numero_1+0x44>)
 8001e90:	f7fe ff08 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001e94:	23ff      	movs	r3, #255	@ 0xff
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	213c      	movs	r1, #60	@ 0x3c
 8001e9a:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <Numero_1+0x44>)
 8001e9c:	f7fe ff02 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2240      	movs	r2, #64	@ 0x40
 8001ea4:	213c      	movs	r1, #60	@ 0x3c
 8001ea6:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <Numero_1+0x44>)
 8001ea8:	f7fe fefc 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40005c00 	.word	0x40005c00

08001eb4 <Numero_2>:


void Numero_2(void){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8001eb8:	23fb      	movs	r3, #251	@ 0xfb
 8001eba:	2240      	movs	r2, #64	@ 0x40
 8001ebc:	213c      	movs	r1, #60	@ 0x3c
 8001ebe:	4814      	ldr	r0, [pc, #80]	@ (8001f10 <Numero_2+0x5c>)
 8001ec0:	f7fe fef0 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8001ec4:	23fb      	movs	r3, #251	@ 0xfb
 8001ec6:	2240      	movs	r2, #64	@ 0x40
 8001ec8:	213c      	movs	r1, #60	@ 0x3c
 8001eca:	4811      	ldr	r0, [pc, #68]	@ (8001f10 <Numero_2+0x5c>)
 8001ecc:	f7fe feea 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001ed0:	23db      	movs	r3, #219	@ 0xdb
 8001ed2:	2240      	movs	r2, #64	@ 0x40
 8001ed4:	213c      	movs	r1, #60	@ 0x3c
 8001ed6:	480e      	ldr	r0, [pc, #56]	@ (8001f10 <Numero_2+0x5c>)
 8001ed8:	f7fe fee4 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001edc:	23db      	movs	r3, #219	@ 0xdb
 8001ede:	2240      	movs	r2, #64	@ 0x40
 8001ee0:	213c      	movs	r1, #60	@ 0x3c
 8001ee2:	480b      	ldr	r0, [pc, #44]	@ (8001f10 <Numero_2+0x5c>)
 8001ee4:	f7fe fede 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8001ee8:	23df      	movs	r3, #223	@ 0xdf
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	213c      	movs	r1, #60	@ 0x3c
 8001eee:	4808      	ldr	r0, [pc, #32]	@ (8001f10 <Numero_2+0x5c>)
 8001ef0:	f7fe fed8 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8001ef4:	23df      	movs	r3, #223	@ 0xdf
 8001ef6:	2240      	movs	r2, #64	@ 0x40
 8001ef8:	213c      	movs	r1, #60	@ 0x3c
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <Numero_2+0x5c>)
 8001efc:	f7fe fed2 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001f00:	2300      	movs	r3, #0
 8001f02:	2240      	movs	r2, #64	@ 0x40
 8001f04:	213c      	movs	r1, #60	@ 0x3c
 8001f06:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <Numero_2+0x5c>)
 8001f08:	f7fe fecc 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40005c00 	.word	0x40005c00

08001f14 <Numero_3>:

void Numero_3(void){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f18:	23db      	movs	r3, #219	@ 0xdb
 8001f1a:	2240      	movs	r2, #64	@ 0x40
 8001f1c:	213c      	movs	r1, #60	@ 0x3c
 8001f1e:	4814      	ldr	r0, [pc, #80]	@ (8001f70 <Numero_3+0x5c>)
 8001f20:	f7fe fec0 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f24:	23db      	movs	r3, #219	@ 0xdb
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	213c      	movs	r1, #60	@ 0x3c
 8001f2a:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <Numero_3+0x5c>)
 8001f2c:	f7fe feba 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f30:	23db      	movs	r3, #219	@ 0xdb
 8001f32:	2240      	movs	r2, #64	@ 0x40
 8001f34:	213c      	movs	r1, #60	@ 0x3c
 8001f36:	480e      	ldr	r0, [pc, #56]	@ (8001f70 <Numero_3+0x5c>)
 8001f38:	f7fe feb4 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001f3c:	23db      	movs	r3, #219	@ 0xdb
 8001f3e:	2240      	movs	r2, #64	@ 0x40
 8001f40:	213c      	movs	r1, #60	@ 0x3c
 8001f42:	480b      	ldr	r0, [pc, #44]	@ (8001f70 <Numero_3+0x5c>)
 8001f44:	f7fe feae 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001f48:	23ff      	movs	r3, #255	@ 0xff
 8001f4a:	2240      	movs	r2, #64	@ 0x40
 8001f4c:	213c      	movs	r1, #60	@ 0x3c
 8001f4e:	4808      	ldr	r0, [pc, #32]	@ (8001f70 <Numero_3+0x5c>)
 8001f50:	f7fe fea8 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001f54:	23ff      	movs	r3, #255	@ 0xff
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	213c      	movs	r1, #60	@ 0x3c
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <Numero_3+0x5c>)
 8001f5c:	f7fe fea2 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001f60:	2300      	movs	r3, #0
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	213c      	movs	r1, #60	@ 0x3c
 8001f66:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <Numero_3+0x5c>)
 8001f68:	f7fe fe9c 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40005c00 	.word	0x40005c00

08001f74 <Numero_4>:

void Numero_4(void){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 8001f78:	231f      	movs	r3, #31
 8001f7a:	2240      	movs	r2, #64	@ 0x40
 8001f7c:	213c      	movs	r1, #60	@ 0x3c
 8001f7e:	4814      	ldr	r0, [pc, #80]	@ (8001fd0 <Numero_4+0x5c>)
 8001f80:	f7fe fe90 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 8001f84:	231f      	movs	r3, #31
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	213c      	movs	r1, #60	@ 0x3c
 8001f8a:	4811      	ldr	r0, [pc, #68]	@ (8001fd0 <Numero_4+0x5c>)
 8001f8c:	f7fe fe8a 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 8001f90:	2318      	movs	r3, #24
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	213c      	movs	r1, #60	@ 0x3c
 8001f96:	480e      	ldr	r0, [pc, #56]	@ (8001fd0 <Numero_4+0x5c>)
 8001f98:	f7fe fe84 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x18);
 8001f9c:	2318      	movs	r3, #24
 8001f9e:	2240      	movs	r2, #64	@ 0x40
 8001fa0:	213c      	movs	r1, #60	@ 0x3c
 8001fa2:	480b      	ldr	r0, [pc, #44]	@ (8001fd0 <Numero_4+0x5c>)
 8001fa4:	f7fe fe7e 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001fa8:	23ff      	movs	r3, #255	@ 0xff
 8001faa:	2240      	movs	r2, #64	@ 0x40
 8001fac:	213c      	movs	r1, #60	@ 0x3c
 8001fae:	4808      	ldr	r0, [pc, #32]	@ (8001fd0 <Numero_4+0x5c>)
 8001fb0:	f7fe fe78 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8001fb4:	23ff      	movs	r3, #255	@ 0xff
 8001fb6:	2240      	movs	r2, #64	@ 0x40
 8001fb8:	213c      	movs	r1, #60	@ 0x3c
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <Numero_4+0x5c>)
 8001fbc:	f7fe fe72 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2240      	movs	r2, #64	@ 0x40
 8001fc4:	213c      	movs	r1, #60	@ 0x3c
 8001fc6:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <Numero_4+0x5c>)
 8001fc8:	f7fe fe6c 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40005c00 	.word	0x40005c00

08001fd4 <Numero_5>:

void Numero_5(void){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8001fd8:	23df      	movs	r3, #223	@ 0xdf
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	213c      	movs	r1, #60	@ 0x3c
 8001fde:	4814      	ldr	r0, [pc, #80]	@ (8002030 <Numero_5+0x5c>)
 8001fe0:	f7fe fe60 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8001fe4:	23df      	movs	r3, #223	@ 0xdf
 8001fe6:	2240      	movs	r2, #64	@ 0x40
 8001fe8:	213c      	movs	r1, #60	@ 0x3c
 8001fea:	4811      	ldr	r0, [pc, #68]	@ (8002030 <Numero_5+0x5c>)
 8001fec:	f7fe fe5a 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001ff0:	23db      	movs	r3, #219	@ 0xdb
 8001ff2:	2240      	movs	r2, #64	@ 0x40
 8001ff4:	213c      	movs	r1, #60	@ 0x3c
 8001ff6:	480e      	ldr	r0, [pc, #56]	@ (8002030 <Numero_5+0x5c>)
 8001ff8:	f7fe fe54 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8001ffc:	23db      	movs	r3, #219	@ 0xdb
 8001ffe:	2240      	movs	r2, #64	@ 0x40
 8002000:	213c      	movs	r1, #60	@ 0x3c
 8002002:	480b      	ldr	r0, [pc, #44]	@ (8002030 <Numero_5+0x5c>)
 8002004:	f7fe fe4e 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002008:	23fb      	movs	r3, #251	@ 0xfb
 800200a:	2240      	movs	r2, #64	@ 0x40
 800200c:	213c      	movs	r1, #60	@ 0x3c
 800200e:	4808      	ldr	r0, [pc, #32]	@ (8002030 <Numero_5+0x5c>)
 8002010:	f7fe fe48 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002014:	23fb      	movs	r3, #251	@ 0xfb
 8002016:	2240      	movs	r2, #64	@ 0x40
 8002018:	213c      	movs	r1, #60	@ 0x3c
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <Numero_5+0x5c>)
 800201c:	f7fe fe42 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002020:	2300      	movs	r3, #0
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	213c      	movs	r1, #60	@ 0x3c
 8002026:	4802      	ldr	r0, [pc, #8]	@ (8002030 <Numero_5+0x5c>)
 8002028:	f7fe fe3c 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40005c00 	.word	0x40005c00

08002034 <Numero_6>:
void Numero_6(void){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002038:	23ff      	movs	r3, #255	@ 0xff
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	213c      	movs	r1, #60	@ 0x3c
 800203e:	4814      	ldr	r0, [pc, #80]	@ (8002090 <Numero_6+0x5c>)
 8002040:	f7fe fe30 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002044:	23ff      	movs	r3, #255	@ 0xff
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	213c      	movs	r1, #60	@ 0x3c
 800204a:	4811      	ldr	r0, [pc, #68]	@ (8002090 <Numero_6+0x5c>)
 800204c:	f7fe fe2a 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002050:	23db      	movs	r3, #219	@ 0xdb
 8002052:	2240      	movs	r2, #64	@ 0x40
 8002054:	213c      	movs	r1, #60	@ 0x3c
 8002056:	480e      	ldr	r0, [pc, #56]	@ (8002090 <Numero_6+0x5c>)
 8002058:	f7fe fe24 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800205c:	23db      	movs	r3, #219	@ 0xdb
 800205e:	2240      	movs	r2, #64	@ 0x40
 8002060:	213c      	movs	r1, #60	@ 0x3c
 8002062:	480b      	ldr	r0, [pc, #44]	@ (8002090 <Numero_6+0x5c>)
 8002064:	f7fe fe1e 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002068:	23fb      	movs	r3, #251	@ 0xfb
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	213c      	movs	r1, #60	@ 0x3c
 800206e:	4808      	ldr	r0, [pc, #32]	@ (8002090 <Numero_6+0x5c>)
 8002070:	f7fe fe18 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFB);
 8002074:	23fb      	movs	r3, #251	@ 0xfb
 8002076:	2240      	movs	r2, #64	@ 0x40
 8002078:	213c      	movs	r1, #60	@ 0x3c
 800207a:	4805      	ldr	r0, [pc, #20]	@ (8002090 <Numero_6+0x5c>)
 800207c:	f7fe fe12 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0X00);
 8002080:	2300      	movs	r3, #0
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	213c      	movs	r1, #60	@ 0x3c
 8002086:	4802      	ldr	r0, [pc, #8]	@ (8002090 <Numero_6+0x5c>)
 8002088:	f7fe fe0c 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40005c00 	.word	0x40005c00

08002094 <Numero_7>:


void Numero_7(void){
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002098:	23c3      	movs	r3, #195	@ 0xc3
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	213c      	movs	r1, #60	@ 0x3c
 800209e:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <Numero_7+0x5c>)
 80020a0:	f7fe fe00 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xE3);
 80020a4:	23e3      	movs	r3, #227	@ 0xe3
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	213c      	movs	r1, #60	@ 0x3c
 80020aa:	4811      	ldr	r0, [pc, #68]	@ (80020f0 <Numero_7+0x5c>)
 80020ac:	f7fe fdfa 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x3B);
 80020b0:	233b      	movs	r3, #59	@ 0x3b
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	213c      	movs	r1, #60	@ 0x3c
 80020b6:	480e      	ldr	r0, [pc, #56]	@ (80020f0 <Numero_7+0x5c>)
 80020b8:	f7fe fdf4 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x1F);
 80020bc:	231f      	movs	r3, #31
 80020be:	2240      	movs	r2, #64	@ 0x40
 80020c0:	213c      	movs	r1, #60	@ 0x3c
 80020c2:	480b      	ldr	r0, [pc, #44]	@ (80020f0 <Numero_7+0x5c>)
 80020c4:	f7fe fdee 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x0F);
 80020c8:	230f      	movs	r3, #15
 80020ca:	2240      	movs	r2, #64	@ 0x40
 80020cc:	213c      	movs	r1, #60	@ 0x3c
 80020ce:	4808      	ldr	r0, [pc, #32]	@ (80020f0 <Numero_7+0x5c>)
 80020d0:	f7fe fde8 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x07);
 80020d4:	2307      	movs	r3, #7
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	213c      	movs	r1, #60	@ 0x3c
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <Numero_7+0x5c>)
 80020dc:	f7fe fde2 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80020e0:	2300      	movs	r3, #0
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	213c      	movs	r1, #60	@ 0x3c
 80020e6:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <Numero_7+0x5c>)
 80020e8:	f7fe fddc 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005c00 	.word	0x40005c00

080020f4 <Numero_8>:

void Numero_8(void){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80020f8:	23ff      	movs	r3, #255	@ 0xff
 80020fa:	2240      	movs	r2, #64	@ 0x40
 80020fc:	213c      	movs	r1, #60	@ 0x3c
 80020fe:	4814      	ldr	r0, [pc, #80]	@ (8002150 <Numero_8+0x5c>)
 8002100:	f7fe fdd0 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002104:	23ff      	movs	r3, #255	@ 0xff
 8002106:	2240      	movs	r2, #64	@ 0x40
 8002108:	213c      	movs	r1, #60	@ 0x3c
 800210a:	4811      	ldr	r0, [pc, #68]	@ (8002150 <Numero_8+0x5c>)
 800210c:	f7fe fdca 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002110:	23db      	movs	r3, #219	@ 0xdb
 8002112:	2240      	movs	r2, #64	@ 0x40
 8002114:	213c      	movs	r1, #60	@ 0x3c
 8002116:	480e      	ldr	r0, [pc, #56]	@ (8002150 <Numero_8+0x5c>)
 8002118:	f7fe fdc4 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800211c:	23db      	movs	r3, #219	@ 0xdb
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	213c      	movs	r1, #60	@ 0x3c
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <Numero_8+0x5c>)
 8002124:	f7fe fdbe 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002128:	23ff      	movs	r3, #255	@ 0xff
 800212a:	2240      	movs	r2, #64	@ 0x40
 800212c:	213c      	movs	r1, #60	@ 0x3c
 800212e:	4808      	ldr	r0, [pc, #32]	@ (8002150 <Numero_8+0x5c>)
 8002130:	f7fe fdb8 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002134:	23ff      	movs	r3, #255	@ 0xff
 8002136:	2240      	movs	r2, #64	@ 0x40
 8002138:	213c      	movs	r1, #60	@ 0x3c
 800213a:	4805      	ldr	r0, [pc, #20]	@ (8002150 <Numero_8+0x5c>)
 800213c:	f7fe fdb2 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0X00);
 8002140:	2300      	movs	r3, #0
 8002142:	2240      	movs	r2, #64	@ 0x40
 8002144:	213c      	movs	r1, #60	@ 0x3c
 8002146:	4802      	ldr	r0, [pc, #8]	@ (8002150 <Numero_8+0x5c>)
 8002148:	f7fe fdac 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40005c00 	.word	0x40005c00

08002154 <Numero_9>:

void Numero_9(void){
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002158:	23df      	movs	r3, #223	@ 0xdf
 800215a:	2240      	movs	r2, #64	@ 0x40
 800215c:	213c      	movs	r1, #60	@ 0x3c
 800215e:	4814      	ldr	r0, [pc, #80]	@ (80021b0 <Numero_9+0x5c>)
 8002160:	f7fe fda0 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDF);
 8002164:	23df      	movs	r3, #223	@ 0xdf
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	213c      	movs	r1, #60	@ 0x3c
 800216a:	4811      	ldr	r0, [pc, #68]	@ (80021b0 <Numero_9+0x5c>)
 800216c:	f7fe fd9a 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 8002170:	23db      	movs	r3, #219	@ 0xdb
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	213c      	movs	r1, #60	@ 0x3c
 8002176:	480e      	ldr	r0, [pc, #56]	@ (80021b0 <Numero_9+0x5c>)
 8002178:	f7fe fd94 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xDB);
 800217c:	23db      	movs	r3, #219	@ 0xdb
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	213c      	movs	r1, #60	@ 0x3c
 8002182:	480b      	ldr	r0, [pc, #44]	@ (80021b0 <Numero_9+0x5c>)
 8002184:	f7fe fd8e 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002188:	23ff      	movs	r3, #255	@ 0xff
 800218a:	2240      	movs	r2, #64	@ 0x40
 800218c:	213c      	movs	r1, #60	@ 0x3c
 800218e:	4808      	ldr	r0, [pc, #32]	@ (80021b0 <Numero_9+0x5c>)
 8002190:	f7fe fd88 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 8002194:	23ff      	movs	r3, #255	@ 0xff
 8002196:	2240      	movs	r2, #64	@ 0x40
 8002198:	213c      	movs	r1, #60	@ 0x3c
 800219a:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <Numero_9+0x5c>)
 800219c:	f7fe fd82 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80021a0:	2300      	movs	r3, #0
 80021a2:	2240      	movs	r2, #64	@ 0x40
 80021a4:	213c      	movs	r1, #60	@ 0x3c
 80021a6:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <Numero_9+0x5c>)
 80021a8:	f7fe fd7c 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40005c00 	.word	0x40005c00

080021b4 <Numero_0>:
void Numero_0(void){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021b8:	23ff      	movs	r3, #255	@ 0xff
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	213c      	movs	r1, #60	@ 0x3c
 80021be:	4814      	ldr	r0, [pc, #80]	@ (8002210 <Numero_0+0x5c>)
 80021c0:	f7fe fd70 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021c4:	23ff      	movs	r3, #255	@ 0xff
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	213c      	movs	r1, #60	@ 0x3c
 80021ca:	4811      	ldr	r0, [pc, #68]	@ (8002210 <Numero_0+0x5c>)
 80021cc:	f7fe fd6a 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80021d0:	23c3      	movs	r3, #195	@ 0xc3
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	213c      	movs	r1, #60	@ 0x3c
 80021d6:	480e      	ldr	r0, [pc, #56]	@ (8002210 <Numero_0+0x5c>)
 80021d8:	f7fe fd64 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 80021dc:	23c3      	movs	r3, #195	@ 0xc3
 80021de:	2240      	movs	r2, #64	@ 0x40
 80021e0:	213c      	movs	r1, #60	@ 0x3c
 80021e2:	480b      	ldr	r0, [pc, #44]	@ (8002210 <Numero_0+0x5c>)
 80021e4:	f7fe fd5e 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021e8:	23ff      	movs	r3, #255	@ 0xff
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	213c      	movs	r1, #60	@ 0x3c
 80021ee:	4808      	ldr	r0, [pc, #32]	@ (8002210 <Numero_0+0x5c>)
 80021f0:	f7fe fd58 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xFF);
 80021f4:	23ff      	movs	r3, #255	@ 0xff
 80021f6:	2240      	movs	r2, #64	@ 0x40
 80021f8:	213c      	movs	r1, #60	@ 0x3c
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <Numero_0+0x5c>)
 80021fc:	f7fe fd52 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002200:	2300      	movs	r3, #0
 8002202:	2240      	movs	r2, #64	@ 0x40
 8002204:	213c      	movs	r1, #60	@ 0x3c
 8002206:	4802      	ldr	r0, [pc, #8]	@ (8002210 <Numero_0+0x5c>)
 8002208:	f7fe fd4c 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40005c00 	.word	0x40005c00

08002214 <DosPuntos>:

void DosPuntos(void){
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002218:	23c3      	movs	r3, #195	@ 0xc3
 800221a:	2240      	movs	r2, #64	@ 0x40
 800221c:	213c      	movs	r1, #60	@ 0x3c
 800221e:	4808      	ldr	r0, [pc, #32]	@ (8002240 <DosPuntos+0x2c>)
 8002220:	f7fe fd40 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0xC3);
 8002224:	23c3      	movs	r3, #195	@ 0xc3
 8002226:	2240      	movs	r2, #64	@ 0x40
 8002228:	213c      	movs	r1, #60	@ 0x3c
 800222a:	4805      	ldr	r0, [pc, #20]	@ (8002240 <DosPuntos+0x2c>)
 800222c:	f7fe fd3a 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 8002230:	2300      	movs	r3, #0
 8002232:	2240      	movs	r2, #64	@ 0x40
 8002234:	213c      	movs	r1, #60	@ 0x3c
 8002236:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DosPuntos+0x2c>)
 8002238:	f7fe fd34 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40005c00 	.word	0x40005c00

08002244 <Simbolo_Grados>:

void Simbolo_Grados(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    // Ajustamos los valores para subir el símbolo de grados
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x30); // Parte superior del círculo, subido
 8002248:	2330      	movs	r3, #48	@ 0x30
 800224a:	2240      	movs	r2, #64	@ 0x40
 800224c:	213c      	movs	r1, #60	@ 0x3c
 800224e:	480b      	ldr	r0, [pc, #44]	@ (800227c <Simbolo_Grados+0x38>)
 8002250:	f7fe fd28 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x48); // Lados del círculo, subido
 8002254:	2348      	movs	r3, #72	@ 0x48
 8002256:	2240      	movs	r2, #64	@ 0x40
 8002258:	213c      	movs	r1, #60	@ 0x3c
 800225a:	4808      	ldr	r0, [pc, #32]	@ (800227c <Simbolo_Grados+0x38>)
 800225c:	f7fe fd22 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x30); // Parte inferior del círculo, subido
 8002260:	2330      	movs	r3, #48	@ 0x30
 8002262:	2240      	movs	r2, #64	@ 0x40
 8002264:	213c      	movs	r1, #60	@ 0x3c
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <Simbolo_Grados+0x38>)
 8002268:	f7fe fd1c 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00); // Separación
 800226c:	2300      	movs	r3, #0
 800226e:	2240      	movs	r2, #64	@ 0x40
 8002270:	213c      	movs	r1, #60	@ 0x3c
 8002272:	4802      	ldr	r0, [pc, #8]	@ (800227c <Simbolo_Grados+0x38>)
 8002274:	f7fe fd16 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40005c00 	.word	0x40005c00

08002280 <SSD1306_Clear>:
}




void SSD1306_Clear(void){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
    int c;
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
 8002286:	23b0      	movs	r3, #176	@ 0xb0
 8002288:	2200      	movs	r2, #0
 800228a:	213c      	movs	r1, #60	@ 0x3c
 800228c:	4869      	ldr	r0, [pc, #420]	@ (8002434 <SSD1306_Clear+0x1b4>)
 800228e:	f7fe fd09 	bl	8000ca4 <I2C_Tx_2Bytes>
    SSD1306_PosCom(0);
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f8d0 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	e008      	b.n	80022b0 <SSD1306_Clear+0x30>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800229e:	2300      	movs	r3, #0
 80022a0:	2240      	movs	r2, #64	@ 0x40
 80022a2:	213c      	movs	r1, #60	@ 0x3c
 80022a4:	4863      	ldr	r0, [pc, #396]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80022a6:	f7fe fcfd 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3301      	adds	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80022b4:	ddf3      	ble.n	800229e <SSD1306_Clear+0x1e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE1);
 80022b6:	23b1      	movs	r3, #177	@ 0xb1
 80022b8:	2200      	movs	r2, #0
 80022ba:	213c      	movs	r1, #60	@ 0x3c
 80022bc:	485d      	ldr	r0, [pc, #372]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80022be:	f7fe fcf1 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f8b8 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	e008      	b.n	80022e0 <SSD1306_Clear+0x60>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80022ce:	2300      	movs	r3, #0
 80022d0:	2240      	movs	r2, #64	@ 0x40
 80022d2:	213c      	movs	r1, #60	@ 0x3c
 80022d4:	4857      	ldr	r0, [pc, #348]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80022d6:	f7fe fce5 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3301      	adds	r3, #1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80022e4:	ddf3      	ble.n	80022ce <SSD1306_Clear+0x4e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE2);
 80022e6:	23b2      	movs	r3, #178	@ 0xb2
 80022e8:	2200      	movs	r2, #0
 80022ea:	213c      	movs	r1, #60	@ 0x3c
 80022ec:	4851      	ldr	r0, [pc, #324]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80022ee:	f7fe fcd9 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f8a0 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	e008      	b.n	8002310 <SSD1306_Clear+0x90>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80022fe:	2300      	movs	r3, #0
 8002300:	2240      	movs	r2, #64	@ 0x40
 8002302:	213c      	movs	r1, #60	@ 0x3c
 8002304:	484b      	ldr	r0, [pc, #300]	@ (8002434 <SSD1306_Clear+0x1b4>)
 8002306:	f7fe fccd 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3301      	adds	r3, #1
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b7f      	cmp	r3, #127	@ 0x7f
 8002314:	ddf3      	ble.n	80022fe <SSD1306_Clear+0x7e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002316:	23b3      	movs	r3, #179	@ 0xb3
 8002318:	2200      	movs	r2, #0
 800231a:	213c      	movs	r1, #60	@ 0x3c
 800231c:	4845      	ldr	r0, [pc, #276]	@ (8002434 <SSD1306_Clear+0x1b4>)
 800231e:	f7fe fcc1 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002322:	2000      	movs	r0, #0
 8002324:	f000 f888 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	e008      	b.n	8002340 <SSD1306_Clear+0xc0>
	I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800232e:	2300      	movs	r3, #0
 8002330:	2240      	movs	r2, #64	@ 0x40
 8002332:	213c      	movs	r1, #60	@ 0x3c
 8002334:	483f      	ldr	r0, [pc, #252]	@ (8002434 <SSD1306_Clear+0x1b4>)
 8002336:	f7fe fcb5 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3301      	adds	r3, #1
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b7f      	cmp	r3, #127	@ 0x7f
 8002344:	ddf3      	ble.n	800232e <SSD1306_Clear+0xae>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE4);
 8002346:	23b4      	movs	r3, #180	@ 0xb4
 8002348:	2200      	movs	r2, #0
 800234a:	213c      	movs	r1, #60	@ 0x3c
 800234c:	4839      	ldr	r0, [pc, #228]	@ (8002434 <SSD1306_Clear+0x1b4>)
 800234e:	f7fe fca9 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 f870 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	e008      	b.n	8002370 <SSD1306_Clear+0xf0>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800235e:	2300      	movs	r3, #0
 8002360:	2240      	movs	r2, #64	@ 0x40
 8002362:	213c      	movs	r1, #60	@ 0x3c
 8002364:	4833      	ldr	r0, [pc, #204]	@ (8002434 <SSD1306_Clear+0x1b4>)
 8002366:	f7fe fc9d 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3301      	adds	r3, #1
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b7f      	cmp	r3, #127	@ 0x7f
 8002374:	ddf3      	ble.n	800235e <SSD1306_Clear+0xde>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8002376:	23b5      	movs	r3, #181	@ 0xb5
 8002378:	2200      	movs	r2, #0
 800237a:	213c      	movs	r1, #60	@ 0x3c
 800237c:	482d      	ldr	r0, [pc, #180]	@ (8002434 <SSD1306_Clear+0x1b4>)
 800237e:	f7fe fc91 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 8002382:	2000      	movs	r0, #0
 8002384:	f000 f858 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e008      	b.n	80023a0 <SSD1306_Clear+0x120>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 800238e:	2300      	movs	r3, #0
 8002390:	2240      	movs	r2, #64	@ 0x40
 8002392:	213c      	movs	r1, #60	@ 0x3c
 8002394:	4827      	ldr	r0, [pc, #156]	@ (8002434 <SSD1306_Clear+0x1b4>)
 8002396:	f7fe fc85 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3301      	adds	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80023a4:	ddf3      	ble.n	800238e <SSD1306_Clear+0x10e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE6);
 80023a6:	23b6      	movs	r3, #182	@ 0xb6
 80023a8:	2200      	movs	r2, #0
 80023aa:	213c      	movs	r1, #60	@ 0x3c
 80023ac:	4821      	ldr	r0, [pc, #132]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80023ae:	f7fe fc79 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f000 f840 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	e008      	b.n	80023d0 <SSD1306_Clear+0x150>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80023be:	2300      	movs	r3, #0
 80023c0:	2240      	movs	r2, #64	@ 0x40
 80023c2:	213c      	movs	r1, #60	@ 0x3c
 80023c4:	481b      	ldr	r0, [pc, #108]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80023c6:	f7fe fc6d 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3301      	adds	r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80023d4:	ddf3      	ble.n	80023be <SSD1306_Clear+0x13e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 80023d6:	23b7      	movs	r3, #183	@ 0xb7
 80023d8:	2200      	movs	r2, #0
 80023da:	213c      	movs	r1, #60	@ 0x3c
 80023dc:	4815      	ldr	r0, [pc, #84]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80023de:	f7fe fc61 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(0);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f828 	bl	8002438 <SSD1306_PosCom>
for(c=0;c<128;c++){
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	e008      	b.n	8002400 <SSD1306_Clear+0x180>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbD, 0x00);
 80023ee:	2300      	movs	r3, #0
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	213c      	movs	r1, #60	@ 0x3c
 80023f4:	480f      	ldr	r0, [pc, #60]	@ (8002434 <SSD1306_Clear+0x1b4>)
 80023f6:	f7fe fc55 	bl	8000ca4 <I2C_Tx_2Bytes>
for(c=0;c<128;c++){
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3301      	adds	r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b7f      	cmp	r3, #127	@ 0x7f
 8002404:	ddf3      	ble.n	80023ee <SSD1306_Clear+0x16e>
}
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
 8002406:	23b0      	movs	r3, #176	@ 0xb0
 8002408:	2200      	movs	r2, #0
 800240a:	213c      	movs	r1, #60	@ 0x3c
 800240c:	4809      	ldr	r0, [pc, #36]	@ (8002434 <SSD1306_Clear+0x1b4>)
 800240e:	f7fe fc49 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);
 8002412:	2300      	movs	r3, #0
 8002414:	2200      	movs	r2, #0
 8002416:	213c      	movs	r1, #60	@ 0x3c
 8002418:	4806      	ldr	r0, [pc, #24]	@ (8002434 <SSD1306_Clear+0x1b4>)
 800241a:	f7fe fc43 	bl	8000ca4 <I2C_Tx_2Bytes>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00);
 800241e:	2300      	movs	r3, #0
 8002420:	2200      	movs	r2, #0
 8002422:	213c      	movs	r1, #60	@ 0x3c
 8002424:	4803      	ldr	r0, [pc, #12]	@ (8002434 <SSD1306_Clear+0x1b4>)
 8002426:	f7fe fc3d 	bl	8000ca4 <I2C_Tx_2Bytes>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40005c00 	.word	0x40005c00

08002438 <SSD1306_PosCom>:


void SSD1306_PosCom(uint8_t Pos){
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]

    uint8_t high = (Pos & 0xF0) >> 4; // Parte alta del número
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	73fb      	strb	r3, [r7, #15]
    uint8_t low = Pos & 0x0F;         // Parte baja del número
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	73bb      	strb	r3, [r7, #14]

    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x10 | high); // Enviar parte alta
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2200      	movs	r2, #0
 800245a:	213c      	movs	r1, #60	@ 0x3c
 800245c:	4806      	ldr	r0, [pc, #24]	@ (8002478 <SSD1306_PosCom+0x40>)
 800245e:	f7fe fc21 	bl	8000ca4 <I2C_Tx_2Bytes>
    I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0x00 | low);  // Enviar parte baja
 8002462:	7bbb      	ldrb	r3, [r7, #14]
 8002464:	2200      	movs	r2, #0
 8002466:	213c      	movs	r1, #60	@ 0x3c
 8002468:	4803      	ldr	r0, [pc, #12]	@ (8002478 <SSD1306_PosCom+0x40>)
 800246a:	f7fe fc1b 	bl	8000ca4 <I2C_Tx_2Bytes>

}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40005c00 	.word	0x40005c00

0800247c <main>:
/*********FIN DE VARIABLES GLOBALES ************/
CAN_FIFOMailBox_TypeDef *FIFOmailBox0,*FIFOmailBox1;
uint32_t countdown = 10000; // Configura el tiempo del ciclo (10,000 "unidades", ajustable)

int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af02      	add	r7, sp, #8
  // uint32_t caseNumber = 0;  // Inicializar el contador para el caso del s                                                                                 witch


/****************************INICIALIZACION Y CONFIGURACION DE PUERTOS Y PERIFERICOS************************************************/
/**********************************************************************************************************************************/
   Init_Peripheral();
 8002482:	f000 f92b 	bl	80026dc <Init_Peripheral>
   Conf_Peripheral();
 8002486:	f000 f949 	bl	800271c <Conf_Peripheral>



    I2C_Init(I2C3); //Inicializacion de periferico I2C
 800248a:	4882      	ldr	r0, [pc, #520]	@ (8002694 <main+0x218>)
 800248c:	f7fe fbd0 	bl	8000c30 <I2C_Init>

    USARTx_CONF(USART3, USARTx_BRR_MSI_16MHz, USART3_IRQn, 7); // Configuracion del periferico Uart
 8002490:	2307      	movs	r3, #7
 8002492:	2227      	movs	r2, #39	@ 0x27
 8002494:	f240 6182 	movw	r1, #1666	@ 0x682
 8002498:	487f      	ldr	r0, [pc, #508]	@ (8002698 <main+0x21c>)
 800249a:	f7fe fccd 	bl	8000e38 <USARTx_CONF>
    CANx_Init(CAN1); //Inicializacion del periferico CAN
 800249e:	487f      	ldr	r0, [pc, #508]	@ (800269c <main+0x220>)
 80024a0:	f7fd ff06 	bl	80002b0 <CANx_Init>
	CANx_BitTiming_500Kz(CAN1); //Configuracion del can bit
 80024a4:	487d      	ldr	r0, [pc, #500]	@ (800269c <main+0x220>)
 80024a6:	f7fd ff64 	bl	8000372 <CANx_BitTiming_500Kz>
	CANx_EnFIFO0Ints(CAN1); //interrupcion de la FIFO0
 80024aa:	487c      	ldr	r0, [pc, #496]	@ (800269c <main+0x220>)
 80024ac:	f7fe f92d 	bl	800070a <CANx_EnFIFO0Ints>
 	CANx_EnFIFO1Ints(CAN1); //Interrupcion de la FIFO1
 80024b0:	487a      	ldr	r0, [pc, #488]	@ (800269c <main+0x220>)
 80024b2:	f7fe f91a 	bl	80006ea <CANx_EnFIFO1Ints>
	NVIC_Enable(CAN1_RX0_IRQn, 5); // Habilitar el vector de interrupcion
 80024b6:	2105      	movs	r1, #5
 80024b8:	2014      	movs	r0, #20
 80024ba:	f7fe fc61 	bl	8000d80 <NVIC_Enable>
	NVIC_Enable(CAN1_RX1_IRQn, 4);  // Habilitar el vector de interrupcion
 80024be:	2104      	movs	r1, #4
 80024c0:	2015      	movs	r0, #21
 80024c2:	f7fe fc5d 	bl	8000d80 <NVIC_Enable>
	GPIOC->ODR ^= GPIO_ODR_ODR_13;
 80024c6:	4b76      	ldr	r3, [pc, #472]	@ (80026a0 <main+0x224>)
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4a75      	ldr	r2, [pc, #468]	@ (80026a0 <main+0x224>)
 80024cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80024d0:	6153      	str	r3, [r2, #20]
	CLEAR_BIT(CAN1->MCR, CAN_MCR_INRQ);//limpia bandera de modo inicialización
 80024d2:	4b72      	ldr	r3, [pc, #456]	@ (800269c <main+0x220>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a71      	ldr	r2, [pc, #452]	@ (800269c <main+0x220>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]
	while(CAN1->MSR & CAN_MSR_INAK) {}; //Esperamos a que el bit CAN_MSR_INAK se limpie ****ENTRA
 80024de:	bf00      	nop
 80024e0:	4b6e      	ldr	r3, [pc, #440]	@ (800269c <main+0x220>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <main+0x64>
/****************************Uso de perifericos con librerias propias************************************************/
/**********************************************************************************************************************************/

/*************************CONFIGURACION DE FILTROS DE LAS FIFOS DE RECEPCION****************************/
/*******************************************************************************************************/
    CAN_FilterInit (CAN1, List_mode, Single_32bit, Fifo_0, 0); //CAN1, Mode , Scale, FIFO, Localidad
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	2201      	movs	r2, #1
 80024f4:	2101      	movs	r1, #1
 80024f6:	4869      	ldr	r0, [pc, #420]	@ (800269c <main+0x220>)
 80024f8:	f7fd ff6b 	bl	80003d2 <CAN_FilterInit>
    CAN_SetFilterValue(CAN1, 0x7E8, 0x00, 0);  //CAN1, ID , MSK, Localidad
 80024fc:	2300      	movs	r3, #0
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 8002504:	4865      	ldr	r0, [pc, #404]	@ (800269c <main+0x220>)
 8002506:	f7fd ffe5 	bl	80004d4 <CAN_SetFilterValue>

    CAN_FilterInit (CAN1, List_mode, Single_32bit, Fifo_1, 1); //CAN1, Mode , Scale, FIFO, Localidad
 800250a:	2301      	movs	r3, #1
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	2301      	movs	r3, #1
 8002510:	2201      	movs	r2, #1
 8002512:	2101      	movs	r1, #1
 8002514:	4861      	ldr	r0, [pc, #388]	@ (800269c <main+0x220>)
 8002516:	f7fd ff5c 	bl	80003d2 <CAN_FilterInit>
    CAN_SetFilterValue(CAN1, 0x0BB, 0x00, 1);  //CAN1, ID , MSK, Localidad
 800251a:	2301      	movs	r3, #1
 800251c:	2200      	movs	r2, #0
 800251e:	21bb      	movs	r1, #187	@ 0xbb
 8002520:	485e      	ldr	r0, [pc, #376]	@ (800269c <main+0x220>)
 8002522:	f7fd ffd7 	bl	80004d4 <CAN_SetFilterValue>

    CLEAR_BIT(CAN1->FMR, CAN_FMR_FINIT);
 8002526:	4b5d      	ldr	r3, [pc, #372]	@ (800269c <main+0x220>)
 8002528:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800252c:	4a5b      	ldr	r2, [pc, #364]	@ (800269c <main+0x220>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200


/*************************CONFIGURACION DE FILTROS DE LOS MILEBOX DE TRANSMICION***************************/
/*******************************************************************************************************/

   CAN_MailboxConfig(CAN1, false, 0x7DF, false, 0x0); //CAN1, ExtededID, IDE, RTR, Localidad
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	f240 72df 	movw	r2, #2015	@ 0x7df
 8002540:	2100      	movs	r1, #0
 8002542:	4856      	ldr	r0, [pc, #344]	@ (800269c <main+0x220>)
 8002544:	f7fe f819 	bl	800057a <CAN_MailboxConfig>
   CAN_SendData(CAN1, 8, 0x000D0102, 0x0); //CAN1, DLC , DATA, Localidad
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4a55      	ldr	r2, [pc, #340]	@ (80026a4 <main+0x228>)
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	2108      	movs	r1, #8
 8002554:	4851      	ldr	r0, [pc, #324]	@ (800269c <main+0x220>)
 8002556:	f7fe f867 	bl	8000628 <CAN_SendData>

   //CONFIGURAR MAILBOXS
   //frame = (originalMessage & 0x00FFFFFF) | ((uint32_t)Velocidad << 24);

   CAN_MailboxConfig(CAN1, false, 0x7E8, false, 0x1); //CAN1, ExtededID, IDE, RTR, Localidad
 800255a:	2301      	movs	r3, #1
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	f44f 62fd 	mov.w	r2, #2024	@ 0x7e8
 8002564:	2100      	movs	r1, #0
 8002566:	484d      	ldr	r0, [pc, #308]	@ (800269c <main+0x220>)
 8002568:	f7fe f807 	bl	800057a <CAN_MailboxConfig>


/*************************USO DE PANTALLA OLED I2C SSD1306***********************************************/
/*******************************************************************************************************/

   SSD1306_Init(); //Funcion para configurar la pantalla
 800256c:	f7fe fdc8 	bl	8001100 <SSD1306_Init>
   SSD1306_Clear(); //Funcion para limpiar la pantalla
 8002570:	f7ff fe86 	bl	8002280 <SSD1306_Clear>
   SecuanciaInicio(); //Secuencia de la interfaz de usuario - inicio
 8002574:	f000 f924 	bl	80027c0 <SecuanciaInicio>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE0);
 8002578:	23b0      	movs	r3, #176	@ 0xb0
 800257a:	2200      	movs	r2, #0
 800257c:	213c      	movs	r1, #60	@ 0x3c
 800257e:	4845      	ldr	r0, [pc, #276]	@ (8002694 <main+0x218>)
 8002580:	f7fe fb90 	bl	8000ca4 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 8002584:	2000      	movs	r0, #0
 8002586:	f7ff ff57 	bl	8002438 <SSD1306_PosCom>
   SSD1306_WriteString("! TELEMETRY SYSTEM !");
 800258a:	4847      	ldr	r0, [pc, #284]	@ (80026a8 <main+0x22c>)
 800258c:	f7fe fe54 	bl	8001238 <SSD1306_WriteString>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002590:	23b3      	movs	r3, #179	@ 0xb3
 8002592:	2200      	movs	r2, #0
 8002594:	213c      	movs	r1, #60	@ 0x3c
 8002596:	483f      	ldr	r0, [pc, #252]	@ (8002694 <main+0x218>)
 8002598:	f7fe fb84 	bl	8000ca4 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 800259c:	2000      	movs	r0, #0
 800259e:	f7ff ff4b 	bl	8002438 <SSD1306_PosCom>
   SSD1306_WriteString(" VELOCIDAD :        ");
 80025a2:	4842      	ldr	r0, [pc, #264]	@ (80026ac <main+0x230>)
 80025a4:	f7fe fe48 	bl	8001238 <SSD1306_WriteString>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 80025a8:	23b5      	movs	r3, #181	@ 0xb5
 80025aa:	2200      	movs	r2, #0
 80025ac:	213c      	movs	r1, #60	@ 0x3c
 80025ae:	4839      	ldr	r0, [pc, #228]	@ (8002694 <main+0x218>)
 80025b0:	f7fe fb78 	bl	8000ca4 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ff3f 	bl	8002438 <SSD1306_PosCom>
   SSD1306_WriteString(" RPMS :               ");
 80025ba:	483d      	ldr	r0, [pc, #244]	@ (80026b0 <main+0x234>)
 80025bc:	f7fe fe3c 	bl	8001238 <SSD1306_WriteString>

   I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 80025c0:	23b7      	movs	r3, #183	@ 0xb7
 80025c2:	2200      	movs	r2, #0
 80025c4:	213c      	movs	r1, #60	@ 0x3c
 80025c6:	4833      	ldr	r0, [pc, #204]	@ (8002694 <main+0x218>)
 80025c8:	f7fe fb6c 	bl	8000ca4 <I2C_Tx_2Bytes>
   SSD1306_PosCom(0);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff ff33 	bl	8002438 <SSD1306_PosCom>
   SSD1306_WriteString(" GAS :                 ");
 80025d2:	4838      	ldr	r0, [pc, #224]	@ (80026b4 <main+0x238>)
 80025d4:	f7fe fe30 	bl	8001238 <SSD1306_WriteString>

/*************************USO DE PANTALLA MPU6050***********************************************/
/*******************************************************************************************************/
   //MPU6050_Init(); //INICIALIZAR Y CONFIGURAR REGISTROSD EL MPU6050

   delay(1000000);
 80025d8:	4837      	ldr	r0, [pc, #220]	@ (80026b8 <main+0x23c>)
 80025da:	f000 f9bf 	bl	800295c <delay>
   sendStringUARTx(USART3, "AT+QGPS=1\r\n\0");
 80025de:	4937      	ldr	r1, [pc, #220]	@ (80026bc <main+0x240>)
 80025e0:	482d      	ldr	r0, [pc, #180]	@ (8002698 <main+0x21c>)
 80025e2:	f7fe fcad 	bl	8000f40 <sendStringUARTx>

    while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 80025e6:	e008      	b.n	80025fa <main+0x17e>
        GPIOB->ODR ^= GPIO_ODR_ODR_13; //Conmuta led de usuario para indicar que esta listo para empezar despues de precionar boton
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <main+0x244>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <main+0x244>)
 80025ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80025f2:	6153      	str	r3, [r2, #20]
	    delay(300000);  // Se queda en este bucle mientras el botón está en 0 (no presionado)
 80025f4:	4833      	ldr	r0, [pc, #204]	@ (80026c4 <main+0x248>)
 80025f6:	f000 f9b1 	bl	800295c <delay>
    while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 80025fa:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <main+0x224>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <main+0x16c>
    }
    delay(500000);  // Se queda en este bucle mientras el botón está en 0 (no presionado)
 8002606:	4830      	ldr	r0, [pc, #192]	@ (80026c8 <main+0x24c>)
 8002608:	f000 f9a8 	bl	800295c <delay>
    while (1) {
        while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 800260c:	e01c      	b.n	8002648 <main+0x1cc>
           GPIOB->ODR ^= GPIO_ODR_ODR_13; // BLINK LED
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <main+0x244>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4a2b      	ldr	r2, [pc, #172]	@ (80026c0 <main+0x244>)
 8002614:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002618:	6153      	str	r3, [r2, #20]
           ByteC = (receivedData0_H & 0x0000FF00) >> 8;
           ByteD = (receivedData0_H & 0x00FF0000) >> 16;
           Vel_Km = ByteA;
           */
          // Get_Obdii_Data();
           SSD1306_Refresh();
 800261a:	f000 fa41 	bl	8002aa0 <SSD1306_Refresh>
           delay(5000000);
 800261e:	482b      	ldr	r0, [pc, #172]	@ (80026cc <main+0x250>)
 8002620:	f000 f99c 	bl	800295c <delay>
           messageCounter++;
 8002624:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <main+0x254>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	4a29      	ldr	r2, [pc, #164]	@ (80026d0 <main+0x254>)
 800262c:	6013      	str	r3, [r2, #0]
           GPS_PET(messageCounter);
 800262e:	4b28      	ldr	r3, [pc, #160]	@ (80026d0 <main+0x254>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fcb9 	bl	8000fac <GPS_PET>
           // Asegurarse de que el contador esté dentro del rango 1-2
           if (messageCounter > 2) {
 800263a:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <main+0x254>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	dd02      	ble.n	8002648 <main+0x1cc>
           	messageCounter = 0; // Reiniciar al primer caso
 8002642:	4b23      	ldr	r3, [pc, #140]	@ (80026d0 <main+0x254>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
        while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <main+0x224>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0dc      	beq.n	800260e <main+0x192>
           }

        }

       C++;
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <main+0x258>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <main+0x258>)
 800265c:	6013      	str	r3, [r2, #0]
       delay(1000000);
 800265e:	4816      	ldr	r0, [pc, #88]	@ (80026b8 <main+0x23c>)
 8002660:	f000 f97c 	bl	800295c <delay>
       sendStringUARTx(USART3, "AT+QGPSEND\r\n\0");
 8002664:	491c      	ldr	r1, [pc, #112]	@ (80026d8 <main+0x25c>)
 8002666:	480c      	ldr	r0, [pc, #48]	@ (8002698 <main+0x21c>)
 8002668:	f7fe fc6a 	bl	8000f40 <sendStringUARTx>
       delay(1000000);
 800266c:	4812      	ldr	r0, [pc, #72]	@ (80026b8 <main+0x23c>)
 800266e:	f000 f975 	bl	800295c <delay>
       sendMessage_Cell(C);
 8002672:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <main+0x258>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f9d2 	bl	8002a20 <sendMessage_Cell>
       delay(1000000);
 800267c:	480e      	ldr	r0, [pc, #56]	@ (80026b8 <main+0x23c>)
 800267e:	f000 f96d 	bl	800295c <delay>
       sendStringUARTx(USART3, "AT+QGPS=1\r\n\0");
 8002682:	490e      	ldr	r1, [pc, #56]	@ (80026bc <main+0x240>)
 8002684:	4804      	ldr	r0, [pc, #16]	@ (8002698 <main+0x21c>)
 8002686:	f7fe fc5b 	bl	8000f40 <sendStringUARTx>
       delay(1000000);
 800268a:	480b      	ldr	r0, [pc, #44]	@ (80026b8 <main+0x23c>)
 800268c:	f000 f966 	bl	800295c <delay>
        while (!(GPIOC->IDR & GPIO_IDR_IDR_13)) {
 8002690:	e7da      	b.n	8002648 <main+0x1cc>
 8002692:	bf00      	nop
 8002694:	40005c00 	.word	0x40005c00
 8002698:	40004800 	.word	0x40004800
 800269c:	40006400 	.word	0x40006400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	000d0102 	.word	0x000d0102
 80026a8:	080035e8 	.word	0x080035e8
 80026ac:	08003600 	.word	0x08003600
 80026b0:	08003618 	.word	0x08003618
 80026b4:	08003630 	.word	0x08003630
 80026b8:	000f4240 	.word	0x000f4240
 80026bc:	08003648 	.word	0x08003648
 80026c0:	48000400 	.word	0x48000400
 80026c4:	000493e0 	.word	0x000493e0
 80026c8:	0007a120 	.word	0x0007a120
 80026cc:	004c4b40 	.word	0x004c4b40
 80026d0:	200002bc 	.word	0x200002bc
 80026d4:	200002c0 	.word	0x200002c0
 80026d8:	08003658 	.word	0x08003658

080026dc <Init_Peripheral>:
    }
 }



void Init_Peripheral(void){
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	  /*CONFIGURACIÓN DEL RELOJ*/
	  SystCLK_SetMSI(MSI_16MHz); //Configura 16MHz como  reloj
 80026e0:	2080      	movs	r0, #128	@ 0x80
 80026e2:	f7fe fa4b 	bl	8000b7c <SystCLK_SetMSI>
	  RCC_EnPort(GPIOB);//configura reloj en puerto B Para CANX
 80026e6:	4808      	ldr	r0, [pc, #32]	@ (8002708 <Init_Peripheral+0x2c>)
 80026e8:	f7fe f9f0 	bl	8000acc <RCC_EnPort>
	  RCC_EnPort(GPIOC);//configura reloj en puerto C para I2C
 80026ec:	4807      	ldr	r0, [pc, #28]	@ (800270c <Init_Peripheral+0x30>)
 80026ee:	f7fe f9ed 	bl	8000acc <RCC_EnPort>
	  RCC_En_I2C(I2C3); // Habilitar reloj al periférico I2C.
 80026f2:	4807      	ldr	r0, [pc, #28]	@ (8002710 <Init_Peripheral+0x34>)
 80026f4:	f7fe fa78 	bl	8000be8 <RCC_En_I2C>
	  RCC_En_CANx(CAN1);// Habilitar reloj al periferico CAN
 80026f8:	4806      	ldr	r0, [pc, #24]	@ (8002714 <Init_Peripheral+0x38>)
 80026fa:	f7fd fdc1 	bl	8000280 <RCC_En_CANx>
	  RCC_En_USARTx(USART3);
 80026fe:	4806      	ldr	r0, [pc, #24]	@ (8002718 <Init_Peripheral+0x3c>)
 8002700:	f7fe fb6a 	bl	8000dd8 <RCC_En_USARTx>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	48000400 	.word	0x48000400
 800270c:	48000800 	.word	0x48000800
 8002710:	40005c00 	.word	0x40005c00
 8002714:	40006400 	.word	0x40006400
 8002718:	40004800 	.word	0x40004800

0800271c <Conf_Peripheral>:

void Conf_Peripheral(void){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af02      	add	r7, sp, #8
	 //Configuración de Led y boton de usuario
	//  GPIOx_InitIO(GPIOC, 2, GPIO_MODER_INPUT, false); //Botón de Usuario de Liese-duino
	 // GPIOx_InitIO(GPIOC, 13, GPIO_MODER_OUTPUT, false); //Led de usuario de Liese-duino

	  GPIOx_InitIO(GPIOC, 13, GPIO_MODER_INPUT, false); //Botón de Usuario de nucleo
 8002722:	2300      	movs	r3, #0
 8002724:	2200      	movs	r2, #0
 8002726:	210d      	movs	r1, #13
 8002728:	4823      	ldr	r0, [pc, #140]	@ (80027b8 <Conf_Peripheral+0x9c>)
 800272a:	f7fe f979 	bl	8000a20 <GPIOx_InitIO>
	 GPIOx_InitIO(GPIOB, 13, GPIO_MODER_OUTPUT, false); //Led de usuario de nucleo
 800272e:	2300      	movs	r3, #0
 8002730:	2201      	movs	r2, #1
 8002732:	210d      	movs	r1, #13
 8002734:	4821      	ldr	r0, [pc, #132]	@ (80027bc <Conf_Peripheral+0xa0>)
 8002736:	f7fe f973 	bl	8000a20 <GPIOx_InitIO>


	  GPIOx_InitAF(GPIOC, 0, 1, 2, 4, false); /*Puerto C / PIN 0 / Configura Open Drain / High speed /  Función alterna 4 - I2C3_SCL / Habilita Resistencia de Pull -Up  */
 800273a:	2300      	movs	r3, #0
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	2304      	movs	r3, #4
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2302      	movs	r3, #2
 8002744:	2201      	movs	r2, #1
 8002746:	2100      	movs	r1, #0
 8002748:	481b      	ldr	r0, [pc, #108]	@ (80027b8 <Conf_Peripheral+0x9c>)
 800274a:	f7fe f8fa 	bl	8000942 <GPIOx_InitAF>
	  GPIOx_InitAF(GPIOC, 1, 1, 2, 4, false); /*Puerto C / PIN 1 / Configura Open Drain / High speed /  Función alterna 4 - I2C3_SDA / Habilita Resistencia de Pull -Up  */
 800274e:	2300      	movs	r3, #0
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	2304      	movs	r3, #4
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2302      	movs	r3, #2
 8002758:	2201      	movs	r2, #1
 800275a:	2101      	movs	r1, #1
 800275c:	4816      	ldr	r0, [pc, #88]	@ (80027b8 <Conf_Peripheral+0x9c>)
 800275e:	f7fe f8f0 	bl	8000942 <GPIOx_InitAF>


	  //inicializa funcion alterna para CAN1 RX en pin B8
	  GPIOx_InitAF(GPIOB, 8, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, 9 , false); /*Puerto B / PIN 8 / Configura Push Pull / High speed /  Función alterna 9 - CAN1_RX / Habilita Resistencia de Pull -Up  */
 8002762:	2300      	movs	r3, #0
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2309      	movs	r3, #9
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2303      	movs	r3, #3
 800276c:	2200      	movs	r2, #0
 800276e:	2108      	movs	r1, #8
 8002770:	4812      	ldr	r0, [pc, #72]	@ (80027bc <Conf_Peripheral+0xa0>)
 8002772:	f7fe f8e6 	bl	8000942 <GPIOx_InitAF>
	  //inicializa funcion alterna para CAN1 TX en pin B9
	  GPIOx_InitAF(GPIOB, 9, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, 9 , false); /*Puerto B / PIN 9 / Configura Push Pull / High speed /  Función alterna 9 - CAN1_TX / Habilita Resistencia de Pull -Up  */
 8002776:	2300      	movs	r3, #0
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2309      	movs	r3, #9
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2303      	movs	r3, #3
 8002780:	2200      	movs	r2, #0
 8002782:	2109      	movs	r1, #9
 8002784:	480d      	ldr	r0, [pc, #52]	@ (80027bc <Conf_Peripheral+0xa0>)
 8002786:	f7fe f8dc 	bl	8000942 <GPIOx_InitAF>

	  // Inicializa función alterna para USART3
	  GPIOx_InitAF(GPIOB, 10, GPIO_OTYPER_PP, 0, 7, false); // USART3_TX en PB10
 800278a:	2300      	movs	r3, #0
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2307      	movs	r3, #7
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2300      	movs	r3, #0
 8002794:	2200      	movs	r2, #0
 8002796:	210a      	movs	r1, #10
 8002798:	4808      	ldr	r0, [pc, #32]	@ (80027bc <Conf_Peripheral+0xa0>)
 800279a:	f7fe f8d2 	bl	8000942 <GPIOx_InitAF>
	  GPIOx_InitAF(GPIOB, 11, GPIO_OTYPER_PP, 0, 7, true);  // USART3_RX en PB11 con Pull-Up
 800279e:	2301      	movs	r3, #1
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	2307      	movs	r3, #7
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	2200      	movs	r2, #0
 80027aa:	210b      	movs	r1, #11
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <Conf_Peripheral+0xa0>)
 80027ae:	f7fe f8c8 	bl	8000942 <GPIOx_InitAF>
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	48000800 	.word	0x48000800
 80027bc:	48000400 	.word	0x48000400

080027c0 <SecuanciaInicio>:
	  GY=(G_Y/131.0);
	  G_Z = MPU6050_Read(MPU6050_GYRO_ZOUT_H);
	  GZ=(G_Z/131.0);
}

void SecuanciaInicio(void){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0X2E); //Escrollin off
 80027c4:	232e      	movs	r3, #46	@ 0x2e
 80027c6:	2200      	movs	r2, #0
 80027c8:	213c      	movs	r1, #60	@ 0x3c
 80027ca:	485c      	ldr	r0, [pc, #368]	@ (800293c <SecuanciaInicio+0x17c>)
 80027cc:	f7fe fa6a 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA5);
 80027d0:	23a5      	movs	r3, #165	@ 0xa5
 80027d2:	2200      	movs	r2, #0
 80027d4:	213c      	movs	r1, #60	@ 0x3c
 80027d6:	4859      	ldr	r0, [pc, #356]	@ (800293c <SecuanciaInicio+0x17c>)
 80027d8:	f7fe fa64 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80027dc:	4858      	ldr	r0, [pc, #352]	@ (8002940 <SecuanciaInicio+0x180>)
 80027de:	f7fe f9f1 	bl	8000bc4 <I2C_delay>
	 // GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);
 80027e2:	23a4      	movs	r3, #164	@ 0xa4
 80027e4:	2200      	movs	r2, #0
 80027e6:	213c      	movs	r1, #60	@ 0x3c
 80027e8:	4854      	ldr	r0, [pc, #336]	@ (800293c <SecuanciaInicio+0x17c>)
 80027ea:	f7fe fa5b 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80027ee:	4854      	ldr	r0, [pc, #336]	@ (8002940 <SecuanciaInicio+0x180>)
 80027f0:	f7fe f9e8 	bl	8000bc4 <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA5);
 80027f4:	23a5      	movs	r3, #165	@ 0xa5
 80027f6:	2200      	movs	r2, #0
 80027f8:	213c      	movs	r1, #60	@ 0x3c
 80027fa:	4850      	ldr	r0, [pc, #320]	@ (800293c <SecuanciaInicio+0x17c>)
 80027fc:	f7fe fa52 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8002800:	484f      	ldr	r0, [pc, #316]	@ (8002940 <SecuanciaInicio+0x180>)
 8002802:	f7fe f9df 	bl	8000bc4 <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);
 8002806:	23a4      	movs	r3, #164	@ 0xa4
 8002808:	2200      	movs	r2, #0
 800280a:	213c      	movs	r1, #60	@ 0x3c
 800280c:	484b      	ldr	r0, [pc, #300]	@ (800293c <SecuanciaInicio+0x17c>)
 800280e:	f7fe fa49 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8002812:	484b      	ldr	r0, [pc, #300]	@ (8002940 <SecuanciaInicio+0x180>)
 8002814:	f7fe f9d6 	bl	8000bc4 <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA5);
 8002818:	23a5      	movs	r3, #165	@ 0xa5
 800281a:	2200      	movs	r2, #0
 800281c:	213c      	movs	r1, #60	@ 0x3c
 800281e:	4847      	ldr	r0, [pc, #284]	@ (800293c <SecuanciaInicio+0x17c>)
 8002820:	f7fe fa40 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8002824:	4846      	ldr	r0, [pc, #280]	@ (8002940 <SecuanciaInicio+0x180>)
 8002826:	f7fe f9cd 	bl	8000bc4 <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA4);
 800282a:	23a4      	movs	r3, #164	@ 0xa4
 800282c:	2200      	movs	r2, #0
 800282e:	213c      	movs	r1, #60	@ 0x3c
 8002830:	4842      	ldr	r0, [pc, #264]	@ (800293c <SecuanciaInicio+0x17c>)
 8002832:	f7fe fa37 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8002836:	4842      	ldr	r0, [pc, #264]	@ (8002940 <SecuanciaInicio+0x180>)
 8002838:	f7fe f9c4 	bl	8000bc4 <I2C_delay>
	//  GPIOC->ODR ^= 0x00002000;
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE1);
 800283c:	23b1      	movs	r3, #177	@ 0xb1
 800283e:	2200      	movs	r2, #0
 8002840:	213c      	movs	r1, #60	@ 0x3c
 8002842:	483e      	ldr	r0, [pc, #248]	@ (800293c <SecuanciaInicio+0x17c>)
 8002844:	f7fe fa2e 	bl	8000ca4 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff fdf5 	bl	8002438 <SSD1306_PosCom>
	  SSD1306_WriteString("  ! LIESE LAB 2024 ! ");
 800284e:	483d      	ldr	r0, [pc, #244]	@ (8002944 <SecuanciaInicio+0x184>)
 8002850:	f7fe fcf2 	bl	8001238 <SSD1306_WriteString>
	  I2C_delay(2000000);
 8002854:	483c      	ldr	r0, [pc, #240]	@ (8002948 <SecuanciaInicio+0x188>)
 8002856:	f7fe f9b5 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 800285a:	23b3      	movs	r3, #179	@ 0xb3
 800285c:	2200      	movs	r2, #0
 800285e:	213c      	movs	r1, #60	@ 0x3c
 8002860:	4836      	ldr	r0, [pc, #216]	@ (800293c <SecuanciaInicio+0x17c>)
 8002862:	f7fe fa1f 	bl	8000ca4 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 8002866:	2000      	movs	r0, #0
 8002868:	f7ff fde6 	bl	8002438 <SSD1306_PosCom>
	  SSD1306_WriteString("                                ");
 800286c:	4837      	ldr	r0, [pc, #220]	@ (800294c <SecuanciaInicio+0x18c>)
 800286e:	f7fe fce3 	bl	8001238 <SSD1306_WriteString>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002872:	23b3      	movs	r3, #179	@ 0xb3
 8002874:	2200      	movs	r2, #0
 8002876:	213c      	movs	r1, #60	@ 0x3c
 8002878:	4830      	ldr	r0, [pc, #192]	@ (800293c <SecuanciaInicio+0x17c>)
 800287a:	f7fe fa13 	bl	8000ca4 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff fdda 	bl	8002438 <SSD1306_PosCom>
	  SSD1306_WriteString("! TELEMETRY SYSTEM !");
 8002884:	4832      	ldr	r0, [pc, #200]	@ (8002950 <SecuanciaInicio+0x190>)
 8002886:	f7fe fcd7 	bl	8001238 <SSD1306_WriteString>
	  I2C_delay(2000000);
 800288a:	482f      	ldr	r0, [pc, #188]	@ (8002948 <SecuanciaInicio+0x188>)
 800288c:	f7fe f99a 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8002890:	23b5      	movs	r3, #181	@ 0xb5
 8002892:	2200      	movs	r2, #0
 8002894:	213c      	movs	r1, #60	@ 0x3c
 8002896:	4829      	ldr	r0, [pc, #164]	@ (800293c <SecuanciaInicio+0x17c>)
 8002898:	f7fe fa04 	bl	8000ca4 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff fdcb 	bl	8002438 <SSD1306_PosCom>
	  SSD1306_WriteString("                                ");
 80028a2:	482a      	ldr	r0, [pc, #168]	@ (800294c <SecuanciaInicio+0x18c>)
 80028a4:	f7fe fcc8 	bl	8001238 <SSD1306_WriteString>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 80028a8:	23b5      	movs	r3, #181	@ 0xb5
 80028aa:	2200      	movs	r2, #0
 80028ac:	213c      	movs	r1, #60	@ 0x3c
 80028ae:	4823      	ldr	r0, [pc, #140]	@ (800293c <SecuanciaInicio+0x17c>)
 80028b0:	f7fe f9f8 	bl	8000ca4 <I2C_Tx_2Bytes>
	  SSD1306_PosCom(0);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff fdbf 	bl	8002438 <SSD1306_PosCom>
	  SSD1306_WriteString("  ! SCANNER OBDII ! ");
 80028ba:	4826      	ldr	r0, [pc, #152]	@ (8002954 <SecuanciaInicio+0x194>)
 80028bc:	f7fe fcbc 	bl	8001238 <SSD1306_WriteString>
	  I2C_delay(2500000);
 80028c0:	4825      	ldr	r0, [pc, #148]	@ (8002958 <SecuanciaInicio+0x198>)
 80028c2:	f7fe f97f 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA7);  // Set normal display mode (A6 = normal, A7 = inverted)
 80028c6:	23a7      	movs	r3, #167	@ 0xa7
 80028c8:	2200      	movs	r2, #0
 80028ca:	213c      	movs	r1, #60	@ 0x3c
 80028cc:	481b      	ldr	r0, [pc, #108]	@ (800293c <SecuanciaInicio+0x17c>)
 80028ce:	f7fe f9e9 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80028d2:	481b      	ldr	r0, [pc, #108]	@ (8002940 <SecuanciaInicio+0x180>)
 80028d4:	f7fe f976 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 80028d8:	23a6      	movs	r3, #166	@ 0xa6
 80028da:	2200      	movs	r2, #0
 80028dc:	213c      	movs	r1, #60	@ 0x3c
 80028de:	4817      	ldr	r0, [pc, #92]	@ (800293c <SecuanciaInicio+0x17c>)
 80028e0:	f7fe f9e0 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80028e4:	4816      	ldr	r0, [pc, #88]	@ (8002940 <SecuanciaInicio+0x180>)
 80028e6:	f7fe f96d 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA7);  // Set normal display mode (A6 = normal, A7 = inverted)
 80028ea:	23a7      	movs	r3, #167	@ 0xa7
 80028ec:	2200      	movs	r2, #0
 80028ee:	213c      	movs	r1, #60	@ 0x3c
 80028f0:	4812      	ldr	r0, [pc, #72]	@ (800293c <SecuanciaInicio+0x17c>)
 80028f2:	f7fe f9d7 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 80028f6:	4812      	ldr	r0, [pc, #72]	@ (8002940 <SecuanciaInicio+0x180>)
 80028f8:	f7fe f964 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 80028fc:	23a6      	movs	r3, #166	@ 0xa6
 80028fe:	2200      	movs	r2, #0
 8002900:	213c      	movs	r1, #60	@ 0x3c
 8002902:	480e      	ldr	r0, [pc, #56]	@ (800293c <SecuanciaInicio+0x17c>)
 8002904:	f7fe f9ce 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 8002908:	480d      	ldr	r0, [pc, #52]	@ (8002940 <SecuanciaInicio+0x180>)
 800290a:	f7fe f95b 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA7);  // Set normal display mode (A6 = normal, A7 = inverted)
 800290e:	23a7      	movs	r3, #167	@ 0xa7
 8002910:	2200      	movs	r2, #0
 8002912:	213c      	movs	r1, #60	@ 0x3c
 8002914:	4809      	ldr	r0, [pc, #36]	@ (800293c <SecuanciaInicio+0x17c>)
 8002916:	f7fe f9c5 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 800291a:	4809      	ldr	r0, [pc, #36]	@ (8002940 <SecuanciaInicio+0x180>)
 800291c:	f7fe f952 	bl	8000bc4 <I2C_delay>
	  I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, 0xA6);  // Set normal display mode (A6 = normal, A7 = inverted)
 8002920:	23a6      	movs	r3, #166	@ 0xa6
 8002922:	2200      	movs	r2, #0
 8002924:	213c      	movs	r1, #60	@ 0x3c
 8002926:	4805      	ldr	r0, [pc, #20]	@ (800293c <SecuanciaInicio+0x17c>)
 8002928:	f7fe f9bc 	bl	8000ca4 <I2C_Tx_2Bytes>
	  I2C_delay(1000000);
 800292c:	4804      	ldr	r0, [pc, #16]	@ (8002940 <SecuanciaInicio+0x180>)
 800292e:	f7fe f949 	bl	8000bc4 <I2C_delay>
	  SSD1306_Clear();
 8002932:	f7ff fca5 	bl	8002280 <SSD1306_Clear>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40005c00 	.word	0x40005c00
 8002940:	000f4240 	.word	0x000f4240
 8002944:	08003668 	.word	0x08003668
 8002948:	001e8480 	.word	0x001e8480
 800294c:	08003680 	.word	0x08003680
 8002950:	080035e8 	.word	0x080035e8
 8002954:	080036a4 	.word	0x080036a4
 8002958:	002625a0 	.word	0x002625a0

0800295c <delay>:


void delay(uint32_t n)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	while(n--);
 8002964:	bf00      	nop
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1fa      	bne.n	8002966 <delay+0xa>
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler(){
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(CAN1_RX0_IRQn);
 8002984:	2014      	movs	r0, #20
 8002986:	f7fe fb9d 	bl	80010c4 <__NVIC_ClearPendingIRQ>
	CAN1_Rx0_FIFOx (CAN1, FIFOmailBox0);
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <CAN1_RX0_IRQHandler+0x3c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	480b      	ldr	r0, [pc, #44]	@ (80029c0 <CAN1_RX0_IRQHandler+0x40>)
 8002992:	f7fd fedc 	bl	800074e <CAN1_Rx0_FIFOx>
	receivedData0_L = CAN1->sFIFOMailBox[0].RDLR;
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <CAN1_RX0_IRQHandler+0x40>)
 8002998:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800299c:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <CAN1_RX0_IRQHandler+0x44>)
 800299e:	6013      	str	r3, [r2, #0]
	receivedData0_H = CAN1->sFIFOMailBox[0].RDHR;
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <CAN1_RX0_IRQHandler+0x40>)
 80029a2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80029a6:	4a08      	ldr	r2, [pc, #32]	@ (80029c8 <CAN1_RX0_IRQHandler+0x48>)
 80029a8:	6013      	str	r3, [r2, #0]
    PID = (receivedData0_L & 0x00FF0000) >> 16;
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <CAN1_RX0_IRQHandler+0x44>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <CAN1_RX0_IRQHandler+0x4c>)
 80029b4:	701a      	strb	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200002c4 	.word	0x200002c4
 80029c0:	40006400 	.word	0x40006400
 80029c4:	2000029c 	.word	0x2000029c
 80029c8:	200002a0 	.word	0x200002a0
 80029cc:	200002ac 	.word	0x200002ac

080029d0 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
     NVIC_ClearPendingIRQ(CAN1_RX1_IRQn);
 80029d4:	2015      	movs	r0, #21
 80029d6:	f7fe fb75 	bl	80010c4 <__NVIC_ClearPendingIRQ>
     CAN1_Rx1_FIFOx (CAN1, FIFOmailBox1);
 80029da:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <CAN1_RX1_IRQHandler+0x3c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <CAN1_RX1_IRQHandler+0x40>)
 80029e2:	f7fd ff31 	bl	8000848 <CAN1_Rx1_FIFOx>
     receivedData1_L = CAN1->sFIFOMailBox[1].RDLR;
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <CAN1_RX1_IRQHandler+0x40>)
 80029e8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 80029ec:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <CAN1_RX1_IRQHandler+0x44>)
 80029ee:	6013      	str	r3, [r2, #0]
     receivedData1_H = CAN1->sFIFOMailBox[1].RDHR;
 80029f0:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <CAN1_RX1_IRQHandler+0x40>)
 80029f2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 80029f6:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <CAN1_RX1_IRQHandler+0x48>)
 80029f8:	6013      	str	r3, [r2, #0]
     PID = (receivedData1_L & 0x00FF0000) >> 16;
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <CAN1_RX1_IRQHandler+0x44>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <CAN1_RX1_IRQHandler+0x4c>)
 8002a04:	701a      	strb	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200002c8 	.word	0x200002c8
 8002a10:	40006400 	.word	0x40006400
 8002a14:	200002a4 	.word	0x200002a4
 8002a18:	200002a8 	.word	0x200002a8
 8002a1c:	200002ac 	.word	0x200002ac

08002a20 <sendMessage_Cell>:


/* *****************************************************************************
 * Función para enviar datos a través de HTTP con el valor del campo 4
 * *****************************************************************************/
void sendMessage_Cell(int number) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b09c      	sub	sp, #112	@ 0x70
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

    char message[100]; // Buffer para el mensaje
    sprintf(message, "Pruebas 09/12/24 GSM/STM32L452RE %d\r\n", number);
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4916      	ldr	r1, [pc, #88]	@ (8002a88 <sendMessage_Cell+0x68>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f92d 	bl	8002c90 <siprintf>

    sendStringUARTx(USART3, "AT+CMGF=1\r\n\0");
 8002a36:	4915      	ldr	r1, [pc, #84]	@ (8002a8c <sendMessage_Cell+0x6c>)
 8002a38:	4815      	ldr	r0, [pc, #84]	@ (8002a90 <sendMessage_Cell+0x70>)
 8002a3a:	f7fe fa81 	bl	8000f40 <sendStringUARTx>
    delay(100000);
 8002a3e:	4815      	ldr	r0, [pc, #84]	@ (8002a94 <sendMessage_Cell+0x74>)
 8002a40:	f7ff ff8c 	bl	800295c <delay>

    sendStringUARTx(USART3, "AT+CSCS=\"GSM\"\r\n\0");
 8002a44:	4914      	ldr	r1, [pc, #80]	@ (8002a98 <sendMessage_Cell+0x78>)
 8002a46:	4812      	ldr	r0, [pc, #72]	@ (8002a90 <sendMessage_Cell+0x70>)
 8002a48:	f7fe fa7a 	bl	8000f40 <sendStringUARTx>
    delay(100000);
 8002a4c:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <sendMessage_Cell+0x74>)
 8002a4e:	f7ff ff85 	bl	800295c <delay>

    sendStringUARTx(USART3, "AT+CMGS=\"5617951874\"\r\n\0");
 8002a52:	4912      	ldr	r1, [pc, #72]	@ (8002a9c <sendMessage_Cell+0x7c>)
 8002a54:	480e      	ldr	r0, [pc, #56]	@ (8002a90 <sendMessage_Cell+0x70>)
 8002a56:	f7fe fa73 	bl	8000f40 <sendStringUARTx>
    delay(100000);
 8002a5a:	480e      	ldr	r0, [pc, #56]	@ (8002a94 <sendMessage_Cell+0x74>)
 8002a5c:	f7ff ff7e 	bl	800295c <delay>

    sendStringUARTx(USART3, message); // Envía el mensaje con el número
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	4619      	mov	r1, r3
 8002a66:	480a      	ldr	r0, [pc, #40]	@ (8002a90 <sendMessage_Cell+0x70>)
 8002a68:	f7fe fa6a 	bl	8000f40 <sendStringUARTx>
    delay(100000);
 8002a6c:	4809      	ldr	r0, [pc, #36]	@ (8002a94 <sendMessage_Cell+0x74>)
 8002a6e:	f7ff ff75 	bl	800295c <delay>

    sendByteUARTx(USART3, 0x1A); // Carácter Ctrl+Z para finalizar el mensaje SMS
 8002a72:	211a      	movs	r1, #26
 8002a74:	4806      	ldr	r0, [pc, #24]	@ (8002a90 <sendMessage_Cell+0x70>)
 8002a76:	f7fe fa80 	bl	8000f7a <sendByteUARTx>
    delay(100000);
 8002a7a:	4806      	ldr	r0, [pc, #24]	@ (8002a94 <sendMessage_Cell+0x74>)
 8002a7c:	f7ff ff6e 	bl	800295c <delay>

}
 8002a80:	bf00      	nop
 8002a82:	3770      	adds	r7, #112	@ 0x70
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0800389c 	.word	0x0800389c
 8002a8c:	080038c4 	.word	0x080038c4
 8002a90:	40004800 	.word	0x40004800
 8002a94:	000186a0 	.word	0x000186a0
 8002a98:	080038d4 	.word	0x080038d4
 8002a9c:	080038e8 	.word	0x080038e8

08002aa0 <SSD1306_Refresh>:

    Combustible = (ByteA * 100) / 255; //Formula para interpretar el nivel de combustible

}

void SSD1306_Refresh (void){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
char buffer[10]; // Espacio para almacenar la representación en cadena
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002aa6:	23b3      	movs	r3, #179	@ 0xb3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	213c      	movs	r1, #60	@ 0x3c
 8002aac:	4834      	ldr	r0, [pc, #208]	@ (8002b80 <SSD1306_Refresh+0xe0>)
 8002aae:	f7fe f8f9 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(80);
 8002ab2:	2050      	movs	r0, #80	@ 0x50
 8002ab4:	f7ff fcc0 	bl	8002438 <SSD1306_PosCom>
SSD1306_WriteString("            ");
 8002ab8:	4832      	ldr	r0, [pc, #200]	@ (8002b84 <SSD1306_Refresh+0xe4>)
 8002aba:	f7fe fbbd 	bl	8001238 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE3);
 8002abe:	23b3      	movs	r3, #179	@ 0xb3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	213c      	movs	r1, #60	@ 0x3c
 8002ac4:	482e      	ldr	r0, [pc, #184]	@ (8002b80 <SSD1306_Refresh+0xe0>)
 8002ac6:	f7fe f8ed 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(80);
 8002aca:	2050      	movs	r0, #80	@ 0x50
 8002acc:	f7ff fcb4 	bl	8002438 <SSD1306_PosCom>
sprintf(buffer, "%d", Vel_Km);
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <SSD1306_Refresh+0xe8>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	492d      	ldr	r1, [pc, #180]	@ (8002b8c <SSD1306_Refresh+0xec>)
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f8d9 	bl	8002c90 <siprintf>
SSD1306_WriteString(buffer); // Escribe la cadena en la pantalla OLED
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fba9 	bl	8001238 <SSD1306_WriteString>
SSD1306_WriteString(" KM");
 8002ae6:	482a      	ldr	r0, [pc, #168]	@ (8002b90 <SSD1306_Refresh+0xf0>)
 8002ae8:	f7fe fba6 	bl	8001238 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8002aec:	23b5      	movs	r3, #181	@ 0xb5
 8002aee:	2200      	movs	r2, #0
 8002af0:	213c      	movs	r1, #60	@ 0x3c
 8002af2:	4823      	ldr	r0, [pc, #140]	@ (8002b80 <SSD1306_Refresh+0xe0>)
 8002af4:	f7fe f8d6 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(50);
 8002af8:	2032      	movs	r0, #50	@ 0x32
 8002afa:	f7ff fc9d 	bl	8002438 <SSD1306_PosCom>
SSD1306_WriteString("               ");
 8002afe:	4825      	ldr	r0, [pc, #148]	@ (8002b94 <SSD1306_Refresh+0xf4>)
 8002b00:	f7fe fb9a 	bl	8001238 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE5);
 8002b04:	23b5      	movs	r3, #181	@ 0xb5
 8002b06:	2200      	movs	r2, #0
 8002b08:	213c      	movs	r1, #60	@ 0x3c
 8002b0a:	481d      	ldr	r0, [pc, #116]	@ (8002b80 <SSD1306_Refresh+0xe0>)
 8002b0c:	f7fe f8ca 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(50);
 8002b10:	2032      	movs	r0, #50	@ 0x32
 8002b12:	f7ff fc91 	bl	8002438 <SSD1306_PosCom>
sprintf(buffer, "%d", RPM_motor);
 8002b16:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <SSD1306_Refresh+0xf8>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	491b      	ldr	r1, [pc, #108]	@ (8002b8c <SSD1306_Refresh+0xec>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f8b6 	bl	8002c90 <siprintf>
SSD1306_WriteString(buffer); // Escribe la cadena en la pantalla OLED
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fb86 	bl	8001238 <SSD1306_WriteString>
SSD1306_WriteString(" RPM");
 8002b2c:	481b      	ldr	r0, [pc, #108]	@ (8002b9c <SSD1306_Refresh+0xfc>)
 8002b2e:	f7fe fb83 	bl	8001238 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 8002b32:	23b7      	movs	r3, #183	@ 0xb7
 8002b34:	2200      	movs	r2, #0
 8002b36:	213c      	movs	r1, #60	@ 0x3c
 8002b38:	4811      	ldr	r0, [pc, #68]	@ (8002b80 <SSD1306_Refresh+0xe0>)
 8002b3a:	f7fe f8b3 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(70);
 8002b3e:	2046      	movs	r0, #70	@ 0x46
 8002b40:	f7ff fc7a 	bl	8002438 <SSD1306_PosCom>
SSD1306_WriteString("              ");
 8002b44:	4816      	ldr	r0, [pc, #88]	@ (8002ba0 <SSD1306_Refresh+0x100>)
 8002b46:	f7fe fb77 	bl	8001238 <SSD1306_WriteString>
I2C_Tx_2Bytes(I2C3, AdreSSD1306, ControlbC, SSD1306_SETPAGE7);
 8002b4a:	23b7      	movs	r3, #183	@ 0xb7
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	213c      	movs	r1, #60	@ 0x3c
 8002b50:	480b      	ldr	r0, [pc, #44]	@ (8002b80 <SSD1306_Refresh+0xe0>)
 8002b52:	f7fe f8a7 	bl	8000ca4 <I2C_Tx_2Bytes>
SSD1306_PosCom(70);
 8002b56:	2046      	movs	r0, #70	@ 0x46
 8002b58:	f7ff fc6e 	bl	8002438 <SSD1306_PosCom>
sprintf(buffer, "%d", Combustible);
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <SSD1306_Refresh+0x104>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	490a      	ldr	r1, [pc, #40]	@ (8002b8c <SSD1306_Refresh+0xec>)
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f893 	bl	8002c90 <siprintf>
SSD1306_WriteString(buffer); // Escribe la cadena en la pantalla OLED
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fb63 	bl	8001238 <SSD1306_WriteString>
SSD1306_WriteString("  T");
 8002b72:	480d      	ldr	r0, [pc, #52]	@ (8002ba8 <SSD1306_Refresh+0x108>)
 8002b74:	f7fe fb60 	bl	8001238 <SSD1306_WriteString>
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40005c00 	.word	0x40005c00
 8002b84:	08003900 	.word	0x08003900
 8002b88:	200002b0 	.word	0x200002b0
 8002b8c:	08003910 	.word	0x08003910
 8002b90:	08003914 	.word	0x08003914
 8002b94:	08003918 	.word	0x08003918
 8002b98:	200002b4 	.word	0x200002b4
 8002b9c:	08003928 	.word	0x08003928
 8002ba0:	08003930 	.word	0x08003930
 8002ba4:	200002b8 	.word	0x200002b8
 8002ba8:	08003940 	.word	0x08003940

08002bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <_sbrk+0x5c>)
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <_sbrk+0x60>)
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <_sbrk+0x64>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <_sbrk+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bdc:	f000 f878 	bl	8002cd0 <__errno>
 8002be0:	4603      	mov	r3, r0
 8002be2:	220c      	movs	r2, #12
 8002be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e009      	b.n	8002c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <_sbrk+0x64>)
 8002bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20028000 	.word	0x20028000
 8002c0c:	00000400 	.word	0x00000400
 8002c10:	200002cc 	.word	0x200002cc
 8002c14:	20000418 	.word	0x20000418

08002c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c3c:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c40:	f7ff ffea 	bl	8002c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c44:	480c      	ldr	r0, [pc, #48]	@ (8002c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c46:	490d      	ldr	r1, [pc, #52]	@ (8002c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c48:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <LoopForever+0xe>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c88 <LoopForever+0x16>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c6a:	f000 f837 	bl	8002cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c6e:	f7ff fc05 	bl	800247c <main>

08002c72 <LoopForever>:

LoopForever:
  b LoopForever
 8002c72:	e7fe      	b.n	8002c72 <LoopForever>
  ldr   r0, =_estack
 8002c74:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8002c80:	08003988 	.word	0x08003988
  ldr r2, =_sbss
 8002c84:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002c88:	20000418 	.word	0x20000418

08002c8c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <ADC1_IRQHandler>
	...

08002c90 <siprintf>:
 8002c90:	b40e      	push	{r1, r2, r3}
 8002c92:	b500      	push	{lr}
 8002c94:	b09c      	sub	sp, #112	@ 0x70
 8002c96:	ab1d      	add	r3, sp, #116	@ 0x74
 8002c98:	9002      	str	r0, [sp, #8]
 8002c9a:	9006      	str	r0, [sp, #24]
 8002c9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ca0:	4809      	ldr	r0, [pc, #36]	@ (8002cc8 <siprintf+0x38>)
 8002ca2:	9107      	str	r1, [sp, #28]
 8002ca4:	9104      	str	r1, [sp, #16]
 8002ca6:	4909      	ldr	r1, [pc, #36]	@ (8002ccc <siprintf+0x3c>)
 8002ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cac:	9105      	str	r1, [sp, #20]
 8002cae:	6800      	ldr	r0, [r0, #0]
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	a902      	add	r1, sp, #8
 8002cb4:	f000 f98c 	bl	8002fd0 <_svfiprintf_r>
 8002cb8:	9b02      	ldr	r3, [sp, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	b01c      	add	sp, #112	@ 0x70
 8002cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cc4:	b003      	add	sp, #12
 8002cc6:	4770      	bx	lr
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	ffff0208 	.word	0xffff0208

08002cd0 <__errno>:
 8002cd0:	4b01      	ldr	r3, [pc, #4]	@ (8002cd8 <__errno+0x8>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000000 	.word	0x20000000

08002cdc <__libc_init_array>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	4d0d      	ldr	r5, [pc, #52]	@ (8002d14 <__libc_init_array+0x38>)
 8002ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8002d18 <__libc_init_array+0x3c>)
 8002ce2:	1b64      	subs	r4, r4, r5
 8002ce4:	10a4      	asrs	r4, r4, #2
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	42a6      	cmp	r6, r4
 8002cea:	d109      	bne.n	8002d00 <__libc_init_array+0x24>
 8002cec:	4d0b      	ldr	r5, [pc, #44]	@ (8002d1c <__libc_init_array+0x40>)
 8002cee:	4c0c      	ldr	r4, [pc, #48]	@ (8002d20 <__libc_init_array+0x44>)
 8002cf0:	f000 fc66 	bl	80035c0 <_init>
 8002cf4:	1b64      	subs	r4, r4, r5
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	42a6      	cmp	r6, r4
 8002cfc:	d105      	bne.n	8002d0a <__libc_init_array+0x2e>
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d04:	4798      	blx	r3
 8002d06:	3601      	adds	r6, #1
 8002d08:	e7ee      	b.n	8002ce8 <__libc_init_array+0xc>
 8002d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0e:	4798      	blx	r3
 8002d10:	3601      	adds	r6, #1
 8002d12:	e7f2      	b.n	8002cfa <__libc_init_array+0x1e>
 8002d14:	08003980 	.word	0x08003980
 8002d18:	08003980 	.word	0x08003980
 8002d1c:	08003980 	.word	0x08003980
 8002d20:	08003984 	.word	0x08003984

08002d24 <__retarget_lock_acquire_recursive>:
 8002d24:	4770      	bx	lr

08002d26 <__retarget_lock_release_recursive>:
 8002d26:	4770      	bx	lr

08002d28 <_free_r>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	2900      	cmp	r1, #0
 8002d2e:	d041      	beq.n	8002db4 <_free_r+0x8c>
 8002d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d34:	1f0c      	subs	r4, r1, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bfb8      	it	lt
 8002d3a:	18e4      	addlt	r4, r4, r3
 8002d3c:	f000 f8e0 	bl	8002f00 <__malloc_lock>
 8002d40:	4a1d      	ldr	r2, [pc, #116]	@ (8002db8 <_free_r+0x90>)
 8002d42:	6813      	ldr	r3, [r2, #0]
 8002d44:	b933      	cbnz	r3, 8002d54 <_free_r+0x2c>
 8002d46:	6063      	str	r3, [r4, #4]
 8002d48:	6014      	str	r4, [r2, #0]
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d50:	f000 b8dc 	b.w	8002f0c <__malloc_unlock>
 8002d54:	42a3      	cmp	r3, r4
 8002d56:	d908      	bls.n	8002d6a <_free_r+0x42>
 8002d58:	6820      	ldr	r0, [r4, #0]
 8002d5a:	1821      	adds	r1, r4, r0
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	bf01      	itttt	eq
 8002d60:	6819      	ldreq	r1, [r3, #0]
 8002d62:	685b      	ldreq	r3, [r3, #4]
 8002d64:	1809      	addeq	r1, r1, r0
 8002d66:	6021      	streq	r1, [r4, #0]
 8002d68:	e7ed      	b.n	8002d46 <_free_r+0x1e>
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	b10b      	cbz	r3, 8002d74 <_free_r+0x4c>
 8002d70:	42a3      	cmp	r3, r4
 8002d72:	d9fa      	bls.n	8002d6a <_free_r+0x42>
 8002d74:	6811      	ldr	r1, [r2, #0]
 8002d76:	1850      	adds	r0, r2, r1
 8002d78:	42a0      	cmp	r0, r4
 8002d7a:	d10b      	bne.n	8002d94 <_free_r+0x6c>
 8002d7c:	6820      	ldr	r0, [r4, #0]
 8002d7e:	4401      	add	r1, r0
 8002d80:	1850      	adds	r0, r2, r1
 8002d82:	4283      	cmp	r3, r0
 8002d84:	6011      	str	r1, [r2, #0]
 8002d86:	d1e0      	bne.n	8002d4a <_free_r+0x22>
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	6053      	str	r3, [r2, #4]
 8002d8e:	4408      	add	r0, r1
 8002d90:	6010      	str	r0, [r2, #0]
 8002d92:	e7da      	b.n	8002d4a <_free_r+0x22>
 8002d94:	d902      	bls.n	8002d9c <_free_r+0x74>
 8002d96:	230c      	movs	r3, #12
 8002d98:	602b      	str	r3, [r5, #0]
 8002d9a:	e7d6      	b.n	8002d4a <_free_r+0x22>
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	1821      	adds	r1, r4, r0
 8002da0:	428b      	cmp	r3, r1
 8002da2:	bf04      	itt	eq
 8002da4:	6819      	ldreq	r1, [r3, #0]
 8002da6:	685b      	ldreq	r3, [r3, #4]
 8002da8:	6063      	str	r3, [r4, #4]
 8002daa:	bf04      	itt	eq
 8002dac:	1809      	addeq	r1, r1, r0
 8002dae:	6021      	streq	r1, [r4, #0]
 8002db0:	6054      	str	r4, [r2, #4]
 8002db2:	e7ca      	b.n	8002d4a <_free_r+0x22>
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
 8002db6:	bf00      	nop
 8002db8:	20000414 	.word	0x20000414

08002dbc <sbrk_aligned>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8002dfc <sbrk_aligned+0x40>)
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	6831      	ldr	r1, [r6, #0]
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	b911      	cbnz	r1, 8002dce <sbrk_aligned+0x12>
 8002dc8:	f000 fba6 	bl	8003518 <_sbrk_r>
 8002dcc:	6030      	str	r0, [r6, #0]
 8002dce:	4621      	mov	r1, r4
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f000 fba1 	bl	8003518 <_sbrk_r>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d103      	bne.n	8002de2 <sbrk_aligned+0x26>
 8002dda:	f04f 34ff 	mov.w	r4, #4294967295
 8002dde:	4620      	mov	r0, r4
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	1cc4      	adds	r4, r0, #3
 8002de4:	f024 0403 	bic.w	r4, r4, #3
 8002de8:	42a0      	cmp	r0, r4
 8002dea:	d0f8      	beq.n	8002dde <sbrk_aligned+0x22>
 8002dec:	1a21      	subs	r1, r4, r0
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 fb92 	bl	8003518 <_sbrk_r>
 8002df4:	3001      	adds	r0, #1
 8002df6:	d1f2      	bne.n	8002dde <sbrk_aligned+0x22>
 8002df8:	e7ef      	b.n	8002dda <sbrk_aligned+0x1e>
 8002dfa:	bf00      	nop
 8002dfc:	20000410 	.word	0x20000410

08002e00 <_malloc_r>:
 8002e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e04:	1ccd      	adds	r5, r1, #3
 8002e06:	f025 0503 	bic.w	r5, r5, #3
 8002e0a:	3508      	adds	r5, #8
 8002e0c:	2d0c      	cmp	r5, #12
 8002e0e:	bf38      	it	cc
 8002e10:	250c      	movcc	r5, #12
 8002e12:	2d00      	cmp	r5, #0
 8002e14:	4606      	mov	r6, r0
 8002e16:	db01      	blt.n	8002e1c <_malloc_r+0x1c>
 8002e18:	42a9      	cmp	r1, r5
 8002e1a:	d904      	bls.n	8002e26 <_malloc_r+0x26>
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	6033      	str	r3, [r6, #0]
 8002e20:	2000      	movs	r0, #0
 8002e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002efc <_malloc_r+0xfc>
 8002e2a:	f000 f869 	bl	8002f00 <__malloc_lock>
 8002e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e32:	461c      	mov	r4, r3
 8002e34:	bb44      	cbnz	r4, 8002e88 <_malloc_r+0x88>
 8002e36:	4629      	mov	r1, r5
 8002e38:	4630      	mov	r0, r6
 8002e3a:	f7ff ffbf 	bl	8002dbc <sbrk_aligned>
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	4604      	mov	r4, r0
 8002e42:	d158      	bne.n	8002ef6 <_malloc_r+0xf6>
 8002e44:	f8d8 4000 	ldr.w	r4, [r8]
 8002e48:	4627      	mov	r7, r4
 8002e4a:	2f00      	cmp	r7, #0
 8002e4c:	d143      	bne.n	8002ed6 <_malloc_r+0xd6>
 8002e4e:	2c00      	cmp	r4, #0
 8002e50:	d04b      	beq.n	8002eea <_malloc_r+0xea>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	4639      	mov	r1, r7
 8002e56:	4630      	mov	r0, r6
 8002e58:	eb04 0903 	add.w	r9, r4, r3
 8002e5c:	f000 fb5c 	bl	8003518 <_sbrk_r>
 8002e60:	4581      	cmp	r9, r0
 8002e62:	d142      	bne.n	8002eea <_malloc_r+0xea>
 8002e64:	6821      	ldr	r1, [r4, #0]
 8002e66:	1a6d      	subs	r5, r5, r1
 8002e68:	4629      	mov	r1, r5
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f7ff ffa6 	bl	8002dbc <sbrk_aligned>
 8002e70:	3001      	adds	r0, #1
 8002e72:	d03a      	beq.n	8002eea <_malloc_r+0xea>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	442b      	add	r3, r5
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	bb62      	cbnz	r2, 8002edc <_malloc_r+0xdc>
 8002e82:	f8c8 7000 	str.w	r7, [r8]
 8002e86:	e00f      	b.n	8002ea8 <_malloc_r+0xa8>
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	1b52      	subs	r2, r2, r5
 8002e8c:	d420      	bmi.n	8002ed0 <_malloc_r+0xd0>
 8002e8e:	2a0b      	cmp	r2, #11
 8002e90:	d917      	bls.n	8002ec2 <_malloc_r+0xc2>
 8002e92:	1961      	adds	r1, r4, r5
 8002e94:	42a3      	cmp	r3, r4
 8002e96:	6025      	str	r5, [r4, #0]
 8002e98:	bf18      	it	ne
 8002e9a:	6059      	strne	r1, [r3, #4]
 8002e9c:	6863      	ldr	r3, [r4, #4]
 8002e9e:	bf08      	it	eq
 8002ea0:	f8c8 1000 	streq.w	r1, [r8]
 8002ea4:	5162      	str	r2, [r4, r5]
 8002ea6:	604b      	str	r3, [r1, #4]
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f000 f82f 	bl	8002f0c <__malloc_unlock>
 8002eae:	f104 000b 	add.w	r0, r4, #11
 8002eb2:	1d23      	adds	r3, r4, #4
 8002eb4:	f020 0007 	bic.w	r0, r0, #7
 8002eb8:	1ac2      	subs	r2, r0, r3
 8002eba:	bf1c      	itt	ne
 8002ebc:	1a1b      	subne	r3, r3, r0
 8002ebe:	50a3      	strne	r3, [r4, r2]
 8002ec0:	e7af      	b.n	8002e22 <_malloc_r+0x22>
 8002ec2:	6862      	ldr	r2, [r4, #4]
 8002ec4:	42a3      	cmp	r3, r4
 8002ec6:	bf0c      	ite	eq
 8002ec8:	f8c8 2000 	streq.w	r2, [r8]
 8002ecc:	605a      	strne	r2, [r3, #4]
 8002ece:	e7eb      	b.n	8002ea8 <_malloc_r+0xa8>
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	6864      	ldr	r4, [r4, #4]
 8002ed4:	e7ae      	b.n	8002e34 <_malloc_r+0x34>
 8002ed6:	463c      	mov	r4, r7
 8002ed8:	687f      	ldr	r7, [r7, #4]
 8002eda:	e7b6      	b.n	8002e4a <_malloc_r+0x4a>
 8002edc:	461a      	mov	r2, r3
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	d1fb      	bne.n	8002edc <_malloc_r+0xdc>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6053      	str	r3, [r2, #4]
 8002ee8:	e7de      	b.n	8002ea8 <_malloc_r+0xa8>
 8002eea:	230c      	movs	r3, #12
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f000 f80c 	bl	8002f0c <__malloc_unlock>
 8002ef4:	e794      	b.n	8002e20 <_malloc_r+0x20>
 8002ef6:	6005      	str	r5, [r0, #0]
 8002ef8:	e7d6      	b.n	8002ea8 <_malloc_r+0xa8>
 8002efa:	bf00      	nop
 8002efc:	20000414 	.word	0x20000414

08002f00 <__malloc_lock>:
 8002f00:	4801      	ldr	r0, [pc, #4]	@ (8002f08 <__malloc_lock+0x8>)
 8002f02:	f7ff bf0f 	b.w	8002d24 <__retarget_lock_acquire_recursive>
 8002f06:	bf00      	nop
 8002f08:	2000040c 	.word	0x2000040c

08002f0c <__malloc_unlock>:
 8002f0c:	4801      	ldr	r0, [pc, #4]	@ (8002f14 <__malloc_unlock+0x8>)
 8002f0e:	f7ff bf0a 	b.w	8002d26 <__retarget_lock_release_recursive>
 8002f12:	bf00      	nop
 8002f14:	2000040c 	.word	0x2000040c

08002f18 <__ssputs_r>:
 8002f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f1c:	688e      	ldr	r6, [r1, #8]
 8002f1e:	461f      	mov	r7, r3
 8002f20:	42be      	cmp	r6, r7
 8002f22:	680b      	ldr	r3, [r1, #0]
 8002f24:	4682      	mov	sl, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4690      	mov	r8, r2
 8002f2a:	d82d      	bhi.n	8002f88 <__ssputs_r+0x70>
 8002f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f34:	d026      	beq.n	8002f84 <__ssputs_r+0x6c>
 8002f36:	6965      	ldr	r5, [r4, #20]
 8002f38:	6909      	ldr	r1, [r1, #16]
 8002f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f3e:	eba3 0901 	sub.w	r9, r3, r1
 8002f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f46:	1c7b      	adds	r3, r7, #1
 8002f48:	444b      	add	r3, r9
 8002f4a:	106d      	asrs	r5, r5, #1
 8002f4c:	429d      	cmp	r5, r3
 8002f4e:	bf38      	it	cc
 8002f50:	461d      	movcc	r5, r3
 8002f52:	0553      	lsls	r3, r2, #21
 8002f54:	d527      	bpl.n	8002fa6 <__ssputs_r+0x8e>
 8002f56:	4629      	mov	r1, r5
 8002f58:	f7ff ff52 	bl	8002e00 <_malloc_r>
 8002f5c:	4606      	mov	r6, r0
 8002f5e:	b360      	cbz	r0, 8002fba <__ssputs_r+0xa2>
 8002f60:	6921      	ldr	r1, [r4, #16]
 8002f62:	464a      	mov	r2, r9
 8002f64:	f000 fae8 	bl	8003538 <memcpy>
 8002f68:	89a3      	ldrh	r3, [r4, #12]
 8002f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f72:	81a3      	strh	r3, [r4, #12]
 8002f74:	6126      	str	r6, [r4, #16]
 8002f76:	6165      	str	r5, [r4, #20]
 8002f78:	444e      	add	r6, r9
 8002f7a:	eba5 0509 	sub.w	r5, r5, r9
 8002f7e:	6026      	str	r6, [r4, #0]
 8002f80:	60a5      	str	r5, [r4, #8]
 8002f82:	463e      	mov	r6, r7
 8002f84:	42be      	cmp	r6, r7
 8002f86:	d900      	bls.n	8002f8a <__ssputs_r+0x72>
 8002f88:	463e      	mov	r6, r7
 8002f8a:	6820      	ldr	r0, [r4, #0]
 8002f8c:	4632      	mov	r2, r6
 8002f8e:	4641      	mov	r1, r8
 8002f90:	f000 faa8 	bl	80034e4 <memmove>
 8002f94:	68a3      	ldr	r3, [r4, #8]
 8002f96:	1b9b      	subs	r3, r3, r6
 8002f98:	60a3      	str	r3, [r4, #8]
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	4433      	add	r3, r6
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa6:	462a      	mov	r2, r5
 8002fa8:	f000 fad4 	bl	8003554 <_realloc_r>
 8002fac:	4606      	mov	r6, r0
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d1e0      	bne.n	8002f74 <__ssputs_r+0x5c>
 8002fb2:	6921      	ldr	r1, [r4, #16]
 8002fb4:	4650      	mov	r0, sl
 8002fb6:	f7ff feb7 	bl	8002d28 <_free_r>
 8002fba:	230c      	movs	r3, #12
 8002fbc:	f8ca 3000 	str.w	r3, [sl]
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	e7e9      	b.n	8002fa2 <__ssputs_r+0x8a>
	...

08002fd0 <_svfiprintf_r>:
 8002fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd4:	4698      	mov	r8, r3
 8002fd6:	898b      	ldrh	r3, [r1, #12]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	b09d      	sub	sp, #116	@ 0x74
 8002fdc:	4607      	mov	r7, r0
 8002fde:	460d      	mov	r5, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	d510      	bpl.n	8003006 <_svfiprintf_r+0x36>
 8002fe4:	690b      	ldr	r3, [r1, #16]
 8002fe6:	b973      	cbnz	r3, 8003006 <_svfiprintf_r+0x36>
 8002fe8:	2140      	movs	r1, #64	@ 0x40
 8002fea:	f7ff ff09 	bl	8002e00 <_malloc_r>
 8002fee:	6028      	str	r0, [r5, #0]
 8002ff0:	6128      	str	r0, [r5, #16]
 8002ff2:	b930      	cbnz	r0, 8003002 <_svfiprintf_r+0x32>
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	b01d      	add	sp, #116	@ 0x74
 8002ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003002:	2340      	movs	r3, #64	@ 0x40
 8003004:	616b      	str	r3, [r5, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	9309      	str	r3, [sp, #36]	@ 0x24
 800300a:	2320      	movs	r3, #32
 800300c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003010:	f8cd 800c 	str.w	r8, [sp, #12]
 8003014:	2330      	movs	r3, #48	@ 0x30
 8003016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80031b4 <_svfiprintf_r+0x1e4>
 800301a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800301e:	f04f 0901 	mov.w	r9, #1
 8003022:	4623      	mov	r3, r4
 8003024:	469a      	mov	sl, r3
 8003026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800302a:	b10a      	cbz	r2, 8003030 <_svfiprintf_r+0x60>
 800302c:	2a25      	cmp	r2, #37	@ 0x25
 800302e:	d1f9      	bne.n	8003024 <_svfiprintf_r+0x54>
 8003030:	ebba 0b04 	subs.w	fp, sl, r4
 8003034:	d00b      	beq.n	800304e <_svfiprintf_r+0x7e>
 8003036:	465b      	mov	r3, fp
 8003038:	4622      	mov	r2, r4
 800303a:	4629      	mov	r1, r5
 800303c:	4638      	mov	r0, r7
 800303e:	f7ff ff6b 	bl	8002f18 <__ssputs_r>
 8003042:	3001      	adds	r0, #1
 8003044:	f000 80a7 	beq.w	8003196 <_svfiprintf_r+0x1c6>
 8003048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800304a:	445a      	add	r2, fp
 800304c:	9209      	str	r2, [sp, #36]	@ 0x24
 800304e:	f89a 3000 	ldrb.w	r3, [sl]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 809f 	beq.w	8003196 <_svfiprintf_r+0x1c6>
 8003058:	2300      	movs	r3, #0
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003062:	f10a 0a01 	add.w	sl, sl, #1
 8003066:	9304      	str	r3, [sp, #16]
 8003068:	9307      	str	r3, [sp, #28]
 800306a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800306e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003070:	4654      	mov	r4, sl
 8003072:	2205      	movs	r2, #5
 8003074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003078:	484e      	ldr	r0, [pc, #312]	@ (80031b4 <_svfiprintf_r+0x1e4>)
 800307a:	f7fd f8b1 	bl	80001e0 <memchr>
 800307e:	9a04      	ldr	r2, [sp, #16]
 8003080:	b9d8      	cbnz	r0, 80030ba <_svfiprintf_r+0xea>
 8003082:	06d0      	lsls	r0, r2, #27
 8003084:	bf44      	itt	mi
 8003086:	2320      	movmi	r3, #32
 8003088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800308c:	0711      	lsls	r1, r2, #28
 800308e:	bf44      	itt	mi
 8003090:	232b      	movmi	r3, #43	@ 0x2b
 8003092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003096:	f89a 3000 	ldrb.w	r3, [sl]
 800309a:	2b2a      	cmp	r3, #42	@ 0x2a
 800309c:	d015      	beq.n	80030ca <_svfiprintf_r+0xfa>
 800309e:	9a07      	ldr	r2, [sp, #28]
 80030a0:	4654      	mov	r4, sl
 80030a2:	2000      	movs	r0, #0
 80030a4:	f04f 0c0a 	mov.w	ip, #10
 80030a8:	4621      	mov	r1, r4
 80030aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030ae:	3b30      	subs	r3, #48	@ 0x30
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d94b      	bls.n	800314c <_svfiprintf_r+0x17c>
 80030b4:	b1b0      	cbz	r0, 80030e4 <_svfiprintf_r+0x114>
 80030b6:	9207      	str	r2, [sp, #28]
 80030b8:	e014      	b.n	80030e4 <_svfiprintf_r+0x114>
 80030ba:	eba0 0308 	sub.w	r3, r0, r8
 80030be:	fa09 f303 	lsl.w	r3, r9, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	9304      	str	r3, [sp, #16]
 80030c6:	46a2      	mov	sl, r4
 80030c8:	e7d2      	b.n	8003070 <_svfiprintf_r+0xa0>
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	1d19      	adds	r1, r3, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	9103      	str	r1, [sp, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfbb      	ittet	lt
 80030d6:	425b      	neglt	r3, r3
 80030d8:	f042 0202 	orrlt.w	r2, r2, #2
 80030dc:	9307      	strge	r3, [sp, #28]
 80030de:	9307      	strlt	r3, [sp, #28]
 80030e0:	bfb8      	it	lt
 80030e2:	9204      	strlt	r2, [sp, #16]
 80030e4:	7823      	ldrb	r3, [r4, #0]
 80030e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80030e8:	d10a      	bne.n	8003100 <_svfiprintf_r+0x130>
 80030ea:	7863      	ldrb	r3, [r4, #1]
 80030ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ee:	d132      	bne.n	8003156 <_svfiprintf_r+0x186>
 80030f0:	9b03      	ldr	r3, [sp, #12]
 80030f2:	1d1a      	adds	r2, r3, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	9203      	str	r2, [sp, #12]
 80030f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030fc:	3402      	adds	r4, #2
 80030fe:	9305      	str	r3, [sp, #20]
 8003100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80031c4 <_svfiprintf_r+0x1f4>
 8003104:	7821      	ldrb	r1, [r4, #0]
 8003106:	2203      	movs	r2, #3
 8003108:	4650      	mov	r0, sl
 800310a:	f7fd f869 	bl	80001e0 <memchr>
 800310e:	b138      	cbz	r0, 8003120 <_svfiprintf_r+0x150>
 8003110:	9b04      	ldr	r3, [sp, #16]
 8003112:	eba0 000a 	sub.w	r0, r0, sl
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	4082      	lsls	r2, r0
 800311a:	4313      	orrs	r3, r2
 800311c:	3401      	adds	r4, #1
 800311e:	9304      	str	r3, [sp, #16]
 8003120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003124:	4824      	ldr	r0, [pc, #144]	@ (80031b8 <_svfiprintf_r+0x1e8>)
 8003126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800312a:	2206      	movs	r2, #6
 800312c:	f7fd f858 	bl	80001e0 <memchr>
 8003130:	2800      	cmp	r0, #0
 8003132:	d036      	beq.n	80031a2 <_svfiprintf_r+0x1d2>
 8003134:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <_svfiprintf_r+0x1ec>)
 8003136:	bb1b      	cbnz	r3, 8003180 <_svfiprintf_r+0x1b0>
 8003138:	9b03      	ldr	r3, [sp, #12]
 800313a:	3307      	adds	r3, #7
 800313c:	f023 0307 	bic.w	r3, r3, #7
 8003140:	3308      	adds	r3, #8
 8003142:	9303      	str	r3, [sp, #12]
 8003144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003146:	4433      	add	r3, r6
 8003148:	9309      	str	r3, [sp, #36]	@ 0x24
 800314a:	e76a      	b.n	8003022 <_svfiprintf_r+0x52>
 800314c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003150:	460c      	mov	r4, r1
 8003152:	2001      	movs	r0, #1
 8003154:	e7a8      	b.n	80030a8 <_svfiprintf_r+0xd8>
 8003156:	2300      	movs	r3, #0
 8003158:	3401      	adds	r4, #1
 800315a:	9305      	str	r3, [sp, #20]
 800315c:	4619      	mov	r1, r3
 800315e:	f04f 0c0a 	mov.w	ip, #10
 8003162:	4620      	mov	r0, r4
 8003164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003168:	3a30      	subs	r2, #48	@ 0x30
 800316a:	2a09      	cmp	r2, #9
 800316c:	d903      	bls.n	8003176 <_svfiprintf_r+0x1a6>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0c6      	beq.n	8003100 <_svfiprintf_r+0x130>
 8003172:	9105      	str	r1, [sp, #20]
 8003174:	e7c4      	b.n	8003100 <_svfiprintf_r+0x130>
 8003176:	fb0c 2101 	mla	r1, ip, r1, r2
 800317a:	4604      	mov	r4, r0
 800317c:	2301      	movs	r3, #1
 800317e:	e7f0      	b.n	8003162 <_svfiprintf_r+0x192>
 8003180:	ab03      	add	r3, sp, #12
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	462a      	mov	r2, r5
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <_svfiprintf_r+0x1f0>)
 8003188:	a904      	add	r1, sp, #16
 800318a:	4638      	mov	r0, r7
 800318c:	f3af 8000 	nop.w
 8003190:	1c42      	adds	r2, r0, #1
 8003192:	4606      	mov	r6, r0
 8003194:	d1d6      	bne.n	8003144 <_svfiprintf_r+0x174>
 8003196:	89ab      	ldrh	r3, [r5, #12]
 8003198:	065b      	lsls	r3, r3, #25
 800319a:	f53f af2d 	bmi.w	8002ff8 <_svfiprintf_r+0x28>
 800319e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031a0:	e72c      	b.n	8002ffc <_svfiprintf_r+0x2c>
 80031a2:	ab03      	add	r3, sp, #12
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	462a      	mov	r2, r5
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <_svfiprintf_r+0x1f0>)
 80031aa:	a904      	add	r1, sp, #16
 80031ac:	4638      	mov	r0, r7
 80031ae:	f000 f879 	bl	80032a4 <_printf_i>
 80031b2:	e7ed      	b.n	8003190 <_svfiprintf_r+0x1c0>
 80031b4:	08003944 	.word	0x08003944
 80031b8:	0800394e 	.word	0x0800394e
 80031bc:	00000000 	.word	0x00000000
 80031c0:	08002f19 	.word	0x08002f19
 80031c4:	0800394a 	.word	0x0800394a

080031c8 <_printf_common>:
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	4616      	mov	r6, r2
 80031ce:	4698      	mov	r8, r3
 80031d0:	688a      	ldr	r2, [r1, #8]
 80031d2:	690b      	ldr	r3, [r1, #16]
 80031d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031d8:	4293      	cmp	r3, r2
 80031da:	bfb8      	it	lt
 80031dc:	4613      	movlt	r3, r2
 80031de:	6033      	str	r3, [r6, #0]
 80031e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031e4:	4607      	mov	r7, r0
 80031e6:	460c      	mov	r4, r1
 80031e8:	b10a      	cbz	r2, 80031ee <_printf_common+0x26>
 80031ea:	3301      	adds	r3, #1
 80031ec:	6033      	str	r3, [r6, #0]
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	0699      	lsls	r1, r3, #26
 80031f2:	bf42      	ittt	mi
 80031f4:	6833      	ldrmi	r3, [r6, #0]
 80031f6:	3302      	addmi	r3, #2
 80031f8:	6033      	strmi	r3, [r6, #0]
 80031fa:	6825      	ldr	r5, [r4, #0]
 80031fc:	f015 0506 	ands.w	r5, r5, #6
 8003200:	d106      	bne.n	8003210 <_printf_common+0x48>
 8003202:	f104 0a19 	add.w	sl, r4, #25
 8003206:	68e3      	ldr	r3, [r4, #12]
 8003208:	6832      	ldr	r2, [r6, #0]
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	42ab      	cmp	r3, r5
 800320e:	dc26      	bgt.n	800325e <_printf_common+0x96>
 8003210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	3b00      	subs	r3, #0
 8003218:	bf18      	it	ne
 800321a:	2301      	movne	r3, #1
 800321c:	0692      	lsls	r2, r2, #26
 800321e:	d42b      	bmi.n	8003278 <_printf_common+0xb0>
 8003220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003224:	4641      	mov	r1, r8
 8003226:	4638      	mov	r0, r7
 8003228:	47c8      	blx	r9
 800322a:	3001      	adds	r0, #1
 800322c:	d01e      	beq.n	800326c <_printf_common+0xa4>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	6922      	ldr	r2, [r4, #16]
 8003232:	f003 0306 	and.w	r3, r3, #6
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf02      	ittt	eq
 800323a:	68e5      	ldreq	r5, [r4, #12]
 800323c:	6833      	ldreq	r3, [r6, #0]
 800323e:	1aed      	subeq	r5, r5, r3
 8003240:	68a3      	ldr	r3, [r4, #8]
 8003242:	bf0c      	ite	eq
 8003244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003248:	2500      	movne	r5, #0
 800324a:	4293      	cmp	r3, r2
 800324c:	bfc4      	itt	gt
 800324e:	1a9b      	subgt	r3, r3, r2
 8003250:	18ed      	addgt	r5, r5, r3
 8003252:	2600      	movs	r6, #0
 8003254:	341a      	adds	r4, #26
 8003256:	42b5      	cmp	r5, r6
 8003258:	d11a      	bne.n	8003290 <_printf_common+0xc8>
 800325a:	2000      	movs	r0, #0
 800325c:	e008      	b.n	8003270 <_printf_common+0xa8>
 800325e:	2301      	movs	r3, #1
 8003260:	4652      	mov	r2, sl
 8003262:	4641      	mov	r1, r8
 8003264:	4638      	mov	r0, r7
 8003266:	47c8      	blx	r9
 8003268:	3001      	adds	r0, #1
 800326a:	d103      	bne.n	8003274 <_printf_common+0xac>
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003274:	3501      	adds	r5, #1
 8003276:	e7c6      	b.n	8003206 <_printf_common+0x3e>
 8003278:	18e1      	adds	r1, r4, r3
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	2030      	movs	r0, #48	@ 0x30
 800327e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003282:	4422      	add	r2, r4
 8003284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800328c:	3302      	adds	r3, #2
 800328e:	e7c7      	b.n	8003220 <_printf_common+0x58>
 8003290:	2301      	movs	r3, #1
 8003292:	4622      	mov	r2, r4
 8003294:	4641      	mov	r1, r8
 8003296:	4638      	mov	r0, r7
 8003298:	47c8      	blx	r9
 800329a:	3001      	adds	r0, #1
 800329c:	d0e6      	beq.n	800326c <_printf_common+0xa4>
 800329e:	3601      	adds	r6, #1
 80032a0:	e7d9      	b.n	8003256 <_printf_common+0x8e>
	...

080032a4 <_printf_i>:
 80032a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	7e0f      	ldrb	r7, [r1, #24]
 80032aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032ac:	2f78      	cmp	r7, #120	@ 0x78
 80032ae:	4691      	mov	r9, r2
 80032b0:	4680      	mov	r8, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	469a      	mov	sl, r3
 80032b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032ba:	d807      	bhi.n	80032cc <_printf_i+0x28>
 80032bc:	2f62      	cmp	r7, #98	@ 0x62
 80032be:	d80a      	bhi.n	80032d6 <_printf_i+0x32>
 80032c0:	2f00      	cmp	r7, #0
 80032c2:	f000 80d2 	beq.w	800346a <_printf_i+0x1c6>
 80032c6:	2f58      	cmp	r7, #88	@ 0x58
 80032c8:	f000 80b9 	beq.w	800343e <_printf_i+0x19a>
 80032cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032d4:	e03a      	b.n	800334c <_printf_i+0xa8>
 80032d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032da:	2b15      	cmp	r3, #21
 80032dc:	d8f6      	bhi.n	80032cc <_printf_i+0x28>
 80032de:	a101      	add	r1, pc, #4	@ (adr r1, 80032e4 <_printf_i+0x40>)
 80032e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032e4:	0800333d 	.word	0x0800333d
 80032e8:	08003351 	.word	0x08003351
 80032ec:	080032cd 	.word	0x080032cd
 80032f0:	080032cd 	.word	0x080032cd
 80032f4:	080032cd 	.word	0x080032cd
 80032f8:	080032cd 	.word	0x080032cd
 80032fc:	08003351 	.word	0x08003351
 8003300:	080032cd 	.word	0x080032cd
 8003304:	080032cd 	.word	0x080032cd
 8003308:	080032cd 	.word	0x080032cd
 800330c:	080032cd 	.word	0x080032cd
 8003310:	08003451 	.word	0x08003451
 8003314:	0800337b 	.word	0x0800337b
 8003318:	0800340b 	.word	0x0800340b
 800331c:	080032cd 	.word	0x080032cd
 8003320:	080032cd 	.word	0x080032cd
 8003324:	08003473 	.word	0x08003473
 8003328:	080032cd 	.word	0x080032cd
 800332c:	0800337b 	.word	0x0800337b
 8003330:	080032cd 	.word	0x080032cd
 8003334:	080032cd 	.word	0x080032cd
 8003338:	08003413 	.word	0x08003413
 800333c:	6833      	ldr	r3, [r6, #0]
 800333e:	1d1a      	adds	r2, r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6032      	str	r2, [r6, #0]
 8003344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800334c:	2301      	movs	r3, #1
 800334e:	e09d      	b.n	800348c <_printf_i+0x1e8>
 8003350:	6833      	ldr	r3, [r6, #0]
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	1d19      	adds	r1, r3, #4
 8003356:	6031      	str	r1, [r6, #0]
 8003358:	0606      	lsls	r6, r0, #24
 800335a:	d501      	bpl.n	8003360 <_printf_i+0xbc>
 800335c:	681d      	ldr	r5, [r3, #0]
 800335e:	e003      	b.n	8003368 <_printf_i+0xc4>
 8003360:	0645      	lsls	r5, r0, #25
 8003362:	d5fb      	bpl.n	800335c <_printf_i+0xb8>
 8003364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003368:	2d00      	cmp	r5, #0
 800336a:	da03      	bge.n	8003374 <_printf_i+0xd0>
 800336c:	232d      	movs	r3, #45	@ 0x2d
 800336e:	426d      	negs	r5, r5
 8003370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003374:	4859      	ldr	r0, [pc, #356]	@ (80034dc <_printf_i+0x238>)
 8003376:	230a      	movs	r3, #10
 8003378:	e011      	b.n	800339e <_printf_i+0xfa>
 800337a:	6821      	ldr	r1, [r4, #0]
 800337c:	6833      	ldr	r3, [r6, #0]
 800337e:	0608      	lsls	r0, r1, #24
 8003380:	f853 5b04 	ldr.w	r5, [r3], #4
 8003384:	d402      	bmi.n	800338c <_printf_i+0xe8>
 8003386:	0649      	lsls	r1, r1, #25
 8003388:	bf48      	it	mi
 800338a:	b2ad      	uxthmi	r5, r5
 800338c:	2f6f      	cmp	r7, #111	@ 0x6f
 800338e:	4853      	ldr	r0, [pc, #332]	@ (80034dc <_printf_i+0x238>)
 8003390:	6033      	str	r3, [r6, #0]
 8003392:	bf14      	ite	ne
 8003394:	230a      	movne	r3, #10
 8003396:	2308      	moveq	r3, #8
 8003398:	2100      	movs	r1, #0
 800339a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800339e:	6866      	ldr	r6, [r4, #4]
 80033a0:	60a6      	str	r6, [r4, #8]
 80033a2:	2e00      	cmp	r6, #0
 80033a4:	bfa2      	ittt	ge
 80033a6:	6821      	ldrge	r1, [r4, #0]
 80033a8:	f021 0104 	bicge.w	r1, r1, #4
 80033ac:	6021      	strge	r1, [r4, #0]
 80033ae:	b90d      	cbnz	r5, 80033b4 <_printf_i+0x110>
 80033b0:	2e00      	cmp	r6, #0
 80033b2:	d04b      	beq.n	800344c <_printf_i+0x1a8>
 80033b4:	4616      	mov	r6, r2
 80033b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80033ba:	fb03 5711 	mls	r7, r3, r1, r5
 80033be:	5dc7      	ldrb	r7, [r0, r7]
 80033c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033c4:	462f      	mov	r7, r5
 80033c6:	42bb      	cmp	r3, r7
 80033c8:	460d      	mov	r5, r1
 80033ca:	d9f4      	bls.n	80033b6 <_printf_i+0x112>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d10b      	bne.n	80033e8 <_printf_i+0x144>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	07df      	lsls	r7, r3, #31
 80033d4:	d508      	bpl.n	80033e8 <_printf_i+0x144>
 80033d6:	6923      	ldr	r3, [r4, #16]
 80033d8:	6861      	ldr	r1, [r4, #4]
 80033da:	4299      	cmp	r1, r3
 80033dc:	bfde      	ittt	le
 80033de:	2330      	movle	r3, #48	@ 0x30
 80033e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033e8:	1b92      	subs	r2, r2, r6
 80033ea:	6122      	str	r2, [r4, #16]
 80033ec:	f8cd a000 	str.w	sl, [sp]
 80033f0:	464b      	mov	r3, r9
 80033f2:	aa03      	add	r2, sp, #12
 80033f4:	4621      	mov	r1, r4
 80033f6:	4640      	mov	r0, r8
 80033f8:	f7ff fee6 	bl	80031c8 <_printf_common>
 80033fc:	3001      	adds	r0, #1
 80033fe:	d14a      	bne.n	8003496 <_printf_i+0x1f2>
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	b004      	add	sp, #16
 8003406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	f043 0320 	orr.w	r3, r3, #32
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	4833      	ldr	r0, [pc, #204]	@ (80034e0 <_printf_i+0x23c>)
 8003414:	2778      	movs	r7, #120	@ 0x78
 8003416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	6831      	ldr	r1, [r6, #0]
 800341e:	061f      	lsls	r7, r3, #24
 8003420:	f851 5b04 	ldr.w	r5, [r1], #4
 8003424:	d402      	bmi.n	800342c <_printf_i+0x188>
 8003426:	065f      	lsls	r7, r3, #25
 8003428:	bf48      	it	mi
 800342a:	b2ad      	uxthmi	r5, r5
 800342c:	6031      	str	r1, [r6, #0]
 800342e:	07d9      	lsls	r1, r3, #31
 8003430:	bf44      	itt	mi
 8003432:	f043 0320 	orrmi.w	r3, r3, #32
 8003436:	6023      	strmi	r3, [r4, #0]
 8003438:	b11d      	cbz	r5, 8003442 <_printf_i+0x19e>
 800343a:	2310      	movs	r3, #16
 800343c:	e7ac      	b.n	8003398 <_printf_i+0xf4>
 800343e:	4827      	ldr	r0, [pc, #156]	@ (80034dc <_printf_i+0x238>)
 8003440:	e7e9      	b.n	8003416 <_printf_i+0x172>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	f023 0320 	bic.w	r3, r3, #32
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	e7f6      	b.n	800343a <_printf_i+0x196>
 800344c:	4616      	mov	r6, r2
 800344e:	e7bd      	b.n	80033cc <_printf_i+0x128>
 8003450:	6833      	ldr	r3, [r6, #0]
 8003452:	6825      	ldr	r5, [r4, #0]
 8003454:	6961      	ldr	r1, [r4, #20]
 8003456:	1d18      	adds	r0, r3, #4
 8003458:	6030      	str	r0, [r6, #0]
 800345a:	062e      	lsls	r6, r5, #24
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	d501      	bpl.n	8003464 <_printf_i+0x1c0>
 8003460:	6019      	str	r1, [r3, #0]
 8003462:	e002      	b.n	800346a <_printf_i+0x1c6>
 8003464:	0668      	lsls	r0, r5, #25
 8003466:	d5fb      	bpl.n	8003460 <_printf_i+0x1bc>
 8003468:	8019      	strh	r1, [r3, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	6123      	str	r3, [r4, #16]
 800346e:	4616      	mov	r6, r2
 8003470:	e7bc      	b.n	80033ec <_printf_i+0x148>
 8003472:	6833      	ldr	r3, [r6, #0]
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	6032      	str	r2, [r6, #0]
 8003478:	681e      	ldr	r6, [r3, #0]
 800347a:	6862      	ldr	r2, [r4, #4]
 800347c:	2100      	movs	r1, #0
 800347e:	4630      	mov	r0, r6
 8003480:	f7fc feae 	bl	80001e0 <memchr>
 8003484:	b108      	cbz	r0, 800348a <_printf_i+0x1e6>
 8003486:	1b80      	subs	r0, r0, r6
 8003488:	6060      	str	r0, [r4, #4]
 800348a:	6863      	ldr	r3, [r4, #4]
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	2300      	movs	r3, #0
 8003490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003494:	e7aa      	b.n	80033ec <_printf_i+0x148>
 8003496:	6923      	ldr	r3, [r4, #16]
 8003498:	4632      	mov	r2, r6
 800349a:	4649      	mov	r1, r9
 800349c:	4640      	mov	r0, r8
 800349e:	47d0      	blx	sl
 80034a0:	3001      	adds	r0, #1
 80034a2:	d0ad      	beq.n	8003400 <_printf_i+0x15c>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	079b      	lsls	r3, r3, #30
 80034a8:	d413      	bmi.n	80034d2 <_printf_i+0x22e>
 80034aa:	68e0      	ldr	r0, [r4, #12]
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	4298      	cmp	r0, r3
 80034b0:	bfb8      	it	lt
 80034b2:	4618      	movlt	r0, r3
 80034b4:	e7a6      	b.n	8003404 <_printf_i+0x160>
 80034b6:	2301      	movs	r3, #1
 80034b8:	4632      	mov	r2, r6
 80034ba:	4649      	mov	r1, r9
 80034bc:	4640      	mov	r0, r8
 80034be:	47d0      	blx	sl
 80034c0:	3001      	adds	r0, #1
 80034c2:	d09d      	beq.n	8003400 <_printf_i+0x15c>
 80034c4:	3501      	adds	r5, #1
 80034c6:	68e3      	ldr	r3, [r4, #12]
 80034c8:	9903      	ldr	r1, [sp, #12]
 80034ca:	1a5b      	subs	r3, r3, r1
 80034cc:	42ab      	cmp	r3, r5
 80034ce:	dcf2      	bgt.n	80034b6 <_printf_i+0x212>
 80034d0:	e7eb      	b.n	80034aa <_printf_i+0x206>
 80034d2:	2500      	movs	r5, #0
 80034d4:	f104 0619 	add.w	r6, r4, #25
 80034d8:	e7f5      	b.n	80034c6 <_printf_i+0x222>
 80034da:	bf00      	nop
 80034dc:	08003955 	.word	0x08003955
 80034e0:	08003966 	.word	0x08003966

080034e4 <memmove>:
 80034e4:	4288      	cmp	r0, r1
 80034e6:	b510      	push	{r4, lr}
 80034e8:	eb01 0402 	add.w	r4, r1, r2
 80034ec:	d902      	bls.n	80034f4 <memmove+0x10>
 80034ee:	4284      	cmp	r4, r0
 80034f0:	4623      	mov	r3, r4
 80034f2:	d807      	bhi.n	8003504 <memmove+0x20>
 80034f4:	1e43      	subs	r3, r0, #1
 80034f6:	42a1      	cmp	r1, r4
 80034f8:	d008      	beq.n	800350c <memmove+0x28>
 80034fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003502:	e7f8      	b.n	80034f6 <memmove+0x12>
 8003504:	4402      	add	r2, r0
 8003506:	4601      	mov	r1, r0
 8003508:	428a      	cmp	r2, r1
 800350a:	d100      	bne.n	800350e <memmove+0x2a>
 800350c:	bd10      	pop	{r4, pc}
 800350e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003516:	e7f7      	b.n	8003508 <memmove+0x24>

08003518 <_sbrk_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d06      	ldr	r5, [pc, #24]	@ (8003534 <_sbrk_r+0x1c>)
 800351c:	2300      	movs	r3, #0
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7ff fb42 	bl	8002bac <_sbrk>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_sbrk_r+0x1a>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_sbrk_r+0x1a>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	20000408 	.word	0x20000408

08003538 <memcpy>:
 8003538:	440a      	add	r2, r1
 800353a:	4291      	cmp	r1, r2
 800353c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003540:	d100      	bne.n	8003544 <memcpy+0xc>
 8003542:	4770      	bx	lr
 8003544:	b510      	push	{r4, lr}
 8003546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800354a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800354e:	4291      	cmp	r1, r2
 8003550:	d1f9      	bne.n	8003546 <memcpy+0xe>
 8003552:	bd10      	pop	{r4, pc}

08003554 <_realloc_r>:
 8003554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003558:	4680      	mov	r8, r0
 800355a:	4615      	mov	r5, r2
 800355c:	460c      	mov	r4, r1
 800355e:	b921      	cbnz	r1, 800356a <_realloc_r+0x16>
 8003560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003564:	4611      	mov	r1, r2
 8003566:	f7ff bc4b 	b.w	8002e00 <_malloc_r>
 800356a:	b92a      	cbnz	r2, 8003578 <_realloc_r+0x24>
 800356c:	f7ff fbdc 	bl	8002d28 <_free_r>
 8003570:	2400      	movs	r4, #0
 8003572:	4620      	mov	r0, r4
 8003574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003578:	f000 f81a 	bl	80035b0 <_malloc_usable_size_r>
 800357c:	4285      	cmp	r5, r0
 800357e:	4606      	mov	r6, r0
 8003580:	d802      	bhi.n	8003588 <_realloc_r+0x34>
 8003582:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003586:	d8f4      	bhi.n	8003572 <_realloc_r+0x1e>
 8003588:	4629      	mov	r1, r5
 800358a:	4640      	mov	r0, r8
 800358c:	f7ff fc38 	bl	8002e00 <_malloc_r>
 8003590:	4607      	mov	r7, r0
 8003592:	2800      	cmp	r0, #0
 8003594:	d0ec      	beq.n	8003570 <_realloc_r+0x1c>
 8003596:	42b5      	cmp	r5, r6
 8003598:	462a      	mov	r2, r5
 800359a:	4621      	mov	r1, r4
 800359c:	bf28      	it	cs
 800359e:	4632      	movcs	r2, r6
 80035a0:	f7ff ffca 	bl	8003538 <memcpy>
 80035a4:	4621      	mov	r1, r4
 80035a6:	4640      	mov	r0, r8
 80035a8:	f7ff fbbe 	bl	8002d28 <_free_r>
 80035ac:	463c      	mov	r4, r7
 80035ae:	e7e0      	b.n	8003572 <_realloc_r+0x1e>

080035b0 <_malloc_usable_size_r>:
 80035b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035b4:	1f18      	subs	r0, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bfbc      	itt	lt
 80035ba:	580b      	ldrlt	r3, [r1, r0]
 80035bc:	18c0      	addlt	r0, r0, r3
 80035be:	4770      	bx	lr

080035c0 <_init>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr

080035cc <_fini>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr
